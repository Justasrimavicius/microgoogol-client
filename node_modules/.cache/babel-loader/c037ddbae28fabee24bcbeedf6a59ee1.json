{"ast":null,"code":"const {\n  generateKeyPairSync,\n  generateKeyPair: async\n} = require('crypto');\nconst {\n  promisify\n} = require('util');\nconst {\n  THUMBPRINT_MATERIAL,\n  JWK_MEMBERS,\n  PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS,\n  KEY_MANAGEMENT_DECRYPT,\n  KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts');\nconst {\n  keyObjectSupported\n} = require('../../help/runtime_support');\nconst {\n  createPublicKey,\n  createPrivateKey\n} = require('../../help/key_object');\nconst Key = require('./base');\nconst generateKeyPair = promisify(async);\nconst RSA_PUBLIC = new Set(['e', 'n']);\nObject.freeze(RSA_PUBLIC);\nconst RSA_PRIVATE = new Set([...RSA_PUBLIC, 'd', 'p', 'q', 'dp', 'dq', 'qi']);\nObject.freeze(RSA_PRIVATE);\n\n// RSA Key Type\nclass RSAKey extends Key {\n  constructor() {\n    super(...arguments);\n    this[JWK_MEMBERS]();\n    Object.defineProperties(this, {\n      kty: {\n        value: 'RSA',\n        enumerable: true\n      },\n      length: {\n        get() {\n          Object.defineProperty(this, 'length', {\n            value: Buffer.byteLength(this.n, 'base64') * 8,\n            configurable: false\n          });\n          return this.length;\n        },\n        configurable: true\n      }\n    });\n  }\n  static get [PUBLIC_MEMBERS]() {\n    return RSA_PUBLIC;\n  }\n  static get [PRIVATE_MEMBERS]() {\n    return RSA_PRIVATE;\n  }\n\n  // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n  [THUMBPRINT_MATERIAL]() {\n    return {\n      e: this.e,\n      kty: 'RSA',\n      n: this.n\n    };\n  }\n  [KEY_MANAGEMENT_ENCRYPT]() {\n    return this.algorithms('wrapKey');\n  }\n  [KEY_MANAGEMENT_DECRYPT]() {\n    return this.algorithms('unwrapKey');\n  }\n  static async generate() {\n    let len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2048;\n    let privat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!Number.isSafeInteger(len) || len < 512 || len % 8 !== 0 || 'electron' in process.versions && len % 128 !== 0) {\n      throw new TypeError('invalid bit length');\n    }\n    let privateKey, publicKey;\n    if (keyObjectSupported) {\n      ({\n        privateKey,\n        publicKey\n      } = await generateKeyPair('rsa', {\n        modulusLength: len\n      }));\n      return privat ? privateKey : publicKey;\n    }\n    ({\n      privateKey,\n      publicKey\n    } = await generateKeyPair('rsa', {\n      modulusLength: len,\n      publicKeyEncoding: {\n        type: 'spki',\n        format: 'pem'\n      },\n      privateKeyEncoding: {\n        type: 'pkcs8',\n        format: 'pem'\n      }\n    }));\n    if (privat) {\n      return createPrivateKey(privateKey);\n    } else {\n      return createPublicKey(publicKey);\n    }\n  }\n  static generateSync() {\n    let len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 2048;\n    let privat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    if (!Number.isSafeInteger(len) || len < 512 || len % 8 !== 0 || 'electron' in process.versions && len % 128 !== 0) {\n      throw new TypeError('invalid bit length');\n    }\n    let privateKey, publicKey;\n    if (keyObjectSupported) {\n      ({\n        privateKey,\n        publicKey\n      } = generateKeyPairSync('rsa', {\n        modulusLength: len\n      }));\n      return privat ? privateKey : publicKey;\n    }\n    ({\n      privateKey,\n      publicKey\n    } = generateKeyPairSync('rsa', {\n      modulusLength: len,\n      publicKeyEncoding: {\n        type: 'spki',\n        format: 'pem'\n      },\n      privateKeyEncoding: {\n        type: 'pkcs8',\n        format: 'pem'\n      }\n    }));\n    if (privat) {\n      return createPrivateKey(privateKey);\n    } else {\n      return createPublicKey(publicKey);\n    }\n  }\n}\nmodule.exports = RSAKey;","map":{"version":3,"names":["generateKeyPairSync","generateKeyPair","async","require","promisify","THUMBPRINT_MATERIAL","JWK_MEMBERS","PUBLIC_MEMBERS","PRIVATE_MEMBERS","KEY_MANAGEMENT_DECRYPT","KEY_MANAGEMENT_ENCRYPT","keyObjectSupported","createPublicKey","createPrivateKey","Key","RSA_PUBLIC","Set","Object","freeze","RSA_PRIVATE","RSAKey","constructor","defineProperties","kty","value","enumerable","length","get","defineProperty","Buffer","byteLength","n","configurable","e","algorithms","generate","len","privat","Number","isSafeInteger","process","versions","TypeError","privateKey","publicKey","modulusLength","publicKeyEncoding","type","format","privateKeyEncoding","generateSync","module","exports"],"sources":["/Users/justinas/Documents/repos/microgogool/client/node_modules/jose/lib/jwk/key/rsa.js"],"sourcesContent":["const { generateKeyPairSync, generateKeyPair: async } = require('crypto')\nconst { promisify } = require('util')\n\nconst {\n  THUMBPRINT_MATERIAL, JWK_MEMBERS, PUBLIC_MEMBERS,\n  PRIVATE_MEMBERS, KEY_MANAGEMENT_DECRYPT, KEY_MANAGEMENT_ENCRYPT\n} = require('../../help/consts')\nconst { keyObjectSupported } = require('../../help/runtime_support')\nconst { createPublicKey, createPrivateKey } = require('../../help/key_object')\n\nconst Key = require('./base')\n\nconst generateKeyPair = promisify(async)\n\nconst RSA_PUBLIC = new Set(['e', 'n'])\nObject.freeze(RSA_PUBLIC)\nconst RSA_PRIVATE = new Set([...RSA_PUBLIC, 'd', 'p', 'q', 'dp', 'dq', 'qi'])\nObject.freeze(RSA_PRIVATE)\n\n// RSA Key Type\nclass RSAKey extends Key {\n  constructor (...args) {\n    super(...args)\n    this[JWK_MEMBERS]()\n    Object.defineProperties(this, {\n      kty: {\n        value: 'RSA',\n        enumerable: true\n      },\n      length: {\n        get () {\n          Object.defineProperty(this, 'length', {\n            value: Buffer.byteLength(this.n, 'base64') * 8,\n            configurable: false\n          })\n\n          return this.length\n        },\n        configurable: true\n      }\n    })\n  }\n\n  static get [PUBLIC_MEMBERS] () {\n    return RSA_PUBLIC\n  }\n\n  static get [PRIVATE_MEMBERS] () {\n    return RSA_PRIVATE\n  }\n\n  // https://tc39.github.io/ecma262/#sec-ordinaryownpropertykeys no need for any special\n  // JSON.stringify handling in V8\n  [THUMBPRINT_MATERIAL] () {\n    return { e: this.e, kty: 'RSA', n: this.n }\n  }\n\n  [KEY_MANAGEMENT_ENCRYPT] () {\n    return this.algorithms('wrapKey')\n  }\n\n  [KEY_MANAGEMENT_DECRYPT] () {\n    return this.algorithms('unwrapKey')\n  }\n\n  static async generate (len = 2048, privat = true) {\n    if (!Number.isSafeInteger(len) || len < 512 || len % 8 !== 0 || (('electron' in process.versions) && len % 128 !== 0)) {\n      throw new TypeError('invalid bit length')\n    }\n\n    let privateKey, publicKey\n\n    if (keyObjectSupported) {\n      ({ privateKey, publicKey } = await generateKeyPair('rsa', { modulusLength: len }))\n      return privat ? privateKey : publicKey\n    }\n\n    ({ privateKey, publicKey } = await generateKeyPair('rsa', {\n      modulusLength: len,\n      publicKeyEncoding: { type: 'spki', format: 'pem' },\n      privateKeyEncoding: { type: 'pkcs8', format: 'pem' }\n    }))\n\n    if (privat) {\n      return createPrivateKey(privateKey)\n    } else {\n      return createPublicKey(publicKey)\n    }\n  }\n\n  static generateSync (len = 2048, privat = true) {\n    if (!Number.isSafeInteger(len) || len < 512 || len % 8 !== 0 || (('electron' in process.versions) && len % 128 !== 0)) {\n      throw new TypeError('invalid bit length')\n    }\n\n    let privateKey, publicKey\n\n    if (keyObjectSupported) {\n      ({ privateKey, publicKey } = generateKeyPairSync('rsa', { modulusLength: len }))\n      return privat ? privateKey : publicKey\n    }\n\n    ({ privateKey, publicKey } = generateKeyPairSync('rsa', {\n      modulusLength: len,\n      publicKeyEncoding: { type: 'spki', format: 'pem' },\n      privateKeyEncoding: { type: 'pkcs8', format: 'pem' }\n    }))\n\n    if (privat) {\n      return createPrivateKey(privateKey)\n    } else {\n      return createPublicKey(publicKey)\n    }\n  }\n}\n\nmodule.exports = RSAKey\n"],"mappings":"AAAA,MAAM;EAAEA,mBAAmB;EAAEC,eAAe,EAAEC;AAAM,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AACzE,MAAM;EAAEC;AAAU,CAAC,GAAGD,OAAO,CAAC,MAAM,CAAC;AAErC,MAAM;EACJE,mBAAmB;EAAEC,WAAW;EAAEC,cAAc;EAChDC,eAAe;EAAEC,sBAAsB;EAAEC;AAC3C,CAAC,GAAGP,OAAO,CAAC,mBAAmB,CAAC;AAChC,MAAM;EAAEQ;AAAmB,CAAC,GAAGR,OAAO,CAAC,4BAA4B,CAAC;AACpE,MAAM;EAAES,eAAe;EAAEC;AAAiB,CAAC,GAAGV,OAAO,CAAC,uBAAuB,CAAC;AAE9E,MAAMW,GAAG,GAAGX,OAAO,CAAC,QAAQ,CAAC;AAE7B,MAAMF,eAAe,GAAGG,SAAS,CAACF,KAAK,CAAC;AAExC,MAAMa,UAAU,GAAG,IAAIC,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AACtCC,MAAM,CAACC,MAAM,CAACH,UAAU,CAAC;AACzB,MAAMI,WAAW,GAAG,IAAIH,GAAG,CAAC,CAAC,GAAGD,UAAU,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;AAC7EE,MAAM,CAACC,MAAM,CAACC,WAAW,CAAC;;AAE1B;AACA,MAAMC,MAAM,SAASN,GAAG,CAAC;EACvBO,WAAW,GAAW;IACpB,KAAK,CAAC,YAAO,CAAC;IACd,IAAI,CAACf,WAAW,CAAC,EAAE;IACnBW,MAAM,CAACK,gBAAgB,CAAC,IAAI,EAAE;MAC5BC,GAAG,EAAE;QACHC,KAAK,EAAE,KAAK;QACZC,UAAU,EAAE;MACd,CAAC;MACDC,MAAM,EAAE;QACNC,GAAG,GAAI;UACLV,MAAM,CAACW,cAAc,CAAC,IAAI,EAAE,QAAQ,EAAE;YACpCJ,KAAK,EAAEK,MAAM,CAACC,UAAU,CAAC,IAAI,CAACC,CAAC,EAAE,QAAQ,CAAC,GAAG,CAAC;YAC9CC,YAAY,EAAE;UAChB,CAAC,CAAC;UAEF,OAAO,IAAI,CAACN,MAAM;QACpB,CAAC;QACDM,YAAY,EAAE;MAChB;IACF,CAAC,CAAC;EACJ;EAEA,YAAYzB,cAAc,IAAK;IAC7B,OAAOQ,UAAU;EACnB;EAEA,YAAYP,eAAe,IAAK;IAC9B,OAAOW,WAAW;EACpB;;EAEA;EACA;EACA,CAACd,mBAAmB,IAAK;IACvB,OAAO;MAAE4B,CAAC,EAAE,IAAI,CAACA,CAAC;MAAEV,GAAG,EAAE,KAAK;MAAEQ,CAAC,EAAE,IAAI,CAACA;IAAE,CAAC;EAC7C;EAEA,CAACrB,sBAAsB,IAAK;IAC1B,OAAO,IAAI,CAACwB,UAAU,CAAC,SAAS,CAAC;EACnC;EAEA,CAACzB,sBAAsB,IAAK;IAC1B,OAAO,IAAI,CAACyB,UAAU,CAAC,WAAW,CAAC;EACrC;EAEA,aAAaC,QAAQ,GAA6B;IAAA,IAA3BC,GAAG,uEAAG,IAAI;IAAA,IAAEC,MAAM,uEAAG,IAAI;IAC9C,IAAI,CAACC,MAAM,CAACC,aAAa,CAACH,GAAG,CAAC,IAAIA,GAAG,GAAG,GAAG,IAAIA,GAAG,GAAG,CAAC,KAAK,CAAC,IAAM,UAAU,IAAII,OAAO,CAACC,QAAQ,IAAKL,GAAG,GAAG,GAAG,KAAK,CAAE,EAAE;MACrH,MAAM,IAAIM,SAAS,CAAC,oBAAoB,CAAC;IAC3C;IAEA,IAAIC,UAAU,EAAEC,SAAS;IAEzB,IAAIjC,kBAAkB,EAAE;MACtB,CAAC;QAAEgC,UAAU;QAAEC;MAAU,CAAC,GAAG,MAAM3C,eAAe,CAAC,KAAK,EAAE;QAAE4C,aAAa,EAAET;MAAI,CAAC,CAAC;MACjF,OAAOC,MAAM,GAAGM,UAAU,GAAGC,SAAS;IACxC;IAEA,CAAC;MAAED,UAAU;MAAEC;IAAU,CAAC,GAAG,MAAM3C,eAAe,CAAC,KAAK,EAAE;MACxD4C,aAAa,EAAET,GAAG;MAClBU,iBAAiB,EAAE;QAAEC,IAAI,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAM,CAAC;MAClDC,kBAAkB,EAAE;QAAEF,IAAI,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAM;IACrD,CAAC,CAAC;IAEF,IAAIX,MAAM,EAAE;MACV,OAAOxB,gBAAgB,CAAC8B,UAAU,CAAC;IACrC,CAAC,MAAM;MACL,OAAO/B,eAAe,CAACgC,SAAS,CAAC;IACnC;EACF;EAEA,OAAOM,YAAY,GAA6B;IAAA,IAA3Bd,GAAG,uEAAG,IAAI;IAAA,IAAEC,MAAM,uEAAG,IAAI;IAC5C,IAAI,CAACC,MAAM,CAACC,aAAa,CAACH,GAAG,CAAC,IAAIA,GAAG,GAAG,GAAG,IAAIA,GAAG,GAAG,CAAC,KAAK,CAAC,IAAM,UAAU,IAAII,OAAO,CAACC,QAAQ,IAAKL,GAAG,GAAG,GAAG,KAAK,CAAE,EAAE;MACrH,MAAM,IAAIM,SAAS,CAAC,oBAAoB,CAAC;IAC3C;IAEA,IAAIC,UAAU,EAAEC,SAAS;IAEzB,IAAIjC,kBAAkB,EAAE;MACtB,CAAC;QAAEgC,UAAU;QAAEC;MAAU,CAAC,GAAG5C,mBAAmB,CAAC,KAAK,EAAE;QAAE6C,aAAa,EAAET;MAAI,CAAC,CAAC;MAC/E,OAAOC,MAAM,GAAGM,UAAU,GAAGC,SAAS;IACxC;IAEA,CAAC;MAAED,UAAU;MAAEC;IAAU,CAAC,GAAG5C,mBAAmB,CAAC,KAAK,EAAE;MACtD6C,aAAa,EAAET,GAAG;MAClBU,iBAAiB,EAAE;QAAEC,IAAI,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAM,CAAC;MAClDC,kBAAkB,EAAE;QAAEF,IAAI,EAAE,OAAO;QAAEC,MAAM,EAAE;MAAM;IACrD,CAAC,CAAC;IAEF,IAAIX,MAAM,EAAE;MACV,OAAOxB,gBAAgB,CAAC8B,UAAU,CAAC;IACrC,CAAC,MAAM;MACL,OAAO/B,eAAe,CAACgC,SAAS,CAAC;IACnC;EACF;AACF;AAEAO,MAAM,CAACC,OAAO,GAAGhC,MAAM"},"metadata":{},"sourceType":"script"}