[{"/Users/justinas/Documents/repos/microgogool/client/src/Components/Authentication/Login.tsx":"1","/Users/justinas/Documents/repos/microgogool/client/src/Components/Authentication/Signup.tsx":"2","/Users/justinas/Documents/repos/microgogool/client/src/Components/Authentication/Authentication.tsx":"3","/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/MainPath.tsx":"4","/Users/justinas/Documents/repos/microgogool/client/src/Components/LoadingScreen.tsx":"5","/Users/justinas/Documents/repos/microgogool/client/src/App.tsx":"6","/Users/justinas/Documents/repos/microgogool/client/src/Components/MainSections/Footer.tsx":"7","/Users/justinas/Documents/repos/microgogool/client/src/Components/MainSections/Header.tsx":"8","/Users/justinas/Documents/repos/microgogool/client/src/Components/MainSections/Content.tsx":"9","/Users/justinas/Documents/repos/microgogool/client/src/index.tsx":"10","/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/SectionLessons.tsx":"11","/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/ShopTab.tsx":"12","/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/MistakesTab.tsx":"13","/Users/justinas/Documents/repos/microgogool/client/src/Components/ErrorComponent.tsx":"14","/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/LoadQuestions.tsx":"15","/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/LessonOverview.tsx":"16","/Users/justinas/Documents/repos/microgogool/client/src/UIDContext.ts":"17","/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/MainRightDailyStreak.tsx":"18","/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/MainRightScore.tsx":"19","/Users/justinas/Documents/repos/microgogool/client/src/Components/UserIconDisplay.tsx":"20","/Users/justinas/Documents/repos/microgogool/client/src/Components/HOC_Overlay.tsx":"21"},{"size":1784,"mtime":1667055711140,"results":"22","hashOfConfig":"23"},{"size":2275,"mtime":1667055722784,"results":"24","hashOfConfig":"23"},{"size":1242,"mtime":1666005625818,"results":"25","hashOfConfig":"23"},{"size":1962,"mtime":1666939305116,"results":"26","hashOfConfig":"23"},{"size":581,"mtime":1667459776892,"results":"27","hashOfConfig":"23"},{"size":1607,"mtime":1667485110858,"results":"28","hashOfConfig":"23"},{"size":470,"mtime":1666596947486,"results":"29","hashOfConfig":"23"},{"size":1235,"mtime":1667492568250,"results":"30","hashOfConfig":"23"},{"size":7302,"mtime":1667556824388,"results":"31","hashOfConfig":"23"},{"size":287,"mtime":1666006422078,"results":"32","hashOfConfig":"23"},{"size":2894,"mtime":1667056922177,"results":"33","hashOfConfig":"23"},{"size":1579,"mtime":1667556942958,"results":"34","hashOfConfig":"23"},{"size":5876,"mtime":1667549765529,"results":"35","hashOfConfig":"23"},{"size":285,"mtime":1666686067841,"results":"36","hashOfConfig":"23"},{"size":18146,"mtime":1667156714612,"results":"37","hashOfConfig":"23"},{"size":5755,"mtime":1667216115363,"results":"38","hashOfConfig":"23"},{"size":283,"mtime":1667283868930,"results":"39","hashOfConfig":"23"},{"size":1027,"mtime":1667647007828,"results":"40","hashOfConfig":"23"},{"size":2167,"mtime":1667549798816,"results":"41","hashOfConfig":"23"},{"size":876,"mtime":1667494323311,"results":"42","hashOfConfig":"23"},{"size":664,"mtime":1667492667708,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},"1n3nl90",{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"48"},{"filePath":"57","messages":"58","suppressedMessages":"59","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","suppressedMessages":"75","errorCount":0,"fatalErrorCount":0,"warningCount":24,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","suppressedMessages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","suppressedMessages":"88","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"89","messages":"90","suppressedMessages":"91","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","suppressedMessages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":42,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"48"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","suppressedMessages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/justinas/Documents/repos/microgogool/client/src/Components/Authentication/Login.tsx",["115","116"],[],"import React, { useContext, useEffect } from 'react';\nimport { useState } from 'react';\n\nimport UIDContext from 'src/UIDContext';\n\nfunction Login(props: any){\n    \n    const [authErrorMsg, setAuthErrorMsg] = useState('');\n\n    const { UID, setUID } = useContext(UIDContext);\n    function submitForm(e: React.FormEvent<HTMLFormElement>){\n        e.preventDefault();\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", 'http://localhost:8080/login', true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({\n            email: e.currentTarget.email.value,\n            password: e.currentTarget.password.value\n        }));\n\n        xhr.onload = ()=>{\n            const parsedResponse = JSON.parse(xhr.responseText);\n            if(parsedResponse.UID){\n                setUID(parsedResponse.UID);\n            } else {\n                setAuthErrorMsg(xhr.responseText);\n            }\n        }\n    }\n\n    return (\n        <div className='login-component'>\n        <form onSubmit={(e)=>{submitForm(e)}}>\n            <p>Log in with your credentials</p>\n            <div className='login-comoponent-inputHolder'>\n                <label htmlFor='email'>Email:</label>\n                <input id='email' name='email'></input>\n                <label htmlFor='password'>Password:</label>\n                <input id='password' name='password' type='password'></input>\n            </div>\n            <p className='auth-component-errorMsg'>{authErrorMsg.slice(1,authErrorMsg.length-1)}</p>\n            <button className='button'>Log in</button>\n            <button className='auth-goBack-btn' type='button' onClick={()=>{props.authState.setAuthButton('default')}}>Go back</button>\n        </form>\n    </div>\n    );\n}\n\nexport default Login;",[],"/Users/justinas/Documents/repos/microgogool/client/src/Components/Authentication/Signup.tsx",["117"],[],"import React, { useState, useContext } from 'react';\n\nimport UIDContext from 'src/UIDContext';\n\nfunction Signup(props: any) {\n\n    const [authErrorMsg, setAuthErrorMsg] = useState('');\n\n    const { UID, setUID } = useContext(UIDContext);\n\n    async function checkSubmit(e: React.FormEvent<HTMLFormElement>){\n        e.preventDefault();\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", 'http://localhost:8080/signup', true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({\n            email: e.currentTarget.email.value,\n            emailR: e.currentTarget.emailR.value,\n            password: e.currentTarget.password.value,\n            passwordR: e.currentTarget.passwordR.value\n        }));\n\n        xhr.onload = ()=>{\n            const parsedResponse = JSON.parse(xhr.responseText);\n            if(parsedResponse.UID){\n                setUID(parsedResponse.UID);\n            } else {\n                setAuthErrorMsg(parsedResponse);\n            }\n        }\n    }\n\n    return (\n        <div className='signup-component'>\n            <form onSubmit={(e)=>{checkSubmit(e)}}>\n                <p>Fill in the form</p>\n                <div className='signup-component-emailDiv'>\n                    <label htmlFor='email'>Email:</label>\n                    <input id='email' name='email'></input>\n                    <label htmlFor='emailR'>Repeat email:</label>\n                    <input id='emailR' name='emailR'></input>\n                </div>\n                <div className='signup-component-passwordDiv'>\n                    <label htmlFor='password' typeof='password'>Password:</label>\n                    <input id='password' name='password' type='password'></input>\n                    <label htmlFor='passwordR' typeof='password'>Repeat password:</label>\n                    <input id='passwordR' name='passwordR' type='password'></input>\n                </div>\n                <p className='auth-component-errorMsg'>{authErrorMsg}</p>\n                <button className='button'>Sign up</button>\n                <button className='auth-goBack-btn' type='button' onClick={()=>{props.authState.setAuthButton('default')}}>Go back</button>\n            </form>\n        </div>\n    );\n}\nexport default Signup;","/Users/justinas/Documents/repos/microgogool/client/src/Components/Authentication/Authentication.tsx",["118","119","120"],[],"import React, { useEffect, useState } from 'react';\n\nimport Login from './Login';\nimport Signup from './Signup';\n\ninterface props{\n    props: {setAuthenticated: React.Dispatch<React.SetStateAction<boolean>>}\n}\n\nfunction Authentication(props: props) {\n\n    const [authButton, setAuthButton] = useState('default');\n\n    return (\n        <div className='authentication'>\n            <div>\n                <p className='welcome-text'>Welcome to Microgoogol - a language learning platform!</p>\n                <div className='auth-inputs-holder'>\n                    {\n                    authButton==\"default\" ? \n                    \n                    <> <button onClick={()=>{setAuthButton('signup')}}>Sign up</button>\n                    <button onClick={()=>{setAuthButton('login')}}>Log in</button> </> \n                    :\n                    <> {\n                        authButton=='login' ?\n                        <Login authState={{setAuthButton}} setAuthenticated={props.props.setAuthenticated}/>\n                        :\n                        <Signup authState={{setAuthButton}}/>\n                    } </>\n                    }\n\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default Authentication;","/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/MainPath.tsx",["121","122"],[],"import React, { LegacyRef, useEffect, useState } from 'react';\n\ninterface allSectionsData{\n    secNum: number,\n    secDescr: string,\n    individualLessons: {\n        [key: string]: string\n    }\n}\ninterface props{\n    sectionLessons: {\n        sectionNum: number,\n        setSectionNum: React.Dispatch<React.SetStateAction<number>>\n    },\n    refs: {mainPathRef: LegacyRef<HTMLDivElement>}\n    allSectionsDataState:{\n    allSectionsData: any,\n    setAllSectionsData: React.Dispatch<React.SetStateAction<allSectionsData[]>>\n    }\n}\n\nfunction MainPath(props: props) {\n\n    const [allSectionsData, setAllSectionsData] = useState<allSectionsData[]>(props.allSectionsDataState.allSectionsData);\n\n    useEffect(()=>{\n        props.sectionLessons.setSectionNum(-1);\n    })\n\n\n    return (\n        <div className='main-path' ref={props.refs.mainPathRef}>\n            {allSectionsData.map((singleSection,index)=>{\n                return(\n                <div className={`section-${singleSection.secNum}`} key={`${index}`}>\n                    <div className='section-name-div'>\n                        <p>section {singleSection.secNum}: {singleSection.secDescr}</p>\n                        <button onClick={()=>{props.sectionLessons.setSectionNum(singleSection.secNum)}} data-testid={`startBtn${index}`}>Start</button>\n                    </div>\n                    <div className='sections-lesson'>\n                    {\n                        Object.entries(singleSection.individualLessons).map((singleLesson,lessonIndex)=>{\n                            if(typeof(singleLesson[1]) !== 'string')return;\n                            return(\n                                <button key={`${lessonIndex}-btn`}><p>Lesson {singleLesson[0].slice(6,7)}: {singleLesson[1]}</p></button>\n                            )\n                        })\n                    }\n                    </div>\n                </div>)\n            })}\n        </div>\n    );\n}\n\nexport default MainPath;","/Users/justinas/Documents/repos/microgogool/client/src/Components/LoadingScreen.tsx",[],[],"/Users/justinas/Documents/repos/microgogool/client/src/App.tsx",["123","124"],[],"/Users/justinas/Documents/repos/microgogool/client/src/Components/MainSections/Footer.tsx",[],[],"/Users/justinas/Documents/repos/microgogool/client/src/Components/MainSections/Header.tsx",["125","126"],[],"/Users/justinas/Documents/repos/microgogool/client/src/Components/MainSections/Content.tsx",["127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150"],[],"/Users/justinas/Documents/repos/microgogool/client/src/index.tsx",[],[],"/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/SectionLessons.tsx",["151","152","153","154","155"],[],"import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ErrorComponent from '../ErrorComponent';\nimport LoadQuestions from './LoadQuestions';\n\ninterface props{\n    sectionNum: number,\n    specificSectionsData: {\n        secNum: number, secDescr: string, individualLessons: {\n            correctAnswer?: string[],\n            possibleAnswers?: string[],\n            questionFormat?: string,\n            title?: string\n        }\n    }\n    goBack: {\n        loadCenterPathContent: React.Dispatch<React.SetStateAction<string>>\n    }\n    errorMessage:{\n        setErrorMessage: any\n    }\n}\n\nfunction SectionLessons(props: props) {\n\n\n    const lessonsDivRef = useRef<HTMLDivElement>(null);\n\n    const [arrayIndividualLessons, setArrayIndividualLessons] = useState<any>(Object.entries(props.specificSectionsData.individualLessons));\n\n    const [errorMessage, setErrorMessage] = useState<string>('');\n    const [errorHandling, startErrorHandling] = useState<boolean>(false);\n\n    useEffect(()=>{\n        setTimeout(() => {\n            if(lessonsDivRef.current!=null){\n                lessonsDivRef.current.classList.add('lessons-div');\n                setTimeout(() => {\n                    if(lessonsDivRef.current!=null){\n                        lessonsDivRef.current.classList.remove('lessons-div-fadeInAnim');\n                    }\n                }, 2000);\n            }   \n        }, 100);\n\n    },[]);\n\n    useEffect(()=>{\n        if(errorMessage!=''){\n            setTimeout(() => {\n                setErrorMessage('');\n                startErrorHandling(false);\n            }, 2000);\n        }\n    },[errorMessage])\n\n    function returnToMain(){\n        const mainPath = document.querySelector('.main-path') as HTMLElement;\n        lessonsDivRef.current?.classList.add('lessons-div-fadeOutAnim');\n        lessonsDivRef.current?.classList.remove('lessons-div');\n        setTimeout(() => {\n            props.goBack.loadCenterPathContent('mainPath');\n        }, 1000);\n    }\n    \n    return (\n        <React.Fragment>\n            <div className='lessons-div-fadeInAnim' ref={lessonsDivRef}>\n                {errorMessage!='' ? <ErrorComponent message={errorMessage} /> : null}\n                <div className='single-lesson'>\n                <LoadQuestions props={{arrayIndividualLessons}} sectionNumber={props.specificSectionsData.secNum} handleError={{setErrorMessage, startErrorHandling, errorHandling}} returnToMain={returnToMain}/>\n                    <div className='single-lesson-buttons'>\n                        <button className='lesson-answer-submit' onClick={()=>{startErrorHandling(true)}}>Submit the answers</button>\n                        <button className='lesson-go-back' onClick={()=>{returnToMain()}}>Go back</button>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n\n    );\n}\n\nexport default SectionLessons;","/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/ShopTab.tsx",[],[],"/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/MistakesTab.tsx",["156","157","158","159","160","161","162","163","164"],[],"/Users/justinas/Documents/repos/microgogool/client/src/Components/ErrorComponent.tsx",[],[],"/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/LoadQuestions.tsx",["165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206"],[],"import { type } from 'os';\nimport React, { useEffect, useRef, useState } from 'react';\nimport LessonOverview from '../ContentSecComponents/LessonOverview';\n\ninterface questionInfoObj{\n    correctAnswer: string[],\n    possibleAnswers: string[],\n    questionFormat: string,\n    title: string\n}\ninterface selectedAnswersArrInterface{\n    questionTitle: string,\n    answeredWord: string[],\n    questionObject: any\n}\nfunction LoadQuestions(props: any): React.ReactElement | null{\n\n    const [lessonOverview, setLessonOverview] = useState<object | null>(null);\n\n    const questionCounterRef: {current: number} = {\n        current: -1\n    };\n\n    let lessonNumber = 0;\n\n    const selectedAnswersArr = useRef<selectedAnswersArrInterface[]>([]);\n\n    useEffect(()=>{\n        if(props.handleError.errorHandling!=false){\n            checkAnswers();\n        }\n    },[props.handleError.errorHandling])\n\n    function MainCall(): React.ReactElement | undefined{\n    if(!props.props.arrayIndividualLessons[questionCounterRef.current]){\n        if(questionCounterRef.current>=props.props.arrayIndividualLessons.length)return;\n        else {\n            questionCounterRef.current++;\n            return MainCall();\n        }\n    } else {\n\n        // still elements left in the array\n        if(props.props.arrayIndividualLessons[questionCounterRef.current][1].title){\n            // the element (props.props.arrayIndividualLessons[questionsCounterRef.current][1]) is question element - its second array elements contains info about questions\n            lessonNumber = props.props.arrayIndividualLessons[questionCounterRef.current][0].slice(6,7);\n            if(props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectOne'){\n\n                return LoadQuestion_SelectOne(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n            }\n            if(props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectMultiple'){\n                return LoadQuestion_SelectMultiple(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n            }\n            if(props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='DragAndDrop'){\n                return loadQuestion_DragAndDrop(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n            }\n        } else {\n            questionCounterRef.current++;\n            return MainCall();\n        }\n    }\n    }\n\n    function LoadQuestion_SelectOne(questionInfoObj: questionInfoObj){\n        questionCounterRef.current++;\n        const answersSelectedSO = useRef<HTMLElement[]>([]);\n\n        const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n\n        function answer_SO_Selected(id: string, title: string){\n            // clicked element\n            const selectedElement = document.getElementById(id);\n\n            if(selectedElement==null){\n                return;\n            }\n            // if user clicks the same answer, remove if from selected answers array and remove its answered class\n            if(answersSelectedSO.current.includes(selectedElement)){\n                answersSelectedSO.current.map((element,index: number)=>{\n                    if(element==selectedElement){\n                        answersSelectedSO.current.splice(index,1);\n                        selectedElement.classList.remove('singlePossibleAnswer-selected');\n                    }\n                })\n                selectedAnswersArr.current.map((singleAnsweredQuestion: any,index: number)=>{\n                    if(title==singleAnsweredQuestion.questionTitle){\n                        const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n                        singleAnsweredQuestion.answeredWord.splice(wordIndex,1)\n                    }\n                })\n                return;\n            }\n            // else, push the new clicked value to the array and add the class of selected answer\n            answersSelectedSO.current.push(selectedElement);\n            selectedElement.classList.add('singlePossibleAnswer-selected');\n\n            // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n            if(answersSelectedSO.current.length>possibleAnswersNum){\n                const removedElement = answersSelectedSO.current.shift();\n                if(removedElement==null)return;\n                removedElement.classList.remove('singlePossibleAnswer-selected');\n            }\n            const clickedButtonInfo = {\n                questionTitle: title,\n                answeredWord: [answersSelectedSO.current[answersSelectedSO.current.length-1].id.split('-')[1]],\n                questionObject: questionInfoObj\n            }\n            if(selectedAnswersArr.current.length==0){\n                selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo];\n            } else{\n                for(let index = 0; index < selectedAnswersArr.current.length; index++){\n                    if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n                        if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                        } else {\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                            selectedAnswersArr.current[index].answeredWord.shift();\n                        }\n                        return;\n                    } else if(index==selectedAnswersArr.current.length-1){\n                        selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo]\n                    }\n                }\n\n            }\n\n        \n\n        }\n\n        questionCounterRef.current++;\n        return(\n            <React.Fragment>\n            <div className='question-SelectOne single-question'>\n                <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n                <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n                    return(\n                        <button className='single-question-possibleAnswers-singleAnswer' \n                        key={`${index}SO-${singleAnswer}`}\n                        id={`${index}SO-${singleAnswer}`}\n                        onClick={()=>{answer_SO_Selected(`${index}SO-${singleAnswer}`, questionInfoObj.title)}}\n                        >\n                        {singleAnswer}</button>\n                    )\n                })}</div>\n            </div>\n            {MainCall()}\n            </React.Fragment>\n\n        )\n\n    }\n\n    function LoadQuestion_SelectMultiple(questionInfoObj: questionInfoObj){\n        const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n        const answersSelectedSM = useRef<HTMLElement[]>([]);\n\n        questionCounterRef.current++;\n\n        function answer_SM_Selected(id: string, title: string){\n            // clicked element\n            const selectedElement = document.getElementById(id);\n\n            if(selectedElement==null){\n                return;\n            }\n            // if user clicks the same answer, remove it from selected answers array and remove its answered class\n            if(answersSelectedSM.current.includes(selectedElement)){\n                answersSelectedSM.current.map((element,index: number)=>{\n                    if(element==selectedElement){\n                        answersSelectedSM.current.splice(index,1);\n\n                        selectedElement.classList.remove('singlePossibleAnswer-selected');\n                    }\n                })\n                selectedAnswersArr.current.map((singleAnsweredQuestion: any)=>{\n                    if(title==singleAnsweredQuestion.questionTitle){\n                        const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n                        singleAnsweredQuestion.answeredWord.splice(wordIndex,1);\n                    }\n                })\n                return;\n            }\n            // else, push the new clicked value to the array and add the class of selected answer\n            answersSelectedSM.current.push(selectedElement);\n            selectedElement.classList.add('singlePossibleAnswer-selected');\n\n            // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n            if(answersSelectedSM.current.length>possibleAnswersNum){\n                const removedElement = answersSelectedSM.current.shift();\n                if(removedElement==null)return;\n                removedElement.classList.remove('singlePossibleAnswer-selected');\n            }\n            const clickedButtonInfo = {\n                questionTitle: title,\n                answeredWord: [answersSelectedSM.current[answersSelectedSM.current.length-1].id.split('-')[1]],\n                questionObject: questionInfoObj\n            }\n\n            if(selectedAnswersArr.current.length==0){\n                selectedAnswersArr.current.push(clickedButtonInfo);\n            } else{\n                for(let index = 0; index < selectedAnswersArr.current.length; index++){\n                    if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n                        if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                        } else {\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                            selectedAnswersArr.current[index].answeredWord.shift();\n                        }\n                        return;\n                    } else if(index==selectedAnswersArr.current.length-1){\n                        selectedAnswersArr.current.push(clickedButtonInfo);\n                        return;\n                    }\n                }\n            }\n        }\n\n        return(\n            <React.Fragment>\n                <div className='question-SelectMultiple single-question'>\n                    <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n                    <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n                        return(\n                            <button className='single-question-possibleAnswers-singleAnswer' \n                            key={`${index}SM-${singleAnswer}`}\n                            id={`${index}SM-${singleAnswer}`}\n                            onClick={()=>{answer_SM_Selected(`${index}SM-${singleAnswer}`, questionInfoObj.title)}}\n                            >\n                            {singleAnswer}</button>\n                        )\n                    })}</div>\n                </div>\n                {MainCall()}\n            </React.Fragment>\n\n        )\n    }\n\n    function loadQuestion_DragAndDrop(questionInfoObj: questionInfoObj){\n        questionCounterRef.current++;\n\n        function onDropFunc(e: any){\n            e.preventDefault();\n            const data = e.dataTransfer.getData(\"application/my-app\");\n            e.currentTarget.appendChild(document.getElementById(data));\n        }\n        function onDragOverFunc(e: any){\n            e.preventDefault();\n            e.dataTransfer.dropEffect = \"move\";\n        }\n        function ondragstartFunc(e: any){\n            \n            e.dataTransfer.setData(\"application/my-app\", e.target.id);\n            e.dataTransfer.effectAllowed = \"move\";\n        }\n\n        return(\n            <React.Fragment>\n                <div className='question-DragAndDrop single-question'>\n                    <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}</p>\n                    <div className='single-question-DragAndDrop-words' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}>{questionInfoObj.possibleAnswers.map((singleWord,index)=>{\n                        return(\n                            <button className='single-question-DragAndDrop-singleWord'\n                            key={`${index}DaD-${singleWord}`}\n                            id={`${index}DaD-${singleWord}`}\n                            onDragStart={(e)=>{ondragstartFunc(e)}}\n                            draggable='true'\n                            >\n                            {singleWord}\n                            </button>\n                        )\n                    })}</div>\n                    <div className='single-question-DragAndDrop-location' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}></div>\n                </div>\n                {MainCall()}\n            </React.Fragment>\n\n        )\n    }\n\n    function checkAnswers(){\n        const badAnswersArr: object[] = [];\n        const goodAnswersArr: object[] = [];\n\n        // firstly check DragAndDrop question if it exists\n        if(document.querySelector('.single-question-DragAndDrop-location')){\n            let DragAndDropAnswers: any;\n            let userDragAndDropAnswers: any = [];\n            let pointsForDnD: boolean = true;\n            document.querySelectorAll('.single-question-DragAndDrop-location .single-question-DragAndDrop-singleWord').forEach((element: any)=>{\n                userDragAndDropAnswers.push(element.innerText)\n            });\n            const questionObject: any = Object.entries(props.props.arrayIndividualLessons).filter((element: any)=>{\n                if(typeof element[1][1] != 'string')return element;\n            })\n            for(let i = 0; i < questionObject.length; i++){\n                if(questionObject[i][1][1].questionFormat=='DragAndDrop'){\n                    DragAndDropAnswers = questionObject[i][1];\n                    if(!userDragAndDropAnswers){\n\n                    } else if(userDragAndDropAnswers.length!=questionObject[i][1][1].correctAnswer.length){\n                        props.handleError.setErrorMessage('You must answer all of the questions.')\n                        return;\n                    } else {\n                        userDragAndDropAnswers.map((element: string,index: number)=>{\n                            if(userDragAndDropAnswers[index]!=questionObject[i][1][1].correctAnswer[index]){\n                                pointsForDnD=false;\n                            }\n                            if(index==userDragAndDropAnswers.length-1 && pointsForDnD!=false){\n                                pointsForDnD=true;\n                                goodAnswersArr.push(DragAndDropAnswers[1])\n                            } else if(index == userDragAndDropAnswers.length-1 && pointsForDnD==false){\n                                badAnswersArr.push(DragAndDropAnswers[1])\n                            }\n                        })\n                    }\n\n                }\n            }\n            // if(goodAnswersArr.includes()){\n            \n        }\n        // DnD - DragAndDrop\n        const non_DnD_Questions: any = Object.entries(props.props.arrayIndividualLessons).filter((element: any)=>{\n            if(typeof element[1][1] != 'string' && element[1][1].questionFormat!='DragAndDrop')return element;\n        })\n        if(selectedAnswersArr.current.length<non_DnD_Questions.length){\n            props.handleError.setErrorMessage('You must answer all of the questions.')\n            return;\n        }\n        for(let index = 0; index < selectedAnswersArr.current.length; index++){\n            if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n                props.handleError.setErrorMessage('You have skipped an answer inside a question.');\n                return;\n            } else {\n                if(index==selectedAnswersArr.current.length-1){\n\n                    // CALCULATE THE CORRECT ANSWERS HERE\n                    console.log('answers were selected. Calculating your score for this lesson...')\n                    selectedAnswersArr.current.map((element)=>{\n                        let isAnswerGood = true;\n                        element.answeredWord.map((x,index)=>{\n                            if(!element.questionObject.correctAnswer.includes(x)){\n                                isAnswerGood = false;\n                            }\n                            if(index==element.answeredWord.length-1){\n                                if(isAnswerGood==true){\n                                    goodAnswersArr.push(element)\n                                } else {\n                                    badAnswersArr.push(element);\n                                }\n                            }\n                        })\n                    })\n                    let percentageCorrect;\n                    if(goodAnswersArr.length!=0){\n                        percentageCorrect=(goodAnswersArr.length/(goodAnswersArr.length+badAnswersArr.length))*100;\n                    } else {\n                        percentageCorrect=0;\n                    }\n                    setLessonOverview({badAnswersArr, goodAnswersArr})\n\n                    return;\n                }\n            }\n        }\n\n    }\n    questionCounterRef.current++;\n    return(\n        <React.Fragment>\n        {MainCall()}\n        {lessonOverview ? <LessonOverview lessonData={{lessonOverview, setLessonOverview}} sectionNumber={props.sectionNumber} returnToMain={props.returnToMain}/> : null}\n        </React.Fragment>\n    )\n}\n\nexport default LoadQuestions;","/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/LessonOverview.tsx",["207","208","209","210","211","212","213","214"],[],"import React, { useContext, useEffect, useRef } from 'react';\nimport UIDContext from 'src/UIDContext';\nconst key = require('key-creator');\n\ninterface props{\n    lessonData: any,\n    returnToMain: any,\n    sectionNumber: number\n}\ninterface singleSelectBadAnswer{\n    questionTitle: string,\n    questionObject: {\n        correctAnswer: string[],\n        possibleAnswers: string[],\n        questionFormat: string,\n        title: string\n    },\n    answeredWord: string[]\n}\ninterface singleDnDBadAnswer{\n    correctAnswer: string[],\n    possibleAnswers: string[],\n    questionFormat: string,\n    title: string\n}\n\ninterface anyBadAnswer extends singleSelectBadAnswer, singleDnDBadAnswer {}\n\n\n\nfunction LessonOverview(props: props) {\n\n    const { UID, setUID } = useContext(UIDContext);\n\n    useEffect(()=>{\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", 'http://localhost:8080/saveFinishedLessonData', true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({\n            badAnswersArr: props.lessonData.lessonOverview.badAnswersArr,\n            goodAnswersArr: props.lessonData.lessonOverview.goodAnswersArr,\n            sectionNumber: props.sectionNumber,\n            UID: UID,\n        }));\n\n        // xhr.onload = ()=>{\n        //     const parsedResponse = JSON.parse(xhr.responseText);\n        // }\n    },[])\n\n    return (\n        <div className='lesson-overview'>\n            <div className='lesson-overview-results'>\n            <p className='lesson-overview-title'>These are your results</p>\n\n                <p className='percentage'>Percentage of answers gotten right: {props.lessonData.lessonOverview.goodAnswersArr.length / (props.lessonData.lessonOverview.goodAnswersArr.length + props.lessonData.lessonOverview.badAnswersArr.length) * 100}%</p>\n                <p className='wrongQ'>The question/s you have got wrong:</p>\n                {props.lessonData.lessonOverview.badAnswersArr.length==0 ? <p className='maxScore'>congratulations on the max score!</p> : null}\n                {props.lessonData.lessonOverview.badAnswersArr.map((badAnswer: anyBadAnswer, index: number)=>{\n                    if(badAnswer.hasOwnProperty('questionObject') && (badAnswer.questionObject.questionFormat == 'SelectOne' || badAnswer.questionObject.questionFormat == 'SelectMultiple')){\n                        // singleSelectBadAnswer type\n                        return(\n                            <div className='single-badAnswer' key={key.generate()}>\n                                <p className='badAnswer-title'>{badAnswer.questionTitle}</p>\n                                <div className='answers'>\n                                    <p className='wys'>What you selected:</p>\n                                    <div className='single-badAnswer-userAnsweredWords'>\n                                        {badAnswer.answeredWord.map((singleAnswer: string, i: number)=>{\n                                            return(\n                                                <p key={key.generate()}>{singleAnswer}</p>\n                                            )\n                                        })}\n                                    </div>\n                                    <p className='tca'>The correct answer/s:</p>\n                                    <div className='single-badAnswer-correctWords'>\n                                        {badAnswer.questionObject.correctAnswer.map((singleAnswer: string, i: number)=>{\n                                            return(\n                                                <p key={key.generate()}>{singleAnswer}</p>\n                                            )\n                                        })}\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    } else if(badAnswer.questionFormat=='DragAndDrop'){\n                        // singleDnDBadAnswer type\n                        return(\n                            <div className='single-badAnswer' key={parseFloat(badAnswer.title)}>\n                                <p className='badAnswer-title'>{badAnswer.title}</p>\n                                <div className='answers'>\n                                    <p className='wys'>Words given:</p>\n                                    <div className='single-badAnswer-userAnsweredWords'>\n                                        {badAnswer.possibleAnswers.map((singleAnswer: string, i: number)=>{\n                                            return(\n                                                <p key={key.generate()}>{singleAnswer}</p>\n                                            )\n                                        })}\n                                    </div>\n                                    <p className='tca'>Correct order:</p>\n                                    <div className='single-badAnswer-correctWords'>\n                                        {badAnswer.correctAnswer.map((singleAnswer: string, i: number)=>{\n                                            return(\n                                                <p key={key.generate()}>{singleAnswer}</p>\n                                            )\n                                        })}\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    }\n            \n                })}\n                <button className='lesson-overview-backBtn' onClick={()=>{props.lessonData.setLessonOverview(false);props.returnToMain()}}>Back to the main path</button>\n            </div>\n        </div>\n    );\n}\n\nexport default LessonOverview;","/Users/justinas/Documents/repos/microgogool/client/src/UIDContext.ts",[],[],"/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/MainRightDailyStreak.tsx",["215","216"],[],"/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/MainRightScore.tsx",["217","218","219","220","221"],[],"/Users/justinas/Documents/repos/microgogool/client/src/Components/UserIconDisplay.tsx",["222"],[],"/Users/justinas/Documents/repos/microgogool/client/src/Components/HOC_Overlay.tsx",["223"],[],{"ruleId":"224","severity":1,"message":"225","line":1,"column":29,"nodeType":"226","messageId":"227","endLine":1,"endColumn":38},{"ruleId":"224","severity":1,"message":"228","line":10,"column":13,"nodeType":"226","messageId":"227","endLine":10,"endColumn":16},{"ruleId":"224","severity":1,"message":"228","line":9,"column":13,"nodeType":"226","messageId":"227","endLine":9,"endColumn":16},{"ruleId":"224","severity":1,"message":"225","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":26},{"ruleId":"229","severity":1,"message":"230","line":20,"column":31,"nodeType":"231","messageId":"232","endLine":20,"endColumn":33},{"ruleId":"229","severity":1,"message":"230","line":26,"column":35,"nodeType":"231","messageId":"232","endLine":26,"endColumn":37},{"ruleId":"224","severity":1,"message":"233","line":24,"column":29,"nodeType":"226","messageId":"227","endLine":24,"endColumn":47},{"ruleId":"234","severity":1,"message":"235","line":43,"column":69,"nodeType":"236","messageId":"237","endLine":43,"endColumn":76},{"ruleId":"224","severity":1,"message":"238","line":5,"column":8,"nodeType":"226","messageId":"227","endLine":5,"endColumn":21},{"ruleId":"229","severity":1,"message":"239","line":30,"column":11,"nodeType":"231","messageId":"232","endLine":30,"endColumn":13},{"ruleId":"229","severity":1,"message":"230","line":22,"column":33,"nodeType":"231","messageId":"232","endLine":22,"endColumn":35},{"ruleId":"240","severity":1,"message":"241","line":22,"column":42,"nodeType":"242","messageId":"243","endLine":22,"endColumn":174},{"ruleId":"224","severity":1,"message":"244","line":27,"column":18,"nodeType":"226","messageId":"227","endLine":27,"endColumn":24},{"ruleId":"224","severity":1,"message":"245","line":39,"column":11,"nodeType":"226","messageId":"227","endLine":39,"endColumn":22},{"ruleId":"246","severity":1,"message":"247","line":50,"column":7,"nodeType":"248","endLine":50,"endColumn":9,"suggestions":"249"},{"ruleId":"229","severity":1,"message":"239","line":53,"column":22,"nodeType":"231","messageId":"232","endLine":53,"endColumn":24},{"ruleId":"234","severity":1,"message":"235","line":72,"column":52,"nodeType":"250","messageId":"251","endLine":72,"endColumn":54},{"ruleId":"229","severity":1,"message":"230","line":73,"column":46,"nodeType":"231","messageId":"232","endLine":73,"endColumn":48},{"ruleId":"246","severity":1,"message":"252","line":82,"column":7,"nodeType":"248","endLine":82,"endColumn":19,"suggestions":"253"},{"ruleId":"246","severity":1,"message":"254","line":93,"column":7,"nodeType":"248","endLine":93,"endColumn":9,"suggestions":"255"},{"ruleId":"229","severity":1,"message":"230","line":98,"column":29,"nodeType":"231","messageId":"232","endLine":98,"endColumn":31},{"ruleId":"229","severity":1,"message":"239","line":101,"column":29,"nodeType":"231","messageId":"232","endLine":101,"endColumn":31},{"ruleId":"229","severity":1,"message":"239","line":117,"column":31,"nodeType":"231","messageId":"232","endLine":117,"endColumn":33},{"ruleId":"229","severity":1,"message":"230","line":118,"column":35,"nodeType":"231","messageId":"232","endLine":118,"endColumn":37},{"ruleId":"229","severity":1,"message":"230","line":121,"column":35,"nodeType":"231","messageId":"232","endLine":121,"endColumn":37},{"ruleId":"229","severity":1,"message":"230","line":124,"column":35,"nodeType":"231","messageId":"232","endLine":124,"endColumn":37},{"ruleId":"229","severity":1,"message":"230","line":129,"column":32,"nodeType":"231","messageId":"232","endLine":129,"endColumn":34},{"ruleId":"229","severity":1,"message":"230","line":129,"column":68,"nodeType":"231","messageId":"232","endLine":129,"endColumn":70},{"ruleId":"229","severity":1,"message":"230","line":130,"column":31,"nodeType":"231","messageId":"232","endLine":130,"endColumn":33},{"ruleId":"229","severity":1,"message":"230","line":131,"column":31,"nodeType":"231","messageId":"232","endLine":131,"endColumn":33},{"ruleId":"229","severity":1,"message":"230","line":132,"column":31,"nodeType":"231","messageId":"232","endLine":132,"endColumn":33},{"ruleId":"229","severity":1,"message":"239","line":133,"column":31,"nodeType":"231","messageId":"232","endLine":133,"endColumn":33},{"ruleId":"229","severity":1,"message":"239","line":138,"column":31,"nodeType":"231","messageId":"232","endLine":138,"endColumn":33},{"ruleId":"229","severity":1,"message":"230","line":139,"column":31,"nodeType":"231","messageId":"232","endLine":139,"endColumn":33},{"ruleId":"229","severity":1,"message":"230","line":143,"column":31,"nodeType":"231","messageId":"232","endLine":143,"endColumn":33},{"ruleId":"229","severity":1,"message":"230","line":147,"column":31,"nodeType":"231","messageId":"232","endLine":147,"endColumn":33},{"ruleId":"224","severity":1,"message":"256","line":1,"column":17,"nodeType":"226","messageId":"227","endLine":1,"endColumn":28},{"ruleId":"224","severity":1,"message":"257","line":28,"column":36,"nodeType":"226","messageId":"227","endLine":28,"endColumn":61},{"ruleId":"229","severity":1,"message":"239","line":48,"column":24,"nodeType":"231","messageId":"232","endLine":48,"endColumn":26},{"ruleId":"224","severity":1,"message":"258","line":57,"column":15,"nodeType":"226","messageId":"227","endLine":57,"endColumn":23},{"ruleId":"229","severity":1,"message":"239","line":68,"column":30,"nodeType":"231","messageId":"232","endLine":68,"endColumn":32},{"ruleId":"224","severity":1,"message":"244","line":28,"column":18,"nodeType":"226","messageId":"227","endLine":28,"endColumn":24},{"ruleId":"246","severity":1,"message":"247","line":42,"column":7,"nodeType":"248","endLine":42,"endColumn":9,"suggestions":"259"},{"ruleId":"229","severity":1,"message":"230","line":45,"column":35,"nodeType":"231","messageId":"232","endLine":45,"endColumn":37},{"ruleId":"260","severity":1,"message":"261","line":50,"column":13,"nodeType":"242","endLine":50,"endColumn":76},{"ruleId":"229","severity":1,"message":"230","line":52,"column":24,"nodeType":"231","messageId":"232","endLine":52,"endColumn":26},{"ruleId":"234","severity":1,"message":"262","line":57,"column":93,"nodeType":"250","messageId":"263","endLine":57,"endColumn":95},{"ruleId":"229","severity":1,"message":"239","line":58,"column":69,"nodeType":"231","messageId":"232","endLine":58,"endColumn":71},{"ruleId":"234","severity":1,"message":"262","line":87,"column":93,"nodeType":"250","messageId":"263","endLine":87,"endColumn":95},{"ruleId":"229","severity":1,"message":"239","line":88,"column":72,"nodeType":"231","messageId":"232","endLine":88,"endColumn":74},{"ruleId":"224","severity":1,"message":"264","line":1,"column":10,"nodeType":"226","messageId":"227","endLine":1,"endColumn":14},{"ruleId":"229","severity":1,"message":"239","line":29,"column":43,"nodeType":"231","messageId":"232","endLine":29,"endColumn":45},{"ruleId":"246","severity":1,"message":"265","line":32,"column":7,"nodeType":"248","endLine":32,"endColumn":40,"suggestions":"266"},{"ruleId":"229","severity":1,"message":"230","line":47,"column":96,"nodeType":"231","messageId":"232","endLine":47,"endColumn":98},{"ruleId":"229","severity":1,"message":"230","line":51,"column":96,"nodeType":"231","messageId":"232","endLine":51,"endColumn":98},{"ruleId":"229","severity":1,"message":"230","line":54,"column":96,"nodeType":"231","messageId":"232","endLine":54,"endColumn":98},{"ruleId":"234","severity":1,"message":"235","line":79,"column":70,"nodeType":"250","messageId":"251","endLine":79,"endColumn":72},{"ruleId":"229","severity":1,"message":"230","line":80,"column":31,"nodeType":"231","messageId":"232","endLine":80,"endColumn":33},{"ruleId":"234","severity":1,"message":"235","line":85,"column":91,"nodeType":"250","messageId":"251","endLine":85,"endColumn":93},{"ruleId":"229","severity":1,"message":"230","line":86,"column":29,"nodeType":"231","messageId":"232","endLine":86,"endColumn":31},{"ruleId":"229","severity":1,"message":"230","line":108,"column":49,"nodeType":"231","messageId":"232","endLine":108,"endColumn":51},{"ruleId":"229","severity":1,"message":"230","line":112,"column":71,"nodeType":"231","messageId":"232","endLine":112,"endColumn":73},{"ruleId":"229","severity":1,"message":"239","line":113,"column":97,"nodeType":"231","messageId":"232","endLine":113,"endColumn":99},{"ruleId":"229","severity":1,"message":"230","line":120,"column":36,"nodeType":"231","messageId":"232","endLine":120,"endColumn":38},{"ruleId":"234","severity":1,"message":"235","line":169,"column":70,"nodeType":"250","messageId":"251","endLine":169,"endColumn":72},{"ruleId":"229","severity":1,"message":"230","line":170,"column":31,"nodeType":"231","messageId":"232","endLine":170,"endColumn":33},{"ruleId":"234","severity":1,"message":"235","line":176,"column":77,"nodeType":"250","messageId":"251","endLine":176,"endColumn":79},{"ruleId":"229","severity":1,"message":"230","line":177,"column":29,"nodeType":"231","messageId":"232","endLine":177,"endColumn":31},{"ruleId":"229","severity":1,"message":"230","line":200,"column":49,"nodeType":"231","messageId":"232","endLine":200,"endColumn":51},{"ruleId":"229","severity":1,"message":"230","line":204,"column":71,"nodeType":"231","messageId":"232","endLine":204,"endColumn":73},{"ruleId":"229","severity":1,"message":"239","line":205,"column":97,"nodeType":"231","messageId":"232","endLine":205,"endColumn":99},{"ruleId":"229","severity":1,"message":"230","line":212,"column":36,"nodeType":"231","messageId":"232","endLine":212,"endColumn":38},{"ruleId":"234","severity":1,"message":"267","line":295,"column":113,"nodeType":"250","messageId":"263","endLine":295,"endColumn":115},{"ruleId":"229","severity":1,"message":"230","line":299,"column":58,"nodeType":"231","messageId":"232","endLine":299,"endColumn":60},{"ruleId":"229","severity":1,"message":"239","line":303,"column":60,"nodeType":"231","messageId":"232","endLine":303,"endColumn":62},{"ruleId":"268","severity":1,"message":"269","line":307,"column":52,"nodeType":"250","messageId":"270","endLine":317,"endColumn":26},{"ruleId":"234","severity":1,"message":"235","line":307,"column":83,"nodeType":"250","messageId":"251","endLine":307,"endColumn":85},{"ruleId":"229","severity":1,"message":"239","line":308,"column":61,"nodeType":"231","messageId":"232","endLine":308,"endColumn":63},{"ruleId":"229","severity":1,"message":"230","line":311,"column":37,"nodeType":"231","messageId":"232","endLine":311,"endColumn":39},{"ruleId":"229","severity":1,"message":"239","line":311,"column":86,"nodeType":"231","messageId":"232","endLine":311,"endColumn":88},{"ruleId":"229","severity":1,"message":"230","line":314,"column":45,"nodeType":"231","messageId":"232","endLine":314,"endColumn":47},{"ruleId":"229","severity":1,"message":"230","line":314,"column":95,"nodeType":"231","messageId":"232","endLine":314,"endColumn":97},{"ruleId":"234","severity":1,"message":"267","line":326,"column":112,"nodeType":"250","messageId":"263","endLine":326,"endColumn":114},{"ruleId":"229","severity":1,"message":"239","line":327,"column":80,"nodeType":"231","messageId":"232","endLine":327,"endColumn":82},{"ruleId":"229","severity":1,"message":"239","line":334,"column":85,"nodeType":"231","messageId":"232","endLine":334,"endColumn":87},{"ruleId":"229","severity":1,"message":"230","line":338,"column":25,"nodeType":"231","messageId":"232","endLine":338,"endColumn":27},{"ruleId":"234","severity":1,"message":"235","line":342,"column":61,"nodeType":"250","messageId":"251","endLine":342,"endColumn":63},{"ruleId":"234","severity":1,"message":"235","line":344,"column":59,"nodeType":"250","messageId":"251","endLine":344,"endColumn":61},{"ruleId":"229","severity":1,"message":"230","line":348,"column":37,"nodeType":"231","messageId":"232","endLine":348,"endColumn":39},{"ruleId":"229","severity":1,"message":"230","line":349,"column":48,"nodeType":"231","messageId":"232","endLine":349,"endColumn":50},{"ruleId":"229","severity":1,"message":"239","line":358,"column":45,"nodeType":"231","messageId":"232","endLine":358,"endColumn":47},{"ruleId":"224","severity":1,"message":"271","line":361,"column":25,"nodeType":"226","messageId":"227","endLine":361,"endColumn":42},{"ruleId":"224","severity":1,"message":"272","line":1,"column":40,"nodeType":"226","messageId":"227","endLine":1,"endColumn":46},{"ruleId":"224","severity":1,"message":"244","line":33,"column":18,"nodeType":"226","messageId":"227","endLine":33,"endColumn":24},{"ruleId":"246","severity":1,"message":"273","line":49,"column":7,"nodeType":"248","endLine":49,"endColumn":9,"suggestions":"274"},{"ruleId":"229","severity":1,"message":"230","line":58,"column":70,"nodeType":"231","messageId":"232","endLine":58,"endColumn":72},{"ruleId":"234","severity":1,"message":"262","line":59,"column":108,"nodeType":"250","messageId":"263","endLine":59,"endColumn":110},{"ruleId":"229","severity":1,"message":"230","line":60,"column":111,"nodeType":"231","messageId":"232","endLine":60,"endColumn":113},{"ruleId":"229","severity":1,"message":"230","line":60,"column":169,"nodeType":"231","messageId":"232","endLine":60,"endColumn":171},{"ruleId":"229","severity":1,"message":"230","line":85,"column":55,"nodeType":"231","messageId":"232","endLine":85,"endColumn":57},{"ruleId":"224","severity":1,"message":"244","line":4,"column":18,"nodeType":"226","messageId":"227","endLine":4,"endColumn":24},{"ruleId":"246","severity":1,"message":"247","line":20,"column":7,"nodeType":"248","endLine":20,"endColumn":9,"suggestions":"275"},{"ruleId":"224","severity":1,"message":"244","line":11,"column":18,"nodeType":"226","messageId":"227","endLine":11,"endColumn":24},{"ruleId":"229","severity":1,"message":"239","line":25,"column":37,"nodeType":"231","messageId":"232","endLine":25,"endColumn":39},{"ruleId":"246","severity":1,"message":"247","line":34,"column":7,"nodeType":"248","endLine":34,"endColumn":9,"suggestions":"276"},{"ruleId":"229","severity":1,"message":"239","line":38,"column":25,"nodeType":"231","messageId":"232","endLine":38,"endColumn":27},{"ruleId":"229","severity":1,"message":"239","line":41,"column":32,"nodeType":"231","messageId":"232","endLine":41,"endColumn":34},{"ruleId":"224","severity":1,"message":"244","line":15,"column":18,"nodeType":"226","messageId":"227","endLine":15,"endColumn":24},{"ruleId":"229","severity":1,"message":"230","line":13,"column":34,"nodeType":"231","messageId":"232","endLine":13,"endColumn":36},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'UID' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'setAllSectionsData' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ReturnStatement","expectedReturnValue","'LoadingScreen' is defined but never used.","Expected '!==' and instead saw '!='.","react/jsx-pascal-case","Imported JSX component UserIconDisplay_WithOverlay must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","usePascalOrSnakeCase","'setUID' is assigned a value but never used.","'dailyStreak' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'UID'. Either include it or remove the dependency array.","ArrayExpression",["277"],"ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'allSectionsData' and 'loadCenterPathContent'. Either include them or remove the dependency array.",["278"],"React Hook useEffect has a missing dependency: 'loadCenterPathContent'. Either include it or remove the dependency array.",["279"],"'useCallback' is defined but never used.","'setArrayIndividualLessons' is assigned a value but never used.","'mainPath' is assigned a value but never used.",["280"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'type' is defined but never used.","React Hook useEffect has a missing dependency: 'checkAnswers'. Either include it or remove the dependency array.",["281"],"Array.prototype.filter() expects a value to be returned at the end of arrow function.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'pointsForDnD', 'pointsForDnD', 'pointsForDnD', 'DragAndDropAnswers', 'pointsForDnD', 'DragAndDropAnswers'.","unsafeRefs","'percentageCorrect' is assigned a value but never used.","'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'UID', 'props.lessonData.lessonOverview.badAnswersArr', 'props.lessonData.lessonOverview.goodAnswersArr', and 'props.sectionNumber'. Either include them or remove the dependency array.",["282"],["283"],["284"],{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"285","fix":"291"},{"desc":"292","fix":"293"},{"desc":"294","fix":"295"},{"desc":"285","fix":"296"},{"desc":"285","fix":"297"},"Update the dependencies array to be: [UID]",{"range":"298","text":"299"},"Update the dependencies array to be: [allSectionsData, loadCenterPathContent, sectionNum]",{"range":"300","text":"301"},"Update the dependencies array to be: [loadCenterPathContent]",{"range":"302","text":"303"},{"range":"304","text":"299"},"Update the dependencies array to be: [checkAnswers, props.handleError.errorHandling]",{"range":"305","text":"306"},"Update the dependencies array to be: [UID, props.lessonData.lessonOverview.badAnswersArr, props.lessonData.lessonOverview.goodAnswersArr, props.sectionNumber]",{"range":"307","text":"308"},{"range":"309","text":"299"},{"range":"310","text":"299"},[2094,2096],"[UID]",[3191,3203],"[allSectionsData, loadCenterPathContent, sectionNum]",[3504,3506],"[loadCenterPathContent]",[1216,1218],[854,887],"[checkAnswers, props.handleError.errorHandling]",[1372,1374],"[UID, props.lessonData.lessonOverview.badAnswersArr, props.lessonData.lessonOverview.goodAnswersArr, props.sectionNumber]",[674,676],[1196,1198]]