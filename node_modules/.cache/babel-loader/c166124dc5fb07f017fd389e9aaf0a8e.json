{"ast":null,"code":"/*! firebase-admin v11.1.0 */\n\"use strict\";\n\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getFirestoreOptions = exports.FirestoreService = void 0;\nconst error_1 = require(\"../utils/error\");\nconst credential_internal_1 = require(\"../app/credential-internal\");\nconst validator = require(\"../utils/validator\");\nconst utils = require(\"../utils/index\");\nclass FirestoreService {\n  constructor(app) {\n    this.firestoreClient = initFirestore(app);\n    this.appInternal = app;\n  }\n  /**\n   * Returns the app associated with this Storage instance.\n   *\n   * @returns The app associated with this Storage instance.\n   */\n  get app() {\n    return this.appInternal;\n  }\n  get client() {\n    return this.firestoreClient;\n  }\n}\nexports.FirestoreService = FirestoreService;\nfunction getFirestoreOptions(app) {\n  if (!validator.isNonNullObject(app) || !('options' in app)) {\n    throw new error_1.FirebaseFirestoreError({\n      code: 'invalid-argument',\n      message: 'First argument passed to admin.firestore() must be a valid Firebase app instance.'\n    });\n  }\n  const projectId = utils.getExplicitProjectId(app);\n  const credential = app.options.credential;\n  // eslint-disable-next-line @typescript-eslint/no-var-requires\n  const {\n    version: firebaseVersion\n  } = require('../../package.json');\n  if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n    return {\n      credentials: {\n        private_key: credential.privateKey,\n        client_email: credential.clientEmail\n      },\n      // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n      // guaranteed to be available.\n      projectId: projectId,\n      firebaseVersion\n    };\n  } else if ((0, credential_internal_1.isApplicationDefault)(app.options.credential)) {\n    // Try to use the Google application default credentials.\n    // If an explicit project ID is not available, let Firestore client discover one from the\n    // environment. This prevents the users from having to set GOOGLE_CLOUD_PROJECT in GCP runtimes.\n    return validator.isNonEmptyString(projectId) ? {\n      projectId,\n      firebaseVersion\n    } : {\n      firebaseVersion\n    };\n  }\n  throw new error_1.FirebaseFirestoreError({\n    code: 'invalid-credential',\n    message: 'Failed to initialize Google Cloud Firestore client with the available credentials. ' + 'Must initialize the SDK with a certificate credential or application default credentials ' + 'to use Cloud Firestore API.'\n  });\n}\nexports.getFirestoreOptions = getFirestoreOptions;\nfunction initFirestore(app) {\n  const options = getFirestoreOptions(app);\n  let firestoreDatabase;\n  try {\n    // Lazy-load the Firestore implementation here, which in turns loads gRPC.\n    firestoreDatabase = require('@google-cloud/firestore').Firestore;\n  } catch (err) {\n    throw new error_1.FirebaseFirestoreError({\n      code: 'missing-dependencies',\n      message: 'Failed to import the Cloud Firestore client library for Node.js. ' + 'Make sure to install the \"@google-cloud/firestore\" npm package. ' + `Original error: ${err}`\n    });\n  }\n  return new firestoreDatabase(options);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getFirestoreOptions","FirestoreService","error_1","require","credential_internal_1","validator","utils","constructor","app","firestoreClient","initFirestore","appInternal","client","isNonNullObject","FirebaseFirestoreError","code","message","projectId","getExplicitProjectId","credential","options","version","firebaseVersion","ServiceAccountCredential","credentials","private_key","privateKey","client_email","clientEmail","isApplicationDefault","isNonEmptyString","firestoreDatabase","Firestore","err"],"sources":["/Users/justinas/Documents/repos/microgogool/client/node_modules/firebase-admin/lib/firestore/firestore-internal.js"],"sourcesContent":["/*! firebase-admin v11.1.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getFirestoreOptions = exports.FirestoreService = void 0;\nconst error_1 = require(\"../utils/error\");\nconst credential_internal_1 = require(\"../app/credential-internal\");\nconst validator = require(\"../utils/validator\");\nconst utils = require(\"../utils/index\");\nclass FirestoreService {\n    constructor(app) {\n        this.firestoreClient = initFirestore(app);\n        this.appInternal = app;\n    }\n    /**\n     * Returns the app associated with this Storage instance.\n     *\n     * @returns The app associated with this Storage instance.\n     */\n    get app() {\n        return this.appInternal;\n    }\n    get client() {\n        return this.firestoreClient;\n    }\n}\nexports.FirestoreService = FirestoreService;\nfunction getFirestoreOptions(app) {\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n        throw new error_1.FirebaseFirestoreError({\n            code: 'invalid-argument',\n            message: 'First argument passed to admin.firestore() must be a valid Firebase app instance.',\n        });\n    }\n    const projectId = utils.getExplicitProjectId(app);\n    const credential = app.options.credential;\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const { version: firebaseVersion } = require('../../package.json');\n    if (credential instanceof credential_internal_1.ServiceAccountCredential) {\n        return {\n            credentials: {\n                private_key: credential.privateKey,\n                client_email: credential.clientEmail,\n            },\n            // When the SDK is initialized with ServiceAccountCredentials an explicit projectId is\n            // guaranteed to be available.\n            projectId: projectId,\n            firebaseVersion,\n        };\n    }\n    else if ((0, credential_internal_1.isApplicationDefault)(app.options.credential)) {\n        // Try to use the Google application default credentials.\n        // If an explicit project ID is not available, let Firestore client discover one from the\n        // environment. This prevents the users from having to set GOOGLE_CLOUD_PROJECT in GCP runtimes.\n        return validator.isNonEmptyString(projectId) ? { projectId, firebaseVersion } : { firebaseVersion };\n    }\n    throw new error_1.FirebaseFirestoreError({\n        code: 'invalid-credential',\n        message: 'Failed to initialize Google Cloud Firestore client with the available credentials. ' +\n            'Must initialize the SDK with a certificate credential or application default credentials ' +\n            'to use Cloud Firestore API.',\n    });\n}\nexports.getFirestoreOptions = getFirestoreOptions;\nfunction initFirestore(app) {\n    const options = getFirestoreOptions(app);\n    let firestoreDatabase;\n    try {\n        // Lazy-load the Firestore implementation here, which in turns loads gRPC.\n        firestoreDatabase = require('@google-cloud/firestore').Firestore;\n    }\n    catch (err) {\n        throw new error_1.FirebaseFirestoreError({\n            code: 'missing-dependencies',\n            message: 'Failed to import the Cloud Firestore client library for Node.js. '\n                + 'Make sure to install the \"@google-cloud/firestore\" npm package. '\n                + `Original error: ${err}`,\n        });\n    }\n    return new firestoreDatabase(options);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}