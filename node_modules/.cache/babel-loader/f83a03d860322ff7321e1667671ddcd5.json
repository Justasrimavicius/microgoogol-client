{"ast":null,"code":"var _jsxFileName = \"/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/SectionLessons.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SectionLessons(props) {\n  _s();\n  const mainCompRef = useRef(null);\n  const [arrayIndividualLessons, setArrayIndividualLessons] = useState(Object.entries(props.specificSectionsData.individualLessons));\n  useEffect(() => {\n    setTimeout(() => {\n      if (mainCompRef.current != null) {\n        mainCompRef.current.classList.add('lessons-div');\n        setTimeout(() => {\n          if (mainCompRef.current != null) {\n            mainCompRef.current.classList.remove('lessons-div-fadeInAnim');\n          }\n        }, 2000);\n      }\n    }, 100);\n  }, []);\n  const questionCounterRef = useRef(0);\n  function loadQuestions(arrayIndividualLessons) {\n    if (!arrayIndividualLessons[questionCounterRef.current]) {\n      console.log('empty lessons');\n      return null;\n      // no more lessons in the array left\n    } else {\n      // still elements left in the array\n      if (arrayIndividualLessons[questionCounterRef.current][1].title) {\n        // the element (arrayIndividualLessons[questionsCounterRef.current][1]) is question element - its second array elements contains info about questions\n        console.log('this array contains information about the question');\n        console.log(arrayIndividualLessons[questionCounterRef.current][1]);\n        if (arrayIndividualLessons[questionCounterRef.current][1].questionFormat == 'SelectOne') {\n          return loadQuestion_SelectOne(arrayIndividualLessons[questionCounterRef.current][1]);\n        }\n        if (arrayIndividualLessons[questionCounterRef.current][1].questionFormat == 'SelectMultiple') {\n          return loadQuestion_SelectMultiple(arrayIndividualLessons[questionCounterRef.current][1]);\n        }\n        if (arrayIndividualLessons[questionCounterRef.current][1].questionFormat == 'DragAndDrop') {\n          return loadQuestion_DragAndDrop(arrayIndividualLessons[questionCounterRef.current][1]);\n        }\n      } else {\n        // the elements [1] element is the title of the question(question number is in [0])\n        console.log('this array contains the title of the question');\n        console.log(arrayIndividualLessons[questionCounterRef.current][1]);\n        console.log(arrayIndividualLessons[questionCounterRef.current][0]);\n      }\n    }\n    questionCounterRef.current++;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: loadQuestions(arrayIndividualLessons)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this);\n  }\n  function loadQuestion_SelectOne(questionInfoObj) {\n    questionCounterRef.current++;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-SelectOne single-question\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"single-question-title\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 13\n      }, this), loadQuestions(arrayIndividualLessons)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }, this);\n  }\n  function loadQuestion_SelectMultiple(questionInfoObj) {\n    questionCounterRef.current++;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-SelectMultiple single-question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), loadQuestions(arrayIndividualLessons)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this);\n  }\n  function loadQuestion_DragAndDrop(questionInfoObj) {\n    questionCounterRef.current++;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-DragAndDrop single-question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), loadQuestions(arrayIndividualLessons)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lessons-div-fadeInAnim\",\n    ref: mainCompRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"single-lesson\",\n      children: loadQuestions(arrayIndividualLessons)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 127,\n    columnNumber: 9\n  }, this);\n}\n_s(SectionLessons, \"vZaLk5HYCcQFMLxZK0rWdwDOYbE=\");\n_c = SectionLessons;\nexport default SectionLessons;\nvar _c;\n$RefreshReg$(_c, \"SectionLessons\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SectionLessons","props","mainCompRef","arrayIndividualLessons","setArrayIndividualLessons","Object","entries","specificSectionsData","individualLessons","setTimeout","current","classList","add","remove","questionCounterRef","loadQuestions","console","log","title","questionFormat","loadQuestion_SelectOne","loadQuestion_SelectMultiple","loadQuestion_DragAndDrop","questionInfoObj"],"sources":["/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/SectionLessons.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\ninterface props{\n    sectionNum: number,\n    specificSectionsData: {\n        secNum: number, secDescr: string, individualLessons: {\n            correctAnswer?: string[],\n            possibleAnswers?: string[],\n            questionFormat?: string,\n            title?: string\n        }\n    }\n}\n\nfunction SectionLessons(props: props) {\n\n    const mainCompRef = useRef<HTMLDivElement>(null);\n\n    const [arrayIndividualLessons, setArrayIndividualLessons] = useState<any>(Object.entries(props.specificSectionsData.individualLessons));\n\n    useEffect(()=>{\n        setTimeout(() => {\n            if(mainCompRef.current!=null){\n                mainCompRef.current.classList.add('lessons-div');\n                setTimeout(() => {\n                    if(mainCompRef.current!=null){\n                        mainCompRef.current.classList.remove('lessons-div-fadeInAnim');\n                    }\n                }, 2000);\n            }   \n        }, 100);\n    },[]);\n\n    const questionCounterRef = useRef<number>(0);\n    function loadQuestions(arrayIndividualLessons: any): React.ReactElement | null{\n\n        if(!arrayIndividualLessons[questionCounterRef.current]){\n            console.log('empty lessons')\n            return null;\n            // no more lessons in the array left\n        } else {\n            // still elements left in the array\n            if(arrayIndividualLessons[questionCounterRef.current][1].title){\n                // the element (arrayIndividualLessons[questionsCounterRef.current][1]) is question element - its second array elements contains info about questions\n                console.log('this array contains information about the question')\n                console.log(arrayIndividualLessons[questionCounterRef.current][1])\n\n                if(arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectOne'){\n                    return loadQuestion_SelectOne(arrayIndividualLessons[questionCounterRef.current][1]);\n                }\n                if(arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectMultiple'){\n                    return loadQuestion_SelectMultiple(arrayIndividualLessons[questionCounterRef.current][1]);\n                }\n                if(arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='DragAndDrop'){\n                    return loadQuestion_DragAndDrop(arrayIndividualLessons[questionCounterRef.current][1]);\n                }\n\n\n                \n            } else {\n                // the elements [1] element is the title of the question(question number is in [0])\n                console.log('this array contains the title of the question');\n                console.log(arrayIndividualLessons[questionCounterRef.current][1])\n                console.log(arrayIndividualLessons[questionCounterRef.current][0])\n\n            }\n        }\n\n\n\n\n\n        questionCounterRef.current++;\n        return(\n            <React.Fragment>\n            {loadQuestions(arrayIndividualLessons)}\n            </React.Fragment>\n        )\n    }\n\n    function loadQuestion_SelectOne(questionInfoObj: any){\n\n        questionCounterRef.current++;\n        return(\n            <React.Fragment>\n            <div className='question-SelectOne single-question'>\n                <p className='single-question-title'></p>\n            </div>\n            {loadQuestions(arrayIndividualLessons)}\n            </React.Fragment>\n\n        )\n\n    }\n    function loadQuestion_SelectMultiple(questionInfoObj: any){\n\n        questionCounterRef.current++;\n\n        return(\n            <React.Fragment>\n                <div className='question-SelectMultiple single-question'>\n\n                </div>\n                {loadQuestions(arrayIndividualLessons)}\n            </React.Fragment>\n\n        )\n    }\n    function loadQuestion_DragAndDrop(questionInfoObj: any){\n        questionCounterRef.current++;\n\n        return(\n            <React.Fragment>\n                <div className='question-DragAndDrop single-question'>\n\n                </div>\n                {loadQuestions(arrayIndividualLessons)}\n            </React.Fragment>\n\n        )\n    }\n\n\n\n\n    return (\n        <div className='lessons-div-fadeInAnim' ref={mainCompRef}>\n            <div className='single-lesson'>\n                {loadQuestions(arrayIndividualLessons)}\n            </div>\n        </div>\n    );\n}\n\nexport default SectionLessons;"],"mappings":"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"},"metadata":{},"sourceType":"module"}