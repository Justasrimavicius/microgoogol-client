{"ast":null,"code":"const {\n  createSign,\n  createVerify\n} = require('crypto');\nconst {\n  KEYOBJECT\n} = require('../help/consts');\nconst resolveNodeAlg = require('../help/node_alg');\nconst {\n  asInput\n} = require('../help/key_object');\nconst sign = (nodeAlg, _ref, payload) => {\n  let {\n    [KEYOBJECT]: keyObject\n  } = _ref;\n  return createSign(nodeAlg).update(payload).sign(asInput(keyObject, false));\n};\nconst verify = (nodeAlg, _ref2, payload, signature) => {\n  let {\n    [KEYOBJECT]: keyObject\n  } = _ref2;\n  return createVerify(nodeAlg).update(payload).verify(asInput(keyObject, true), signature);\n};\nconst LENGTHS = {\n  RS256: 0,\n  RS384: 624,\n  RS512: 752\n};\nmodule.exports = (JWA, JWK) => {\n  ['RS256', 'RS384', 'RS512'].forEach(jwaAlg => {\n    const nodeAlg = resolveNodeAlg(jwaAlg);\n    JWA.sign.set(jwaAlg, sign.bind(undefined, nodeAlg));\n    JWA.verify.set(jwaAlg, verify.bind(undefined, nodeAlg));\n    JWK.RSA.sign[jwaAlg] = key => key.private && JWK.RSA.verify[jwaAlg](key);\n    JWK.RSA.verify[jwaAlg] = key => (key.use === 'sig' || key.use === undefined) && key.length >= LENGTHS[jwaAlg];\n  });\n};","map":{"version":3,"names":["createSign","createVerify","require","KEYOBJECT","resolveNodeAlg","asInput","sign","nodeAlg","payload","keyObject","update","verify","signature","LENGTHS","RS256","RS384","RS512","module","exports","JWA","JWK","forEach","jwaAlg","set","bind","undefined","RSA","key","private","use","length"],"sources":["/Users/justinas/Documents/repos/microgogool/client/node_modules/jose/lib/jwa/rsassa.js"],"sourcesContent":["const { createSign, createVerify } = require('crypto')\n\nconst { KEYOBJECT } = require('../help/consts')\nconst resolveNodeAlg = require('../help/node_alg')\nconst { asInput } = require('../help/key_object')\n\nconst sign = (nodeAlg, { [KEYOBJECT]: keyObject }, payload) => {\n  return createSign(nodeAlg).update(payload).sign(asInput(keyObject, false))\n}\n\nconst verify = (nodeAlg, { [KEYOBJECT]: keyObject }, payload, signature) => {\n  return createVerify(nodeAlg).update(payload).verify(asInput(keyObject, true), signature)\n}\n\nconst LENGTHS = {\n  RS256: 0,\n  RS384: 624,\n  RS512: 752\n}\n\nmodule.exports = (JWA, JWK) => {\n  ['RS256', 'RS384', 'RS512'].forEach((jwaAlg) => {\n    const nodeAlg = resolveNodeAlg(jwaAlg)\n    JWA.sign.set(jwaAlg, sign.bind(undefined, nodeAlg))\n    JWA.verify.set(jwaAlg, verify.bind(undefined, nodeAlg))\n    JWK.RSA.sign[jwaAlg] = key => key.private && JWK.RSA.verify[jwaAlg](key)\n    JWK.RSA.verify[jwaAlg] = key => (key.use === 'sig' || key.use === undefined) && key.length >= LENGTHS[jwaAlg]\n  })\n}\n"],"mappings":"AAAA,MAAM;EAAEA,UAAU;EAAEC;AAAa,CAAC,GAAGC,OAAO,CAAC,QAAQ,CAAC;AAEtD,MAAM;EAAEC;AAAU,CAAC,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AAC/C,MAAME,cAAc,GAAGF,OAAO,CAAC,kBAAkB,CAAC;AAClD,MAAM;EAAEG;AAAQ,CAAC,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AAEjD,MAAMI,IAAI,GAAG,CAACC,OAAO,QAA8BC,OAAO,KAAK;EAAA,IAAxC;IAAE,CAACL,SAAS,GAAGM;EAAU,CAAC;EAC/C,OAAOT,UAAU,CAACO,OAAO,CAAC,CAACG,MAAM,CAACF,OAAO,CAAC,CAACF,IAAI,CAACD,OAAO,CAACI,SAAS,EAAE,KAAK,CAAC,CAAC;AAC5E,CAAC;AAED,MAAME,MAAM,GAAG,CAACJ,OAAO,SAA8BC,OAAO,EAAEI,SAAS,KAAK;EAAA,IAAnD;IAAE,CAACT,SAAS,GAAGM;EAAU,CAAC;EACjD,OAAOR,YAAY,CAACM,OAAO,CAAC,CAACG,MAAM,CAACF,OAAO,CAAC,CAACG,MAAM,CAACN,OAAO,CAACI,SAAS,EAAE,IAAI,CAAC,EAAEG,SAAS,CAAC;AAC1F,CAAC;AAED,MAAMC,OAAO,GAAG;EACdC,KAAK,EAAE,CAAC;EACRC,KAAK,EAAE,GAAG;EACVC,KAAK,EAAE;AACT,CAAC;AAEDC,MAAM,CAACC,OAAO,GAAG,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC7B,CAAC,OAAO,EAAE,OAAO,EAAE,OAAO,CAAC,CAACC,OAAO,CAAEC,MAAM,IAAK;IAC9C,MAAMf,OAAO,GAAGH,cAAc,CAACkB,MAAM,CAAC;IACtCH,GAAG,CAACb,IAAI,CAACiB,GAAG,CAACD,MAAM,EAAEhB,IAAI,CAACkB,IAAI,CAACC,SAAS,EAAElB,OAAO,CAAC,CAAC;IACnDY,GAAG,CAACR,MAAM,CAACY,GAAG,CAACD,MAAM,EAAEX,MAAM,CAACa,IAAI,CAACC,SAAS,EAAElB,OAAO,CAAC,CAAC;IACvDa,GAAG,CAACM,GAAG,CAACpB,IAAI,CAACgB,MAAM,CAAC,GAAGK,GAAG,IAAIA,GAAG,CAACC,OAAO,IAAIR,GAAG,CAACM,GAAG,CAACf,MAAM,CAACW,MAAM,CAAC,CAACK,GAAG,CAAC;IACxEP,GAAG,CAACM,GAAG,CAACf,MAAM,CAACW,MAAM,CAAC,GAAGK,GAAG,IAAI,CAACA,GAAG,CAACE,GAAG,KAAK,KAAK,IAAIF,GAAG,CAACE,GAAG,KAAKJ,SAAS,KAAKE,GAAG,CAACG,MAAM,IAAIjB,OAAO,CAACS,MAAM,CAAC;EAC/G,CAAC,CAAC;AACJ,CAAC"},"metadata":{},"sourceType":"script"}