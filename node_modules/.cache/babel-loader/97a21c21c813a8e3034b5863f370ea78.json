{"ast":null,"code":"var _jsxFileName = \"/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/SectionLessons.tsx\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ErrorComponent from '../ErrorComponent';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SectionLessons(props) {\n  _s();\n  const lessonsDivRef = useRef(null);\n  const [arrayIndividualLessons, setArrayIndividualLessons] = useState(Object.entries(props.specificSectionsData.individualLessons));\n  const selectedAnswersArr = useRef([]);\n  const answersSelectedSO = useRef([]);\n  const answersSelectedSM = useRef([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  useEffect(() => {\n    setTimeout(() => {\n      if (lessonsDivRef.current != null) {\n        lessonsDivRef.current.classList.add('lessons-div');\n        setTimeout(() => {\n          if (lessonsDivRef.current != null) {\n            lessonsDivRef.current.classList.remove('lessons-div-fadeInAnim');\n          }\n        }, 2000);\n      }\n    }, 100);\n  }, []);\n  useEffect(() => {\n    if (errorMessage != '') {\n      setTimeout(() => {\n        setErrorMessage('');\n      }, 2000);\n    }\n  }, [errorMessage]);\n  const LoadQuestion_SelectMultiple = useCallback(questionInfoObj => {\n    questionCounterRef.current++;\n    const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n    function answer_SM_Selected(id, title) {\n      // clicked element\n      const selectedElement = document.getElementById(id);\n      if (selectedElement == null) {\n        return;\n      }\n      // if user clicks the same answer, remove it from selected answers array and remove its answered class\n      if (answersSelectedSM.current.includes(selectedElement)) {\n        answersSelectedSM.current.map((element, index) => {\n          if (element == selectedElement) {\n            answersSelectedSM.current.splice(index, 1);\n            selectedElement.classList.remove('singlePossibleAnswer-selected');\n          }\n        });\n        selectedAnswersArr.current.map((singleAnsweredQuestion, index) => {\n          if (title == singleAnsweredQuestion.questionTitle) {\n            const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n            console.log(wordIndex);\n            singleAnsweredQuestion.answeredWord.splice(wordIndex, 1);\n          }\n        });\n        return;\n      }\n      // else, push the new clicked value to the array and add the class of selected answer\n      answersSelectedSM.current.push(selectedElement);\n      selectedElement.classList.add('singlePossibleAnswer-selected');\n\n      // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n      if (answersSelectedSM.current.length > possibleAnswersNum) {\n        const removedElement = answersSelectedSM.current.shift();\n        if (removedElement == null) return;\n        removedElement.classList.remove('singlePossibleAnswer-selected');\n      }\n      const clickedButtonInfo = {\n        questionTitle: title,\n        answeredWord: [answersSelectedSM.current[answersSelectedSM.current.length - 1].id.split('-')[1]],\n        questionObject: questionInfoObj\n      };\n      if (selectedAnswersArr.current.length == 0) {\n        selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n      } else {\n        for (let index = 0; index < selectedAnswersArr.current.length; index++) {\n          if (selectedAnswersArr.current[index].questionTitle == clickedButtonInfo.questionTitle) {\n            if (selectedAnswersArr.current[index].questionObject.correctAnswer.length != selectedAnswersArr.current[index].answeredWord.length) {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n            } else {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n              selectedAnswersArr.current[index].answeredWord.shift();\n            }\n            return;\n          } else if (index == selectedAnswersArr.current.length - 1) {\n            selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n          }\n        }\n        console.log(selectedAnswersArr.current);\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-SelectMultiple single-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"single-question-title\",\n          children: [\"Question \", lessonNumber, \": \", questionInfoObj.title, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 106\n          }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n            children: [questionInfoObj.correctAnswer.length, \" possible answer/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 115\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-possibleAnswers\",\n          children: questionInfoObj.possibleAnswers.map((singleAnswer, index) => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"single-question-possibleAnswers-singleAnswer\",\n              id: `${index}SM-${singleAnswer}`,\n              onClick: () => {\n                answer_SM_Selected(`${index}SM-${singleAnswer}`, questionInfoObj.title);\n              },\n              children: singleAnswer\n            }, `${index}SM-${singleAnswer}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 17\n      }, this), loadQuestions(arrayIndividualLessons)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this);\n  }, [props.sectionNum]);\n  const loadQuestion_DragAndDrop = useCallback(questionInfoObj => {\n    questionCounterRef.current++;\n    function onDropFunc(e) {\n      e.preventDefault();\n      const data = e.dataTransfer.getData(\"application/my-app\");\n      e.currentTarget.appendChild(document.getElementById(data));\n    }\n    function onDragOverFunc(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = \"move\";\n    }\n    function ondragstartFunc(e) {\n      e.dataTransfer.setData(\"application/my-app\", e.target.id);\n      e.dataTransfer.effectAllowed = \"move\";\n    }\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-DragAndDrop single-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"single-question-title\",\n          children: [\"Question \", lessonNumber, \": \", questionInfoObj.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-DragAndDrop-words\",\n          onDrop: e => {\n            onDropFunc(e);\n          },\n          onDragOver: e => {\n            onDragOverFunc(e);\n          },\n          children: questionInfoObj.possibleAnswers.map((singleWord, index) => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"single-question-DragAndDrop-singleWord\",\n              id: `${index}DaD-${singleWord}`,\n              onDragStart: e => {\n                ondragstartFunc(e);\n              },\n              draggable: \"true\",\n              children: singleWord\n            }, `${index}DaD-${singleWord}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 188,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 186,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-DragAndDrop-location\",\n          onDrop: e => {\n            onDropFunc(e);\n          },\n          onDragOver: e => {\n            onDragOverFunc(e);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), loadQuestions(arrayIndividualLessons)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this);\n  }, [props.sectionNum]);\n  function returnToMain() {\n    var _lessonsDivRef$curren, _lessonsDivRef$curren2;\n    const mainPath = document.querySelector('.main-path');\n    (_lessonsDivRef$curren = lessonsDivRef.current) === null || _lessonsDivRef$curren === void 0 ? void 0 : _lessonsDivRef$curren.classList.add('lessons-div-fadeOutAnim');\n    (_lessonsDivRef$curren2 = lessonsDivRef.current) === null || _lessonsDivRef$curren2 === void 0 ? void 0 : _lessonsDivRef$curren2.classList.remove('lessons-div');\n    setTimeout(() => {\n      props.goBack.loadCenterPathContent('mainPath');\n    }, 1000);\n  }\n  function checkAnswers() {\n    // firstly check DragAndDrop question if it exists\n    props.errorMessage.setErrorMessage('please work?');\n    return;\n    if (document.querySelector('.single-question-DragAndDrop-location')) {\n      let DragAndDropAnswers;\n      let userDragAndDropAnswers = [];\n      let DnDpoints = '';\n      document.querySelectorAll('.single-question-DragAndDrop-location .single-question-DragAndDrop-singleWord').forEach(element => {\n        userDragAndDropAnswers.push(element.innerText);\n      });\n      const questionObject = Object.entries(props.specificSectionsData.individualLessons).filter(element => {\n        if (typeof element[1] != 'string') return element;\n      });\n      for (let i = 0; i < questionObject.length; i++) {\n        if (questionObject[i][1].questionFormat == 'DragAndDrop') {\n          DragAndDropAnswers = questionObject[i][1];\n          if (!userDragAndDropAnswers) {} else if (userDragAndDropAnswers.length != questionObject[i][1].correctAnswer.length) {\n            setErrorMessage('You must answer all of the questions.');\n          } else {\n            userDragAndDropAnswers.map((element, index) => {\n              if (userDragAndDropAnswers[index] != questionObject[i][1].correctAnswer[index]) {\n                DnDpoints = 'NO POINTS FOR DND';\n              }\n              if (index == userDragAndDropAnswers.length - 1 && DnDpoints != 'NO POINTS FOR DND') {\n                DnDpoints = '++POINTS FOR DND';\n              }\n            });\n          }\n        }\n      }\n    }\n    if (selectedAnswersArr.current.length < arrayIndividualLessons.length / 2) {\n      setErrorMessage('You must answer all of the questions.');\n    }\n    selectedAnswersArr.current.map((singleAnsweredQuestion, index) => {\n      if (singleAnsweredQuestion.questionObject.correctAnswer.length != singleAnsweredQuestion.answeredWord.length) {\n        setErrorMessage('You have skipped an answer inside a question.');\n      } else {\n        console.log('ALL ANSWERS WERE SELECTED');\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lessons-div-fadeInAnim\",\n      ref: lessonsDivRef,\n      children: [errorMessage != '' ? /*#__PURE__*/_jsxDEV(ErrorComponent, {\n        message: errorMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 37\n      }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"single-lesson\",\n        children: [loadQuestions(arrayIndividualLessons), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-lesson-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"lesson-answer-submit\",\n            onClick: () => {\n              checkAnswers();\n            },\n            children: \"Submit the answers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 274,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"lesson-go-back\",\n            onClick: () => {\n              returnToMain();\n            },\n            children: \"Go back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 275,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 271,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 9\n  }, this);\n}\n_s(SectionLessons, \"jjoBCvTR11cLcyVSNYT0KgmL/ws=\");\n_c = SectionLessons;\nexport default SectionLessons;\nvar _c;\n$RefreshReg$(_c, \"SectionLessons\");","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","ErrorComponent","SectionLessons","props","lessonsDivRef","arrayIndividualLessons","setArrayIndividualLessons","Object","entries","specificSectionsData","individualLessons","selectedAnswersArr","answersSelectedSO","answersSelectedSM","errorMessage","setErrorMessage","setTimeout","current","classList","add","remove","LoadQuestion_SelectMultiple","questionInfoObj","questionCounterRef","possibleAnswersNum","correctAnswer","length","answer_SM_Selected","id","title","selectedElement","document","getElementById","includes","map","element","index","splice","singleAnsweredQuestion","questionTitle","wordIndex","answeredWord","indexOf","innerText","console","log","push","removedElement","shift","clickedButtonInfo","split","questionObject","lessonNumber","possibleAnswers","singleAnswer","loadQuestions","sectionNum","loadQuestion_DragAndDrop","onDropFunc","e","preventDefault","data","dataTransfer","getData","currentTarget","appendChild","onDragOverFunc","dropEffect","ondragstartFunc","setData","target","effectAllowed","singleWord","returnToMain","mainPath","querySelector","goBack","loadCenterPathContent","checkAnswers","DragAndDropAnswers","userDragAndDropAnswers","DnDpoints","querySelectorAll","forEach","filter","i","questionFormat"],"sources":["/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/SectionLessons.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ErrorComponent from '../ErrorComponent';\nimport LoadQuestions from './LoadQuestions';\n\ninterface props{\n    sectionNum: number,\n    specificSectionsData: {\n        secNum: number, secDescr: string, individualLessons: {\n            correctAnswer?: string[],\n            possibleAnswers?: string[],\n            questionFormat?: string,\n            title?: string\n        }\n    }\n    goBack: {\n        loadCenterPathContent: React.Dispatch<React.SetStateAction<string>>\n    }\n    errorMessage:{\n        setErrorMessage: any\n    }\n}\ninterface questionInfoObj{\n    correctAnswer: string[],\n    possibleAnswers: string[],\n    questionFormat: string,\n    title: string\n}\ninterface selectedAnswersArrInterface{\n        questionTitle: string,\n        answeredWord: string[],\n        questionObject: any\n}\nfunction SectionLessons(props: props) {\n\n    const lessonsDivRef = useRef<HTMLDivElement>(null);\n\n    const [arrayIndividualLessons, setArrayIndividualLessons] = useState<any>(Object.entries(props.specificSectionsData.individualLessons));\n    const selectedAnswersArr = useRef<selectedAnswersArrInterface[]>([]);\n\n    const answersSelectedSO = useRef<HTMLElement[]>([]);\n    const answersSelectedSM = useRef<HTMLElement[]>([]);\n\n    const [errorMessage, setErrorMessage] = useState<any>('');\n\n    useEffect(()=>{\n        setTimeout(() => {\n            if(lessonsDivRef.current!=null){\n                lessonsDivRef.current.classList.add('lessons-div');\n                setTimeout(() => {\n                    if(lessonsDivRef.current!=null){\n                        lessonsDivRef.current.classList.remove('lessons-div-fadeInAnim');\n                    }\n                }, 2000);\n            }   \n        }, 100);\n\n\n    },[]);\n\n    useEffect(()=>{\n        if(errorMessage!=''){\n            setTimeout(() => {\n                setErrorMessage('');\n                \n            }, 2000);\n        }\n    },[errorMessage])\n\n\n\n\n\n    const LoadQuestion_SelectMultiple = useCallback((questionInfoObj: questionInfoObj)=>{\n\n        questionCounterRef.current++;\n\n\n        const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n\n\n        function answer_SM_Selected(id: string, title: string){\n            // clicked element\n            const selectedElement = document.getElementById(id);\n\n            if(selectedElement==null){\n                return;\n            }\n            // if user clicks the same answer, remove it from selected answers array and remove its answered class\n            if(answersSelectedSM.current.includes(selectedElement)){\n                answersSelectedSM.current.map((element,index)=>{\n                    if(element==selectedElement){\n                        answersSelectedSM.current.splice(index,1);\n                        selectedElement.classList.remove('singlePossibleAnswer-selected');\n                    }\n                })\n                selectedAnswersArr.current.map((singleAnsweredQuestion,index)=>{\n                    if(title==singleAnsweredQuestion.questionTitle){\n                        const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n                        console.log(wordIndex)\n                        singleAnsweredQuestion.answeredWord.splice(wordIndex,1)\n                    }\n                })\n                return;\n            }\n            // else, push the new clicked value to the array and add the class of selected answer\n            answersSelectedSM.current.push(selectedElement);\n            selectedElement.classList.add('singlePossibleAnswer-selected');\n\n            // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n            if(answersSelectedSM.current.length>possibleAnswersNum){\n                const removedElement = answersSelectedSM.current.shift();\n                if(removedElement==null)return;\n                removedElement.classList.remove('singlePossibleAnswer-selected');\n            }\n            const clickedButtonInfo = {\n                questionTitle: title,\n                answeredWord: [answersSelectedSM.current[answersSelectedSM.current.length-1].id.split('-')[1]],\n                questionObject: questionInfoObj\n            }\n            if(selectedAnswersArr.current.length==0){\n                selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo];\n            } else{\n                for(let index = 0; index < selectedAnswersArr.current.length; index++){\n                    if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n                        if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                        } else {\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                            selectedAnswersArr.current[index].answeredWord.shift();\n                        }\n                        return;\n                    } else if(index==selectedAnswersArr.current.length-1){\n                        selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo]\n                    }\n                }\n\n                console.log(selectedAnswersArr.current);\n\n            }\n        }\n\n        return(\n            <React.Fragment>\n                <div className='question-SelectMultiple single-question'>\n                    <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n                    <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n                        return(\n                            <button className='single-question-possibleAnswers-singleAnswer' \n                            key={`${index}SM-${singleAnswer}`}\n                            id={`${index}SM-${singleAnswer}`}\n                            onClick={()=>{answer_SM_Selected(`${index}SM-${singleAnswer}`, questionInfoObj.title)}}\n                            >\n                            {singleAnswer}</button>\n                        )\n                    })}</div>\n                </div>\n                {loadQuestions(arrayIndividualLessons)}\n            </React.Fragment>\n\n        )\n    },[props.sectionNum])\n\n    const loadQuestion_DragAndDrop = useCallback((questionInfoObj: questionInfoObj)=>{\n        questionCounterRef.current++;\n\n\n        function onDropFunc(e: any){\n            e.preventDefault();\n            const data = e.dataTransfer.getData(\"application/my-app\");\n            e.currentTarget.appendChild(document.getElementById(data));\n        }\n        function onDragOverFunc(e: any){\n            e.preventDefault();\n            e.dataTransfer.dropEffect = \"move\";\n        }\n        function ondragstartFunc(e: any){\n            \n            e.dataTransfer.setData(\"application/my-app\", e.target.id);\n            e.dataTransfer.effectAllowed = \"move\";\n        }\n\n        return(\n            <React.Fragment>\n                <div className='question-DragAndDrop single-question'>\n                    <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}</p>\n                    <div className='single-question-DragAndDrop-words' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}>{questionInfoObj.possibleAnswers.map((singleWord,index)=>{\n                        return(\n                            <button className='single-question-DragAndDrop-singleWord'\n                            key={`${index}DaD-${singleWord}`}\n                            id={`${index}DaD-${singleWord}`}\n                            onDragStart={(e)=>{ondragstartFunc(e)}}\n                            draggable='true'\n                            >\n                            {singleWord}\n                            </button>\n                        )\n                    })}</div>\n                    <div className='single-question-DragAndDrop-location' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}></div>\n                </div>\n                {loadQuestions(arrayIndividualLessons)}\n            </React.Fragment>\n\n        )\n    },[props.sectionNum])\n\n    function returnToMain(){\n        const mainPath = document.querySelector('.main-path') as HTMLElement;\n        lessonsDivRef.current?.classList.add('lessons-div-fadeOutAnim');\n        lessonsDivRef.current?.classList.remove('lessons-div');\n        setTimeout(() => {\n            props.goBack.loadCenterPathContent('mainPath');\n        }, 1000);\n    }\n\n    function checkAnswers(){\n        // firstly check DragAndDrop question if it exists\n        props.errorMessage.setErrorMessage('please work?');\n        return;\n        if(document.querySelector('.single-question-DragAndDrop-location')){\n            let DragAndDropAnswers;\n            let userDragAndDropAnswers: any = [];\n            let DnDpoints: string = '';\n            document.querySelectorAll('.single-question-DragAndDrop-location .single-question-DragAndDrop-singleWord').forEach((element: any)=>{\n                userDragAndDropAnswers.push(element.innerText)\n            });\n            \n\n            const questionObject: any = Object.entries(props.specificSectionsData.individualLessons).filter(element=>{\n                if(typeof element[1] != 'string')return element;\n            })\n            \n            for(let i = 0; i < questionObject.length; i++){\n                if(questionObject[i][1].questionFormat=='DragAndDrop'){\n                    DragAndDropAnswers = questionObject[i][1];\n                    if(!userDragAndDropAnswers){\n\n                    } else if(userDragAndDropAnswers.length!=questionObject[i][1].correctAnswer.length){\n                        setErrorMessage('You must answer all of the questions.')\n                    } else {\n                        userDragAndDropAnswers.map((element: string,index: number)=>{\n                            if(userDragAndDropAnswers[index]!=questionObject[i][1].correctAnswer[index]){\n                                DnDpoints='NO POINTS FOR DND'\n                            }\n                            if(index==userDragAndDropAnswers.length-1 && DnDpoints!='NO POINTS FOR DND'){\n                                DnDpoints='++POINTS FOR DND';\n                            }\n                        })\n                    }\n\n                }\n            }\n            \n        }\n        if(selectedAnswersArr.current.length<arrayIndividualLessons.length/2){\n            setErrorMessage('You must answer all of the questions.')\n        }\n        selectedAnswersArr.current.map((singleAnsweredQuestion,index: number)=>{\n            if(singleAnsweredQuestion.questionObject.correctAnswer.length!=singleAnsweredQuestion.answeredWord.length){\n                setErrorMessage('You have skipped an answer inside a question.')\n            } else {\n                console.log('ALL ANSWERS WERE SELECTED')\n            }\n        })\n    }\n\n\n    return (\n        <React.Fragment>\n            <div className='lessons-div-fadeInAnim' ref={lessonsDivRef}>\n                {errorMessage!='' ? <ErrorComponent message={errorMessage} /> : null}\n                <div className='single-lesson'>\n                {loadQuestions(arrayIndividualLessons)}\n                    <div className='single-lesson-buttons'>\n                        <button className='lesson-answer-submit' onClick={()=>{checkAnswers()}}>Submit the answers</button>\n                        <button className='lesson-go-back' onClick={()=>{returnToMain()}}>Go back</button>\n                    </div>\n                </div>\n            </div>\n        </React.Fragment>\n\n    );\n}\n\nexport default SectionLessons;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AACvE,OAAOC,cAAc,MAAM,mBAAmB;AAAC;AA+B/C,SAASC,cAAc,CAACC,KAAY,EAAE;EAAA;EAElC,MAAMC,aAAa,GAAGL,MAAM,CAAiB,IAAI,CAAC;EAElD,MAAM,CAACM,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGN,QAAQ,CAAMO,MAAM,CAACC,OAAO,CAACL,KAAK,CAACM,oBAAoB,CAACC,iBAAiB,CAAC,CAAC;EACvI,MAAMC,kBAAkB,GAAGZ,MAAM,CAAgC,EAAE,CAAC;EAEpE,MAAMa,iBAAiB,GAAGb,MAAM,CAAgB,EAAE,CAAC;EACnD,MAAMc,iBAAiB,GAAGd,MAAM,CAAgB,EAAE,CAAC;EAEnD,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGf,QAAQ,CAAM,EAAE,CAAC;EAEzDF,SAAS,CAAC,MAAI;IACVkB,UAAU,CAAC,MAAM;MACb,IAAGZ,aAAa,CAACa,OAAO,IAAE,IAAI,EAAC;QAC3Bb,aAAa,CAACa,OAAO,CAACC,SAAS,CAACC,GAAG,CAAC,aAAa,CAAC;QAClDH,UAAU,CAAC,MAAM;UACb,IAAGZ,aAAa,CAACa,OAAO,IAAE,IAAI,EAAC;YAC3Bb,aAAa,CAACa,OAAO,CAACC,SAAS,CAACE,MAAM,CAAC,wBAAwB,CAAC;UACpE;QACJ,CAAC,EAAE,IAAI,CAAC;MACZ;IACJ,CAAC,EAAE,GAAG,CAAC;EAGX,CAAC,EAAC,EAAE,CAAC;EAELtB,SAAS,CAAC,MAAI;IACV,IAAGgB,YAAY,IAAE,EAAE,EAAC;MAChBE,UAAU,CAAC,MAAM;QACbD,eAAe,CAAC,EAAE,CAAC;MAEvB,CAAC,EAAE,IAAI,CAAC;IACZ;EACJ,CAAC,EAAC,CAACD,YAAY,CAAC,CAAC;EAMjB,MAAMO,2BAA2B,GAAGxB,WAAW,CAAEyB,eAAgC,IAAG;IAEhFC,kBAAkB,CAACN,OAAO,EAAE;IAG5B,MAAMO,kBAAkB,GAAGF,eAAe,CAACG,aAAa,CAACC,MAAM;IAG/D,SAASC,kBAAkB,CAACC,EAAU,EAAEC,KAAa,EAAC;MAClD;MACA,MAAMC,eAAe,GAAGC,QAAQ,CAACC,cAAc,CAACJ,EAAE,CAAC;MAEnD,IAAGE,eAAe,IAAE,IAAI,EAAC;QACrB;MACJ;MACA;MACA,IAAGjB,iBAAiB,CAACI,OAAO,CAACgB,QAAQ,CAACH,eAAe,CAAC,EAAC;QACnDjB,iBAAiB,CAACI,OAAO,CAACiB,GAAG,CAAC,CAACC,OAAO,EAACC,KAAK,KAAG;UAC3C,IAAGD,OAAO,IAAEL,eAAe,EAAC;YACxBjB,iBAAiB,CAACI,OAAO,CAACoB,MAAM,CAACD,KAAK,EAAC,CAAC,CAAC;YACzCN,eAAe,CAACZ,SAAS,CAACE,MAAM,CAAC,+BAA+B,CAAC;UACrE;QACJ,CAAC,CAAC;QACFT,kBAAkB,CAACM,OAAO,CAACiB,GAAG,CAAC,CAACI,sBAAsB,EAACF,KAAK,KAAG;UAC3D,IAAGP,KAAK,IAAES,sBAAsB,CAACC,aAAa,EAAC;YAC3C,MAAMC,SAAS,GAAGF,sBAAsB,CAACG,YAAY,CAACC,OAAO,CAACZ,eAAe,CAACa,SAAS,CAAC;YACxFC,OAAO,CAACC,GAAG,CAACL,SAAS,CAAC;YACtBF,sBAAsB,CAACG,YAAY,CAACJ,MAAM,CAACG,SAAS,EAAC,CAAC,CAAC;UAC3D;QACJ,CAAC,CAAC;QACF;MACJ;MACA;MACA3B,iBAAiB,CAACI,OAAO,CAAC6B,IAAI,CAAChB,eAAe,CAAC;MAC/CA,eAAe,CAACZ,SAAS,CAACC,GAAG,CAAC,+BAA+B,CAAC;;MAE9D;MACA,IAAGN,iBAAiB,CAACI,OAAO,CAACS,MAAM,GAACF,kBAAkB,EAAC;QACnD,MAAMuB,cAAc,GAAGlC,iBAAiB,CAACI,OAAO,CAAC+B,KAAK,EAAE;QACxD,IAAGD,cAAc,IAAE,IAAI,EAAC;QACxBA,cAAc,CAAC7B,SAAS,CAACE,MAAM,CAAC,+BAA+B,CAAC;MACpE;MACA,MAAM6B,iBAAiB,GAAG;QACtBV,aAAa,EAAEV,KAAK;QACpBY,YAAY,EAAE,CAAC5B,iBAAiB,CAACI,OAAO,CAACJ,iBAAiB,CAACI,OAAO,CAACS,MAAM,GAAC,CAAC,CAAC,CAACE,EAAE,CAACsB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QAC9FC,cAAc,EAAE7B;MACpB,CAAC;MACD,IAAGX,kBAAkB,CAACM,OAAO,CAACS,MAAM,IAAE,CAAC,EAAC;QACpCf,kBAAkB,CAACM,OAAO,GAAC,CAAC,GAAGN,kBAAkB,CAACM,OAAO,EAAEgC,iBAAiB,CAAC;MACjF,CAAC,MAAK;QACF,KAAI,IAAIb,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGzB,kBAAkB,CAACM,OAAO,CAACS,MAAM,EAAEU,KAAK,EAAE,EAAC;UAClE,IAAGzB,kBAAkB,CAACM,OAAO,CAACmB,KAAK,CAAC,CAACG,aAAa,IAAEU,iBAAiB,CAACV,aAAa,EAAC;YAChF,IAAG5B,kBAAkB,CAACM,OAAO,CAACmB,KAAK,CAAC,CAACe,cAAc,CAAC1B,aAAa,CAACC,MAAM,IAAEf,kBAAkB,CAACM,OAAO,CAACmB,KAAK,CAAC,CAACK,YAAY,CAACf,MAAM,EAAC;cAC5Hf,kBAAkB,CAACM,OAAO,CAACmB,KAAK,CAAC,CAACK,YAAY,CAACK,IAAI,CAACG,iBAAiB,CAACR,YAAY,CAAC,CAAC,CAAC,CAAC;YAC1F,CAAC,MAAM;cACH9B,kBAAkB,CAACM,OAAO,CAACmB,KAAK,CAAC,CAACK,YAAY,CAACK,IAAI,CAACG,iBAAiB,CAACR,YAAY,CAAC,CAAC,CAAC,CAAC;cACtF9B,kBAAkB,CAACM,OAAO,CAACmB,KAAK,CAAC,CAACK,YAAY,CAACO,KAAK,EAAE;YAC1D;YACA;UACJ,CAAC,MAAM,IAAGZ,KAAK,IAAEzB,kBAAkB,CAACM,OAAO,CAACS,MAAM,GAAC,CAAC,EAAC;YACjDf,kBAAkB,CAACM,OAAO,GAAC,CAAC,GAAGN,kBAAkB,CAACM,OAAO,EAAEgC,iBAAiB,CAAC;UACjF;QACJ;QAEAL,OAAO,CAACC,GAAG,CAAClC,kBAAkB,CAACM,OAAO,CAAC;MAE3C;IACJ;IAEA,oBACI,QAAC,KAAK,CAAC,QAAQ;MAAA,wBACX;QAAK,SAAS,EAAC,yCAAyC;QAAA,wBACpD;UAAG,SAAS,EAAC,uBAAuB;UAAA,wBAAWmC,YAAY,QAAI9B,eAAe,CAACO,KAAK,eAAC;YAAA;YAAA;YAAA;UAAA,QAAS;YAAA,WAAKP,eAAe,CAACG,aAAa,CAACC,MAAM;UAAA;YAAA;YAAA;YAAA;UAAA,QAAwB;QAAA;UAAA;UAAA;UAAA;QAAA,QAAI,eACnK;UAAK,SAAS,EAAC,iCAAiC;UAAA,UAAEJ,eAAe,CAAC+B,eAAe,CAACnB,GAAG,CAAC,CAACoB,YAAY,EAAClB,KAAK,KAAG;YACxG,oBACI;cAAQ,SAAS,EAAC,8CAA8C;cAEhE,EAAE,EAAG,GAAEA,KAAM,MAAKkB,YAAa,EAAE;cACjC,OAAO,EAAE,MAAI;gBAAC3B,kBAAkB,CAAE,GAAES,KAAM,MAAKkB,YAAa,EAAC,EAAEhC,eAAe,CAACO,KAAK,CAAC;cAAA,CAAE;cAAA,UAEtFyB;YAAY,GAJP,GAAElB,KAAM,MAAKkB,YAAa,EAAC;cAAA;cAAA;cAAA;YAAA,QAIV;UAE/B,CAAC;QAAC;UAAA;UAAA;UAAA;QAAA,QAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QACP,EACLC,aAAa,CAAClD,sBAAsB,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QACzB;EAGzB,CAAC,EAAC,CAACF,KAAK,CAACqD,UAAU,CAAC,CAAC;EAErB,MAAMC,wBAAwB,GAAG5D,WAAW,CAAEyB,eAAgC,IAAG;IAC7EC,kBAAkB,CAACN,OAAO,EAAE;IAG5B,SAASyC,UAAU,CAACC,CAAM,EAAC;MACvBA,CAAC,CAACC,cAAc,EAAE;MAClB,MAAMC,IAAI,GAAGF,CAAC,CAACG,YAAY,CAACC,OAAO,CAAC,oBAAoB,CAAC;MACzDJ,CAAC,CAACK,aAAa,CAACC,WAAW,CAAClC,QAAQ,CAACC,cAAc,CAAC6B,IAAI,CAAC,CAAC;IAC9D;IACA,SAASK,cAAc,CAACP,CAAM,EAAC;MAC3BA,CAAC,CAACC,cAAc,EAAE;MAClBD,CAAC,CAACG,YAAY,CAACK,UAAU,GAAG,MAAM;IACtC;IACA,SAASC,eAAe,CAACT,CAAM,EAAC;MAE5BA,CAAC,CAACG,YAAY,CAACO,OAAO,CAAC,oBAAoB,EAAEV,CAAC,CAACW,MAAM,CAAC1C,EAAE,CAAC;MACzD+B,CAAC,CAACG,YAAY,CAACS,aAAa,GAAG,MAAM;IACzC;IAEA,oBACI,QAAC,KAAK,CAAC,QAAQ;MAAA,wBACX;QAAK,SAAS,EAAC,sCAAsC;QAAA,wBACjD;UAAG,SAAS,EAAC,uBAAuB;UAAA,wBAAWnB,YAAY,QAAI9B,eAAe,CAACO,KAAK;QAAA;UAAA;UAAA;UAAA;QAAA,QAAK,eACzF;UAAK,SAAS,EAAC,mCAAmC;UAAC,MAAM,EAAG8B,CAAC,IAAG;YAACD,UAAU,CAACC,CAAC,CAAC;UAAA,CAAE;UAAC,UAAU,EAAGA,CAAC,IAAG;YAACO,cAAc,CAACP,CAAC,CAAC;UAAA,CAAE;UAAA,UAAErC,eAAe,CAAC+B,eAAe,CAACnB,GAAG,CAAC,CAACsC,UAAU,EAACpC,KAAK,KAAG;YAC5K,oBACI;cAAQ,SAAS,EAAC,wCAAwC;cAE1D,EAAE,EAAG,GAAEA,KAAM,OAAMoC,UAAW,EAAE;cAChC,WAAW,EAAGb,CAAC,IAAG;gBAACS,eAAe,CAACT,CAAC,CAAC;cAAA,CAAE;cACvC,SAAS,EAAC,MAAM;cAAA,UAEfa;YAAU,GALL,GAAEpC,KAAM,OAAMoC,UAAW,EAAC;cAAA;cAAA;cAAA;YAAA,QAMvB;UAEjB,CAAC;QAAC;UAAA;UAAA;UAAA;QAAA,QAAO,eACT;UAAK,SAAS,EAAC,sCAAsC;UAAC,MAAM,EAAGb,CAAC,IAAG;YAACD,UAAU,CAACC,CAAC,CAAC;UAAA,CAAE;UAAC,UAAU,EAAGA,CAAC,IAAG;YAACO,cAAc,CAACP,CAAC,CAAC;UAAA;QAAE;UAAA;UAAA;UAAA;QAAA,QAAO;MAAA;QAAA;QAAA;QAAA;MAAA,QAC9H,EACLJ,aAAa,CAAClD,sBAAsB,CAAC;IAAA;MAAA;MAAA;MAAA;IAAA,QACzB;EAGzB,CAAC,EAAC,CAACF,KAAK,CAACqD,UAAU,CAAC,CAAC;EAErB,SAASiB,YAAY,GAAE;IAAA;IACnB,MAAMC,QAAQ,GAAG3C,QAAQ,CAAC4C,aAAa,CAAC,YAAY,CAAgB;IACpE,yBAAAvE,aAAa,CAACa,OAAO,0DAArB,sBAAuBC,SAAS,CAACC,GAAG,CAAC,yBAAyB,CAAC;IAC/D,0BAAAf,aAAa,CAACa,OAAO,2DAArB,uBAAuBC,SAAS,CAACE,MAAM,CAAC,aAAa,CAAC;IACtDJ,UAAU,CAAC,MAAM;MACbb,KAAK,CAACyE,MAAM,CAACC,qBAAqB,CAAC,UAAU,CAAC;IAClD,CAAC,EAAE,IAAI,CAAC;EACZ;EAEA,SAASC,YAAY,GAAE;IACnB;IACA3E,KAAK,CAACW,YAAY,CAACC,eAAe,CAAC,cAAc,CAAC;IAClD;IACA,IAAGgB,QAAQ,CAAC4C,aAAa,CAAC,uCAAuC,CAAC,EAAC;MAC/D,IAAII,kBAAkB;MACtB,IAAIC,sBAA2B,GAAG,EAAE;MACpC,IAAIC,SAAiB,GAAG,EAAE;MAC1BlD,QAAQ,CAACmD,gBAAgB,CAAC,+EAA+E,CAAC,CAACC,OAAO,CAAEhD,OAAY,IAAG;QAC/H6C,sBAAsB,CAAClC,IAAI,CAACX,OAAO,CAACQ,SAAS,CAAC;MAClD,CAAC,CAAC;MAGF,MAAMQ,cAAmB,GAAG5C,MAAM,CAACC,OAAO,CAACL,KAAK,CAACM,oBAAoB,CAACC,iBAAiB,CAAC,CAAC0E,MAAM,CAACjD,OAAO,IAAE;QACrG,IAAG,OAAOA,OAAO,CAAC,CAAC,CAAC,IAAI,QAAQ,EAAC,OAAOA,OAAO;MACnD,CAAC,CAAC;MAEF,KAAI,IAAIkD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlC,cAAc,CAACzB,MAAM,EAAE2D,CAAC,EAAE,EAAC;QAC1C,IAAGlC,cAAc,CAACkC,CAAC,CAAC,CAAC,CAAC,CAAC,CAACC,cAAc,IAAE,aAAa,EAAC;UAClDP,kBAAkB,GAAG5B,cAAc,CAACkC,CAAC,CAAC,CAAC,CAAC,CAAC;UACzC,IAAG,CAACL,sBAAsB,EAAC,CAE3B,CAAC,MAAM,IAAGA,sBAAsB,CAACtD,MAAM,IAAEyB,cAAc,CAACkC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC5D,aAAa,CAACC,MAAM,EAAC;YAC/EX,eAAe,CAAC,uCAAuC,CAAC;UAC5D,CAAC,MAAM;YACHiE,sBAAsB,CAAC9C,GAAG,CAAC,CAACC,OAAe,EAACC,KAAa,KAAG;cACxD,IAAG4C,sBAAsB,CAAC5C,KAAK,CAAC,IAAEe,cAAc,CAACkC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC5D,aAAa,CAACW,KAAK,CAAC,EAAC;gBACxE6C,SAAS,GAAC,mBAAmB;cACjC;cACA,IAAG7C,KAAK,IAAE4C,sBAAsB,CAACtD,MAAM,GAAC,CAAC,IAAIuD,SAAS,IAAE,mBAAmB,EAAC;gBACxEA,SAAS,GAAC,kBAAkB;cAChC;YACJ,CAAC,CAAC;UACN;QAEJ;MACJ;IAEJ;IACA,IAAGtE,kBAAkB,CAACM,OAAO,CAACS,MAAM,GAACrB,sBAAsB,CAACqB,MAAM,GAAC,CAAC,EAAC;MACjEX,eAAe,CAAC,uCAAuC,CAAC;IAC5D;IACAJ,kBAAkB,CAACM,OAAO,CAACiB,GAAG,CAAC,CAACI,sBAAsB,EAACF,KAAa,KAAG;MACnE,IAAGE,sBAAsB,CAACa,cAAc,CAAC1B,aAAa,CAACC,MAAM,IAAEY,sBAAsB,CAACG,YAAY,CAACf,MAAM,EAAC;QACtGX,eAAe,CAAC,+CAA+C,CAAC;MACpE,CAAC,MAAM;QACH6B,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;MAC5C;IACJ,CAAC,CAAC;EACN;EAGA,oBACI,QAAC,KAAK,CAAC,QAAQ;IAAA,uBACX;MAAK,SAAS,EAAC,wBAAwB;MAAC,GAAG,EAAEzC,aAAc;MAAA,WACtDU,YAAY,IAAE,EAAE,gBAAG,QAAC,cAAc;QAAC,OAAO,EAAEA;MAAa;QAAA;QAAA;QAAA;MAAA,QAAG,GAAG,IAAI,eACpE;QAAK,SAAS,EAAC,eAAe;QAAA,WAC7ByC,aAAa,CAAClD,sBAAsB,CAAC,eAClC;UAAK,SAAS,EAAC,uBAAuB;UAAA,wBAClC;YAAQ,SAAS,EAAC,sBAAsB;YAAC,OAAO,EAAE,MAAI;cAACyE,YAAY,EAAE;YAAA,CAAE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAA4B,eACnG;YAAQ,SAAS,EAAC,gBAAgB;YAAC,OAAO,EAAE,MAAI;cAACL,YAAY,EAAE;YAAA,CAAE;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QAAiB;QAAA;UAAA;UAAA;UAAA;QAAA,QAChF;MAAA;QAAA;QAAA;QAAA;MAAA,QACJ;IAAA;MAAA;MAAA;MAAA;IAAA;EACJ;IAAA;IAAA;IAAA;EAAA,QACO;AAGzB;AAAC,GAzPQvE,cAAc;AAAA,KAAdA,cAAc;AA2PvB,eAAeA,cAAc;AAAC;AAAA"},"metadata":{},"sourceType":"module"}