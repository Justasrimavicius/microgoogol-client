{"ast":null,"code":"var _jsxFileName = \"/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/SectionLessons.tsx\",\n  _s3 = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SectionLessons(props) {\n  _s3();\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n  const lessonsDivRef = useRef(null);\n  const [arrayIndividualLessons, setArrayIndividualLessons] = useState(Object.entries(props.specificSectionsData.individualLessons));\n  const selectedAnswersArr = useRef([]);\n  useEffect(() => {\n    setTimeout(() => {\n      if (lessonsDivRef.current != null) {\n        lessonsDivRef.current.classList.add('lessons-div');\n        setTimeout(() => {\n          if (lessonsDivRef.current != null) {\n            lessonsDivRef.current.classList.remove('lessons-div-fadeInAnim');\n          }\n        }, 2000);\n      }\n    }, 100);\n  }, []);\n  let lessonNumber = 0;\n  const questionCounterRef = useRef(0);\n  function loadQuestions(arrayIndividualLessons) {\n    if (!arrayIndividualLessons[questionCounterRef.current]) {\n      return null;\n      // no more lessons in the array left\n    } else {\n      // still elements left in the array\n      if (arrayIndividualLessons[questionCounterRef.current][1].title) {\n        // the element (arrayIndividualLessons[questionsCounterRef.current][1]) is question element - its second array elements contains info about questions\n        lessonNumber = arrayIndividualLessons[questionCounterRef.current][0].slice(6, 7);\n        if (arrayIndividualLessons[questionCounterRef.current][1].questionFormat == 'SelectOne') {\n          return LoadQuestion_SelectOne(arrayIndividualLessons[questionCounterRef.current][1]);\n        }\n        if (arrayIndividualLessons[questionCounterRef.current][1].questionFormat == 'SelectMultiple') {\n          return LoadQuestion_SelectMultiple(arrayIndividualLessons[questionCounterRef.current][1]);\n        }\n        if (arrayIndividualLessons[questionCounterRef.current][1].questionFormat == 'DragAndDrop') {\n          return loadQuestion_DragAndDrop(arrayIndividualLessons[questionCounterRef.current][1]);\n        }\n      }\n    }\n    questionCounterRef.current++;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: loadQuestions(arrayIndividualLessons)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this);\n  }\n  function LoadQuestion_SelectOne(questionInfoObj) {\n    _s();\n    questionCounterRef.current++;\n    const answersSelected = useRef([]);\n    const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n    function answer_SO_Selected(id, title) {\n      // document.getElementById(`${index}SM-${singleAnswer}`)?.classList.add('singlePossibleAnswer-selected')\n\n      // clicked element\n      const selectedElement = document.getElementById(id);\n      if (selectedElement == null) {\n        return;\n      }\n      // if user clicks the same answer, remove if from selected answers array and remove its answered class\n      if (answersSelected.current.includes(selectedElement)) {\n        answersSelected.current.map((element, index) => {\n          if (element == selectedElement) {\n            answersSelected.current.splice(index, 1);\n            selectedElement.classList.remove('singlePossibleAnswer-selected');\n          }\n        });\n        selectedAnswersArr.current.map((singleAnsweredQuestion, index) => {\n          if (title == singleAnsweredQuestion.questionTitle) {\n            const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n            console.log(wordIndex);\n            singleAnsweredQuestion.answeredWord.splice(wordIndex, 1);\n          }\n        });\n        return;\n      }\n      // else, push the new clicked value to the array and add the class of selected answer\n      answersSelected.current.push(selectedElement);\n      selectedElement.classList.add('singlePossibleAnswer-selected');\n\n      // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n      if (answersSelected.current.length > possibleAnswersNum) {\n        const removedElement = answersSelected.current.shift();\n        if (removedElement == null) return;\n        removedElement.classList.remove('singlePossibleAnswer-selected');\n      }\n      const clickedButtonInfo = {\n        questionTitle: title,\n        answeredWord: [answersSelected.current[answersSelected.current.length - 1].id.split('-')[1]],\n        questionObject: questionInfoObj\n      };\n      if (selectedAnswersArr.current.length == 0) {\n        selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n        console.log(selectedAnswersArr.current);\n      } else {\n        for (let index = 0; index < selectedAnswersArr.current.length; index++) {\n          console.log(selectedAnswersArr.current[index].questionTitle);\n          console.log(clickedButtonInfo.questionTitle);\n          console.log('-----');\n          if (selectedAnswersArr.current[index].questionTitle == clickedButtonInfo.questionTitle) {\n            if (selectedAnswersArr.current[index].questionObject.correctAnswer.length != selectedAnswersArr.current[index].answeredWord.length) {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n            } else {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n              selectedAnswersArr.current[index].answeredWord.shift();\n            }\n            console.log(selectedAnswersArr.current);\n            return;\n          } else if (index == selectedAnswersArr.current.length - 1) {\n            selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n            console.log(selectedAnswersArr.current);\n          }\n        }\n      }\n    }\n    questionCounterRef.current++;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-SelectOne single-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"single-question-title\",\n          children: [\"Question \", lessonNumber, \": \", questionInfoObj.title, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 102\n          }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n            children: [questionInfoObj.correctAnswer.length, \" possible answer/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 166,\n            columnNumber: 111\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-possibleAnswers\",\n          children: questionInfoObj.possibleAnswers.map((singleAnswer, index) => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"single-question-possibleAnswers-singleAnswer\",\n              id: `${index}SO-${singleAnswer}`,\n              onClick: () => {\n                answer_SO_Selected(`${index}SO-${singleAnswer}`, questionInfoObj.title);\n              },\n              children: singleAnswer\n            }, `${index}SO-${singleAnswer}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 25\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 167,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 13\n      }, this), loadQuestions(arrayIndividualLessons)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 13\n    }, this);\n  }\n  _s(LoadQuestion_SelectOne, \"YaSc/Hy+3jHlrx9ITASbJnB9QF0=\");\n  function LoadQuestion_SelectMultiple(questionInfoObj) {\n    _s2();\n    questionCounterRef.current++;\n    const answersSelected = useRef([]);\n    const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n    function answer_SM_Selected(id, title) {\n      // clicked element\n      const selectedElement = document.getElementById(id);\n      if (selectedElement == null) {\n        return;\n      }\n      // if user clicks the same answer, remove it from selected answers array and remove its answered class\n      if (answersSelected.current.includes(selectedElement)) {\n        answersSelected.current.map((element, index) => {\n          if (element == selectedElement) {\n            answersSelected.current.splice(index, 1);\n            selectedElement.classList.remove('singlePossibleAnswer-selected');\n          }\n        });\n        selectedAnswersArr.current.map((singleAnsweredQuestion, index) => {\n          if (title == singleAnsweredQuestion.questionTitle) {\n            const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n            console.log(wordIndex);\n            singleAnsweredQuestion.answeredWord.splice(wordIndex, 1);\n          }\n        });\n        return;\n      }\n      // else, push the new clicked value to the array and add the class of selected answer\n      answersSelected.current.push(selectedElement);\n      selectedElement.classList.add('singlePossibleAnswer-selected');\n\n      // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n      if (answersSelected.current.length > possibleAnswersNum) {\n        const removedElement = answersSelected.current.shift();\n        if (removedElement == null) return;\n        removedElement.classList.remove('singlePossibleAnswer-selected');\n      }\n      const clickedButtonInfo = {\n        questionTitle: title,\n        answeredWord: [answersSelected.current[answersSelected.current.length - 1].id.split('-')[1]],\n        questionObject: questionInfoObj\n      };\n      if (selectedAnswersArr.current.length == 0) {\n        selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n      } else {\n        for (let index = 0; index < selectedAnswersArr.current.length; index++) {\n          if (selectedAnswersArr.current[index].questionTitle == clickedButtonInfo.questionTitle) {\n            if (selectedAnswersArr.current[index].questionObject.correctAnswer.length != selectedAnswersArr.current[index].answeredWord.length) {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n            } else {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n              selectedAnswersArr.current[index].answeredWord.shift();\n            }\n            return;\n          } else if (index == selectedAnswersArr.current.length - 1) {\n            selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n          }\n        }\n        console.log(selectedAnswersArr.current);\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-SelectMultiple single-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"single-question-title\",\n          children: [\"Question \", lessonNumber, \": \", questionInfoObj.title, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 106\n          }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n            children: [questionInfoObj.correctAnswer.length, \" possible answer/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 115\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-possibleAnswers\",\n          children: questionInfoObj.possibleAnswers.map((singleAnswer, index) => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"single-question-possibleAnswers-singleAnswer\",\n              id: `${index}SM-${singleAnswer}`,\n              onClick: () => {\n                answer_SM_Selected(`${index}SM-${singleAnswer}`, questionInfoObj.title);\n              },\n              children: singleAnswer\n            }, `${index}SM-${singleAnswer}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 259,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 257,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 17\n      }, this), loadQuestions(arrayIndividualLessons)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 13\n    }, this);\n  }\n  _s2(LoadQuestion_SelectMultiple, \"YaSc/Hy+3jHlrx9ITASbJnB9QF0=\");\n  function loadQuestion_DragAndDrop(questionInfoObj) {\n    questionCounterRef.current++;\n    function onDropFunc(e) {\n      e.preventDefault();\n      const data = e.dataTransfer.getData(\"application/my-app\");\n      e.currentTarget.appendChild(document.getElementById(data));\n    }\n    function onDragOverFunc(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = \"move\";\n    }\n    function ondragstartFunc(e) {\n      e.dataTransfer.setData(\"application/my-app\", e.target.id);\n      e.dataTransfer.effectAllowed = \"move\";\n    }\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-DragAndDrop single-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"single-question-title\",\n          children: [\"Question \", lessonNumber, \": \", questionInfoObj.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-DragAndDrop-words\",\n          onDrop: e => {\n            onDropFunc(e);\n          },\n          onDragOver: e => {\n            onDragOverFunc(e);\n          },\n          children: questionInfoObj.possibleAnswers.map((singleWord, index) => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"single-question-DragAndDrop-singleWord\",\n              id: `${index}DaD-${singleWord}`,\n              onDragStart: e => {\n                ondragstartFunc(e);\n              },\n              draggable: \"true\",\n              children: singleWord\n            }, `${index}DaD-${singleWord}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 300,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-DragAndDrop-location\",\n          onDrop: e => {\n            onDropFunc(e);\n          },\n          onDragOver: e => {\n            onDragOverFunc(e);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 310,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 17\n      }, this), loadQuestions(arrayIndividualLessons)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 13\n    }, this);\n  }\n  function returnToMain() {\n    var _lessonsDivRef$curren, _lessonsDivRef$curren2;\n    const mainPath = document.querySelector('.main-path');\n    (_lessonsDivRef$curren = lessonsDivRef.current) === null || _lessonsDivRef$curren === void 0 ? void 0 : _lessonsDivRef$curren.classList.add('lessons-div-fadeOutAnim');\n    (_lessonsDivRef$curren2 = lessonsDivRef.current) === null || _lessonsDivRef$curren2 === void 0 ? void 0 : _lessonsDivRef$curren2.classList.remove('lessons-div');\n    setTimeout(() => {\n      props.goBack.loadCenterPathContent('mainPath');\n    }, 1000);\n  }\n  function checkAnswers() {\n    // firstly check DragAndDrop question if it exists\n    if (document.querySelector('.single-question-DragAndDrop-location')) {\n      let DragAndDropAnswers;\n      let userDragAndDropAnswers = [];\n      let DnDpoints = '';\n      document.querySelectorAll('.single-question-DragAndDrop-location .single-question-DragAndDrop-singleWord').forEach(element => {\n        userDragAndDropAnswers.push(element.innerText);\n      });\n      const questionObject = Object.entries(props.specificSectionsData.individualLessons).filter(element => {\n        if (typeof element[1] != 'string') return element;\n      });\n      for (let i = 0; i < questionObject.length; i++) {\n        if (questionObject[i][1].questionFormat == 'DragAndDrop') {\n          DragAndDropAnswers = questionObject[i][1];\n          if (!userDragAndDropAnswers) {\n            alert('select all answers DnD');\n          } else if (userDragAndDropAnswers.length != questionObject[i][1].correctAnswer.length) {\n            alert('select all answers DnD');\n          } else {\n            console.log(userDragAndDropAnswers);\n            console.log(questionObject[i][1].correctAnswer);\n            userDragAndDropAnswers.map((element, index) => {\n              if (userDragAndDropAnswers[index] != questionObject[i][1].correctAnswer[index]) {\n                DnDpoints = 'NO POINTS FOR DND';\n              }\n              if (index == userDragAndDropAnswers.length - 1 && DnDpoints != 'NO POINTS FOR DND') {\n                DnDpoints = '++POINTS FOR DND';\n              }\n            });\n            console.log(DnDpoints);\n          }\n        }\n      }\n    }\n    selectedAnswersArr.current.map((singleAnsweredQuestion, index) => {\n      if (singleAnsweredQuestion.questionObject.correctAnswer.length != singleAnsweredQuestion.answeredWord.length) {\n        console.log('NOT ALL ANSWERS SELECTED');\n        alert('select all answers');\n      } else {\n        console.log('ALL ANSWERS WERE SELECTED');\n      }\n    });\n    // console.log(selectedAnswersArr.current);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"lessons-div-fadeInAnim\",\n    ref: lessonsDivRef,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"single-lesson\",\n      children: [loadQuestions(arrayIndividualLessons), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"single-lesson-buttons\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"lesson-answer-submit\",\n          onClick: () => {\n            checkAnswers();\n          },\n          children: \"Submit the answers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"lesson-go-back\",\n          onClick: () => {\n            returnToMain();\n          },\n          children: \"Go back\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 389,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 387,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 384,\n    columnNumber: 9\n  }, this);\n}\n_s3(SectionLessons, \"qNUxzD+nJ1LqNvqZXsYUrSJyw5Q=\");\n_c = SectionLessons;\nexport default SectionLessons;\nvar _c;\n$RefreshReg$(_c, \"SectionLessons\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SectionLessons","props","lessonsDivRef","arrayIndividualLessons","setArrayIndividualLessons","Object","entries","specificSectionsData","individualLessons","selectedAnswersArr","setTimeout","current","classList","add","remove","lessonNumber","questionCounterRef","loadQuestions","title","slice","questionFormat","LoadQuestion_SelectOne","LoadQuestion_SelectMultiple","loadQuestion_DragAndDrop","questionInfoObj","answersSelected","possibleAnswersNum","correctAnswer","length","answer_SO_Selected","id","selectedElement","document","getElementById","includes","map","element","index","splice","singleAnsweredQuestion","questionTitle","wordIndex","answeredWord","indexOf","innerText","console","log","push","removedElement","shift","clickedButtonInfo","split","questionObject","possibleAnswers","singleAnswer","answer_SM_Selected","onDropFunc","e","preventDefault","data","dataTransfer","getData","currentTarget","appendChild","onDragOverFunc","dropEffect","ondragstartFunc","setData","target","effectAllowed","singleWord","returnToMain","mainPath","querySelector","goBack","loadCenterPathContent","checkAnswers","DragAndDropAnswers","userDragAndDropAnswers","DnDpoints","querySelectorAll","forEach","filter","i","alert"],"sources":["/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/SectionLessons.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\n\ninterface props{\n    sectionNum: number,\n    specificSectionsData: {\n        secNum: number, secDescr: string, individualLessons: {\n            correctAnswer?: string[],\n            possibleAnswers?: string[],\n            questionFormat?: string,\n            title?: string\n        }\n    }\n    goBack: {\n        loadCenterPathContent: React.Dispatch<React.SetStateAction<string>>\n    }\n}\ninterface questionInfoObj{\n    correctAnswer: string[],\n    possibleAnswers: string[],\n    questionFormat: string,\n    title: string\n}\ninterface selectedAnswersArrInterface{\n        questionTitle: string,\n        answeredWord: string[],\n        questionObject: any\n}\nfunction SectionLessons(props: props) {\n\n    const lessonsDivRef = useRef<HTMLDivElement>(null);\n\n    const [arrayIndividualLessons, setArrayIndividualLessons] = useState<any>(Object.entries(props.specificSectionsData.individualLessons));\n    const selectedAnswersArr = useRef<selectedAnswersArrInterface[]>([]);\n\n    useEffect(()=>{\n        setTimeout(() => {\n            if(lessonsDivRef.current!=null){\n                lessonsDivRef.current.classList.add('lessons-div');\n                setTimeout(() => {\n                    if(lessonsDivRef.current!=null){\n                        lessonsDivRef.current.classList.remove('lessons-div-fadeInAnim');\n                    }\n                }, 2000);\n            }   \n        }, 100);\n\n\n    },[]);\n\n    let lessonNumber = 0;\n    const questionCounterRef = useRef<number>(0);\n    function loadQuestions(arrayIndividualLessons: any): React.ReactElement | null{\n\n        if(!arrayIndividualLessons[questionCounterRef.current]){\n            return null;\n            // no more lessons in the array left\n        } else {\n            // still elements left in the array\n            if(arrayIndividualLessons[questionCounterRef.current][1].title){\n                // the element (arrayIndividualLessons[questionsCounterRef.current][1]) is question element - its second array elements contains info about questions\n                lessonNumber = arrayIndividualLessons[questionCounterRef.current][0].slice(6,7);\n                if(arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectOne'){\n                    return LoadQuestion_SelectOne(arrayIndividualLessons[questionCounterRef.current][1]);\n                }\n                if(arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectMultiple'){\n                    return LoadQuestion_SelectMultiple(arrayIndividualLessons[questionCounterRef.current][1]);\n                }\n                if(arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='DragAndDrop'){\n                    return loadQuestion_DragAndDrop(arrayIndividualLessons[questionCounterRef.current][1]);\n                }\n            }\n        }\n\n\n        questionCounterRef.current++;\n        return(\n            <React.Fragment>\n            {loadQuestions(arrayIndividualLessons)}\n            </React.Fragment>\n        )\n    }\n\n    function LoadQuestion_SelectOne(questionInfoObj: questionInfoObj){\n        questionCounterRef.current++;\n\n        const answersSelected = useRef<HTMLElement[]>([]);\n\n        const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n\n\n        function answer_SO_Selected(id: string, title: string){\n        // document.getElementById(`${index}SM-${singleAnswer}`)?.classList.add('singlePossibleAnswer-selected')\n\n            // clicked element\n            const selectedElement = document.getElementById(id);\n\n            if(selectedElement==null){\n                return;\n            }\n            // if user clicks the same answer, remove if from selected answers array and remove its answered class\n            if(answersSelected.current.includes(selectedElement)){\n                answersSelected.current.map((element,index)=>{\n                    if(element==selectedElement){\n                        answersSelected.current.splice(index,1);\n                        selectedElement.classList.remove('singlePossibleAnswer-selected');\n                    }\n                })\n                selectedAnswersArr.current.map((singleAnsweredQuestion,index)=>{\n                    if(title==singleAnsweredQuestion.questionTitle){\n                        const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n                        console.log(wordIndex)\n                        singleAnsweredQuestion.answeredWord.splice(wordIndex,1)\n                    }\n                })\n                return;\n            }\n            // else, push the new clicked value to the array and add the class of selected answer\n            answersSelected.current.push(selectedElement);\n            selectedElement.classList.add('singlePossibleAnswer-selected');\n\n            // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n            if(answersSelected.current.length>possibleAnswersNum){\n                const removedElement = answersSelected.current.shift();\n                if(removedElement==null)return;\n                removedElement.classList.remove('singlePossibleAnswer-selected');\n            }\n            const clickedButtonInfo = {\n                questionTitle: title,\n                answeredWord: [answersSelected.current[answersSelected.current.length-1].id.split('-')[1]],\n                questionObject: questionInfoObj\n            }\n            if(selectedAnswersArr.current.length==0){\n                selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo];\n                console.log(selectedAnswersArr.current);\n\n            } else{\n                for(let index = 0; index < selectedAnswersArr.current.length; index++){\n                    console.log(selectedAnswersArr.current[index].questionTitle);\n                    console.log(clickedButtonInfo.questionTitle);\n                    console.log('-----')\n                    if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n                        if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                        } else {\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                            selectedAnswersArr.current[index].answeredWord.shift();\n                        }\n                        console.log(selectedAnswersArr.current);\n                        return;\n                    } else if(index==selectedAnswersArr.current.length-1){\n                        selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo]\n                        console.log(selectedAnswersArr.current);\n                    }\n                }\n\n            }\n\n        \n\n        }\n\n        questionCounterRef.current++;\n        return(\n            <React.Fragment>\n            <div className='question-SelectOne single-question'>\n                <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n                <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n                    return(\n                        <button className='single-question-possibleAnswers-singleAnswer' \n                        key={`${index}SO-${singleAnswer}`}\n                        id={`${index}SO-${singleAnswer}`}\n                        onClick={()=>{answer_SO_Selected(`${index}SO-${singleAnswer}`, questionInfoObj.title)}}\n                        >\n                        {singleAnswer}</button>\n                    )\n                })}</div>\n            </div>\n            {loadQuestions(arrayIndividualLessons)}\n            </React.Fragment>\n\n        )\n\n    }\n    function LoadQuestion_SelectMultiple(questionInfoObj: questionInfoObj){\n        questionCounterRef.current++;\n\n        const answersSelected = useRef<HTMLElement[]>([]);\n\n        const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n\n\n        function answer_SM_Selected(id: string, title: string){\n            // clicked element\n            const selectedElement = document.getElementById(id);\n\n            if(selectedElement==null){\n                return;\n            }\n            // if user clicks the same answer, remove it from selected answers array and remove its answered class\n            if(answersSelected.current.includes(selectedElement)){\n                answersSelected.current.map((element,index)=>{\n                    if(element==selectedElement){\n                        answersSelected.current.splice(index,1);\n                        selectedElement.classList.remove('singlePossibleAnswer-selected');\n                    }\n                })\n                selectedAnswersArr.current.map((singleAnsweredQuestion,index)=>{\n                    if(title==singleAnsweredQuestion.questionTitle){\n                        const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n                        console.log(wordIndex)\n                        singleAnsweredQuestion.answeredWord.splice(wordIndex,1)\n                    }\n                })\n                return;\n            }\n            // else, push the new clicked value to the array and add the class of selected answer\n            answersSelected.current.push(selectedElement);\n            selectedElement.classList.add('singlePossibleAnswer-selected');\n\n            // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n            if(answersSelected.current.length>possibleAnswersNum){\n                const removedElement = answersSelected.current.shift();\n                if(removedElement==null)return;\n                removedElement.classList.remove('singlePossibleAnswer-selected');\n            }\n            const clickedButtonInfo = {\n                questionTitle: title,\n                answeredWord: [answersSelected.current[answersSelected.current.length-1].id.split('-')[1]],\n                questionObject: questionInfoObj\n            }\n            if(selectedAnswersArr.current.length==0){\n                selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo];\n            } else{\n                for(let index = 0; index < selectedAnswersArr.current.length; index++){\n                    if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n                        if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                        } else {\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                            selectedAnswersArr.current[index].answeredWord.shift();\n                        }\n                        return;\n                    } else if(index==selectedAnswersArr.current.length-1){\n                        selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo]\n                    }\n                }\n\n                console.log(selectedAnswersArr.current);\n\n            }\n        }\n\n        return(\n            <React.Fragment>\n                <div className='question-SelectMultiple single-question'>\n                    <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n                    <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n                        return(\n                            <button className='single-question-possibleAnswers-singleAnswer' \n                            key={`${index}SM-${singleAnswer}`}\n                            id={`${index}SM-${singleAnswer}`}\n                            onClick={()=>{answer_SM_Selected(`${index}SM-${singleAnswer}`, questionInfoObj.title)}}\n                            >\n                            {singleAnswer}</button>\n                        )\n                    })}</div>\n                </div>\n                {loadQuestions(arrayIndividualLessons)}\n            </React.Fragment>\n\n        )\n    }\n\n\n    function loadQuestion_DragAndDrop(questionInfoObj: questionInfoObj){\n        questionCounterRef.current++;\n\n\n        function onDropFunc(e: any){\n            e.preventDefault();\n            const data = e.dataTransfer.getData(\"application/my-app\");\n            e.currentTarget.appendChild(document.getElementById(data));\n        }\n        function onDragOverFunc(e: any){\n            e.preventDefault();\n            e.dataTransfer.dropEffect = \"move\";\n        }\n        function ondragstartFunc(e: any){\n            \n            e.dataTransfer.setData(\"application/my-app\", e.target.id);\n            e.dataTransfer.effectAllowed = \"move\";\n        }\n\n        return(\n            <React.Fragment>\n                <div className='question-DragAndDrop single-question'>\n                    <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}</p>\n                    <div className='single-question-DragAndDrop-words' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}>{questionInfoObj.possibleAnswers.map((singleWord,index)=>{\n                        return(\n                            <button className='single-question-DragAndDrop-singleWord'\n                            key={`${index}DaD-${singleWord}`}\n                            id={`${index}DaD-${singleWord}`}\n                            onDragStart={(e)=>{ondragstartFunc(e)}}\n                            draggable='true'\n                            >\n                            {singleWord}\n                            </button>\n                        )\n                    })}</div>\n                    <div className='single-question-DragAndDrop-location' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}></div>\n                </div>\n                {loadQuestions(arrayIndividualLessons)}\n            </React.Fragment>\n\n        )\n    }\n\n\n    function returnToMain(){\n        const mainPath = document.querySelector('.main-path') as HTMLElement;\n        lessonsDivRef.current?.classList.add('lessons-div-fadeOutAnim');\n        lessonsDivRef.current?.classList.remove('lessons-div');\n        setTimeout(() => {\n            props.goBack.loadCenterPathContent('mainPath');\n        }, 1000);\n    }\n\n    function checkAnswers(){\n        // firstly check DragAndDrop question if it exists\n        if(document.querySelector('.single-question-DragAndDrop-location')){\n            let DragAndDropAnswers;\n            let userDragAndDropAnswers: any = [];\n            let DnDpoints: string = '';\n            document.querySelectorAll('.single-question-DragAndDrop-location .single-question-DragAndDrop-singleWord').forEach((element: any)=>{\n                userDragAndDropAnswers.push(element.innerText)\n            });\n            \n\n            const questionObject: any = Object.entries(props.specificSectionsData.individualLessons).filter(element=>{\n                if(typeof element[1] != 'string')return element;\n            })\n            \n            for(let i = 0; i < questionObject.length; i++){\n                if(questionObject[i][1].questionFormat=='DragAndDrop'){\n                    DragAndDropAnswers = questionObject[i][1];\n                    if(!userDragAndDropAnswers){\n                        alert('select all answers DnD')\n\n                    } else if(userDragAndDropAnswers.length!=questionObject[i][1].correctAnswer.length){\n                        alert('select all answers DnD')\n\n                    } else {\n                        console.log(userDragAndDropAnswers)\n                        console.log(questionObject[i][1].correctAnswer)\n                        userDragAndDropAnswers.map((element: string,index: number)=>{\n                            if(userDragAndDropAnswers[index]!=questionObject[i][1].correctAnswer[index]){\n                                DnDpoints='NO POINTS FOR DND'\n                            }\n                            if(index==userDragAndDropAnswers.length-1 && DnDpoints!='NO POINTS FOR DND'){\n                                DnDpoints='++POINTS FOR DND';\n                            }\n                        })\n                        console.log(DnDpoints)\n                    }\n\n                }\n            }\n            \n        }\n\n        selectedAnswersArr.current.map((singleAnsweredQuestion,index: number)=>{\n            if(singleAnsweredQuestion.questionObject.correctAnswer.length!=singleAnsweredQuestion.answeredWord.length){\n                console.log('NOT ALL ANSWERS SELECTED');\n                alert('select all answers')\n            } else {\n                console.log('ALL ANSWERS WERE SELECTED')\n            }\n        })\n        // console.log(selectedAnswersArr.current);\n    }\n\n\n    return (\n        <div className='lessons-div-fadeInAnim' ref={lessonsDivRef}>\n            <div className='single-lesson'>\n                {loadQuestions(arrayIndividualLessons)}\n            <div className='single-lesson-buttons'>\n                <button className='lesson-answer-submit' onClick={()=>{checkAnswers()}}>Submit the answers</button>\n                <button className='lesson-go-back' onClick={()=>{returnToMain()}}>Go back</button>\n            </div>\n            </div>\n        </div>\n    );\n}\n\nexport default SectionLessons;"],"mappings":"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"},"metadata":{},"sourceType":"module"}