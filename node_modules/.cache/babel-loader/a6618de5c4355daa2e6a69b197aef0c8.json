{"ast":null,"code":"// import React, { useEffect, useState, useContext } from 'react';\n// import { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\n// // import { app } from '../../../../server/firebase';\n\n// import MyContext from '../../context.ts';\n\n// function Signup(props) {\n\n//     const [userCredentials, setUserCredentials] = useState(null);\n//     const [authErrorMsg, setAuthErrorMsg] = useState('');\n\n//     const { UID, setUID } = useContext(MyContext);\n\n//     async function checkSubmit(e){\n//         e.preventDefault();\n//         const errorMsg = document.querySelector('.auth-component-errorMsg');\n//         setAuthErrorMsg('');\n\n//         const email = document.querySelector('#email').value;\n//         const emailR = document.querySelector('#emailR').value;\n//         const password = document.querySelector('#password').value;\n//         const passwordR = document.querySelector('#passwordR').value;\n\n//         // email checking\n//         if(email!=emailR){\n//             setAuthErrorMsg(`emails don't match`);\n//             return;\n//         }\n//         if(email.length<6){\n//             setAuthErrorMsg('email length must be greater than 5');\n//             return;\n//         }\n//         if(!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)){\n//             setAuthErrorMsg('Not a valid email address');\n//             return;\n//         }\n\n//         // password checking\n//         if(password!=passwordR){\n//             setAuthErrorMsg(`passwords don't match`);\n//             return;\n//         }\n//         if(password.length<8){\n//             setAuthErrorMsg('Password length must be greater than 7');\n//             return;\n//         }\n\n//         // firebase authentication\n//         const auth = getAuth(app);\n//         (await function createUser(){\n//          createUserWithEmailAndPassword(auth, email, password)\n//         .then((userCredential) => {\n//             if(userCredential.user){\n//                 setUserCredentials(userCredential);\n//                 setUID(userCredential.user.uid);\n//                 // console.log(userCredential)\n//                 setAuthErrorMsg('User succesfully registered!');\n//                 document.querySelector('.auth-component-errorMsg').style.color='green';\n//                 document.querySelector('.auth-component-errorMsg').style.fontWeight='bold';\n//                 setTimeout(() => {\n//                     setAuthErrorMsg('');\n//                     document.querySelector('.auth-component-errorMsg').style.color='red';\n//                     document.querySelector('.auth-component-errorMsg').style.fontWeight='normal';\n//                 }, 3000);\n//             }\n//         })\n//         .catch((error) => {\n//             console.log(error.code)\n//             if(error.code=='auth/invalid-email'){\n//                 setAuthErrorMsg('Not a valid email address');\n//             }\n//             if(error.code=='auth/email-already-in-use'){\n//                 setAuthErrorMsg('Email is already in use');\n//             }\n//         });\n\n//     })()\n//     }\n\n//     useEffect(()=>{\n//         if(userCredentials!=null){\n//         }\n//     },[userCredentials])\n\n//     return (\n//         <div className='signup-component'>\n//             <form onSubmit={(e)=>{checkSubmit(e)}}>\n//                 <p>Fill in the form</p>\n//                 <div className='signup-component-emailDiv'>\n//                     <label htmlFor='email'>Email:</label>\n//                     <input id='email' name='email'></input>\n//                     <label htmlFor='emailR'>Repeat email:</label>\n//                     <input id='emailR' name='emailR'></input>\n//                 </div>\n\n//                 <div className='signup-component-passwordDiv'>\n//                     <label htmlFor='password' type='password'>Password:</label>\n//                     <input id='password' name='password' type='password'></input>\n//                     <label htmlFor='passwordR' type='password'>Repeat password:</label>\n//                     <input id='passwordR' name='passwordR' type='password'></input>\n//                 </div>\n//                 <p className='auth-component-errorMsg'>{authErrorMsg}</p>\n//                 <button className='button'>Sign up</button>\n//                 <button className='auth-goBack-btn' type='button' onClick={()=>{props.authState.setAuthButton('default')}}>Go back</button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default Signup;","map":{"version":3,"names":[],"sources":["/Users/justinas/Documents/repos/microgogool/client/src/Components/Authentication/Signup.tsx"],"sourcesContent":["// import React, { useEffect, useState, useContext } from 'react';\n// import { getAuth, createUserWithEmailAndPassword } from \"firebase/auth\";\n// // import { app } from '../../../../server/firebase';\n\n// import MyContext from '../../context.ts';\n\n// function Signup(props) {\n\n//     const [userCredentials, setUserCredentials] = useState(null);\n//     const [authErrorMsg, setAuthErrorMsg] = useState('');\n\n//     const { UID, setUID } = useContext(MyContext);\n\n//     async function checkSubmit(e){\n//         e.preventDefault();\n//         const errorMsg = document.querySelector('.auth-component-errorMsg');\n//         setAuthErrorMsg('');\n\n        \n\n\n//         const email = document.querySelector('#email').value;\n//         const emailR = document.querySelector('#emailR').value;\n//         const password = document.querySelector('#password').value;\n//         const passwordR = document.querySelector('#passwordR').value;\n\n//         // email checking\n//         if(email!=emailR){\n//             setAuthErrorMsg(`emails don't match`);\n//             return;\n//         }\n//         if(email.length<6){\n//             setAuthErrorMsg('email length must be greater than 5');\n//             return;\n//         }\n//         if(!/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email)){\n//             setAuthErrorMsg('Not a valid email address');\n//             return;\n//         }\n\n//         // password checking\n//         if(password!=passwordR){\n//             setAuthErrorMsg(`passwords don't match`);\n//             return;\n//         }\n//         if(password.length<8){\n//             setAuthErrorMsg('Password length must be greater than 7');\n//             return;\n//         }\n\n//         // firebase authentication\n//         const auth = getAuth(app);\n//         (await function createUser(){\n//          createUserWithEmailAndPassword(auth, email, password)\n//         .then((userCredential) => {\n//             if(userCredential.user){\n//                 setUserCredentials(userCredential);\n//                 setUID(userCredential.user.uid);\n//                 // console.log(userCredential)\n//                 setAuthErrorMsg('User succesfully registered!');\n//                 document.querySelector('.auth-component-errorMsg').style.color='green';\n//                 document.querySelector('.auth-component-errorMsg').style.fontWeight='bold';\n//                 setTimeout(() => {\n//                     setAuthErrorMsg('');\n//                     document.querySelector('.auth-component-errorMsg').style.color='red';\n//                     document.querySelector('.auth-component-errorMsg').style.fontWeight='normal';\n//                 }, 3000);\n//             }\n//         })\n//         .catch((error) => {\n//             console.log(error.code)\n//             if(error.code=='auth/invalid-email'){\n//                 setAuthErrorMsg('Not a valid email address');\n//             }\n//             if(error.code=='auth/email-already-in-use'){\n//                 setAuthErrorMsg('Email is already in use');\n//             }\n//         });\n           \n//     })()\n//     }\n\n\n//     useEffect(()=>{\n//         if(userCredentials!=null){\n//         }\n//     },[userCredentials])\n\n\n//     return (\n//         <div className='signup-component'>\n//             <form onSubmit={(e)=>{checkSubmit(e)}}>\n//                 <p>Fill in the form</p>\n//                 <div className='signup-component-emailDiv'>\n//                     <label htmlFor='email'>Email:</label>\n//                     <input id='email' name='email'></input>\n//                     <label htmlFor='emailR'>Repeat email:</label>\n//                     <input id='emailR' name='emailR'></input>\n//                 </div>\n\n//                 <div className='signup-component-passwordDiv'>\n//                     <label htmlFor='password' type='password'>Password:</label>\n//                     <input id='password' name='password' type='password'></input>\n//                     <label htmlFor='passwordR' type='password'>Repeat password:</label>\n//                     <input id='passwordR' name='passwordR' type='password'></input>\n//                 </div>\n//                 <p className='auth-component-errorMsg'>{authErrorMsg}</p>\n//                 <button className='button'>Sign up</button>\n//                 <button className='auth-goBack-btn' type='button' onClick={()=>{props.authState.setAuthButton('default')}}>Go back</button>\n//             </form>\n//         </div>\n//     );\n// }\n\n// export default Signup;"],"mappings":"AAAA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module"}