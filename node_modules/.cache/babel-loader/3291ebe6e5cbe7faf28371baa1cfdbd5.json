{"ast":null,"code":"var _jsxFileName = \"/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/MistakesTab.tsx\",\n  _s = $RefreshSig$();\nimport React, { useContext, useEffect } from 'react';\nimport UIDContext from 'src/UIDContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MistakesTab() {\n  _s();\n  const {\n    UID,\n    setUID\n  } = useContext(UIDContext);\n  useEffect(() => {\n    let xhr = new XMLHttpRequest();\n    xhr.open(\"POST\", 'http://localhost:8080/getUserMistakes', true);\n    xhr.setRequestHeader('Content-Type', 'application/json');\n    xhr.send(JSON.stringify({\n      UID: UID\n    }));\n    xhr.onload = () => {\n      const parsedResponse = JSON.parse(xhr.responseText);\n      console.log(parsedResponse);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mistakes-tab\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: require('../../Photos/error.png'),\n      alt: \"error image\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Mistakes you have recently made\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mistakes-holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mistake\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mistake-title\",\n          children: \"Which one of these 3 words - \\\"clap\\\", \\\"say\\\" or \\\"bake\\\" - means \\\"kepti\\\"?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mistake-userAnswer\",\n          children: \"Your answer: clap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mistake-correctAnswer\",\n          children: \"Correct answer: bake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mistake\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mistake-title\",\n          children: \"Which one of these 3 words - \\\"clap\\\", \\\"say\\\" or \\\"bake\\\" - means \\\"kepti\\\"?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mistake-userAnswer\",\n          children: \"Your answer: clap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mistake-correctAnswer\",\n          children: \"Correct answer: bake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mistake\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mistake-title\",\n          children: \"Which one of these 3 words - \\\"clap\\\", \\\"say\\\" or \\\"bake\\\" - means \\\"kepti\\\"?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mistake-userAnswer\",\n          children: \"Your answer: clap\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"mistake-correctAnswer\",\n          children: \"Correct answer: bake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this), props.lessonData.lessonOverview.badAnswersArr.map((badAnswer, index) => {\n      if (badAnswer.hasOwnProperty('questionObject') && (badAnswer.questionObject.questionFormat == 'SelectOne' || badAnswer.questionObject.questionFormat == 'SelectMultiple')) {\n        // singleSelectBadAnswer type\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-badAnswer\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"badAnswer-title\",\n            children: badAnswer.questionTitle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"answers\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"wys\",\n              children: \"What you selected:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"single-badAnswer-userAnsweredWords\",\n              children: badAnswer.answeredWord.map((singleAnswer, i) => {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: singleAnswer\n                }, key.generate(), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 56,\n                  columnNumber: 49\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"tca\",\n              children: \"The correct answer/s:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 60,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"single-badAnswer-correctWords\",\n              children: badAnswer.questionObject.correctAnswer.map((singleAnswer, i) => {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: singleAnswer\n                }, key.generate(), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 49\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 61,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 33\n          }, this)]\n        }, key.generate(), true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 29\n        }, this);\n      } else if (badAnswer.questionFormat == 'DragAndDrop') {\n        // singleDnDBadAnswer type\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-badAnswer\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"badAnswer-title\",\n            children: badAnswer.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"answers\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"wys\",\n              children: \"Words given:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"single-badAnswer-userAnsweredWords\",\n              children: badAnswer.possibleAnswers.map((singleAnswer, i) => {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: singleAnswer\n                }, key.generate(), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 81,\n                  columnNumber: 49\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 78,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"tca\",\n              children: \"Correct order:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"single-badAnswer-correctWords\",\n              children: badAnswer.correctAnswer.map((singleAnswer, i) => {\n                return /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: singleAnswer\n                }, key.generate(), false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 49\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 33\n          }, this)]\n        }, parseFloat(badAnswer.title), true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 29\n        }, this);\n      }\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 9\n  }, this);\n}\n_s(MistakesTab, \"5YAnVLlsctxb2gYSQrDRMQ6Yadw=\");\n_c = MistakesTab;\nexport default MistakesTab;\nvar _c;\n$RefreshReg$(_c, \"MistakesTab\");","map":{"version":3,"names":["React","useContext","useEffect","UIDContext","MistakesTab","UID","setUID","xhr","XMLHttpRequest","open","setRequestHeader","send","JSON","stringify","onload","parsedResponse","parse","responseText","console","log","require","props","lessonData","lessonOverview","badAnswersArr","map","badAnswer","index","hasOwnProperty","questionObject","questionFormat","questionTitle","answeredWord","singleAnswer","i","key","generate","correctAnswer","title","possibleAnswers","parseFloat"],"sources":["/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/MistakesTab.tsx"],"sourcesContent":["import React, { useContext, useEffect } from 'react';\n\nimport UIDContext from 'src/UIDContext';\n\nfunction MistakesTab() {\n\n    const { UID, setUID } = useContext(UIDContext);\n\n    useEffect(()=>{\n        let xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", 'http://localhost:8080/getUserMistakes', true);\n        xhr.setRequestHeader('Content-Type', 'application/json');\n        xhr.send(JSON.stringify({\n            UID: UID\n        }));\n\n        xhr.onload = ()=>{\n            const parsedResponse = JSON.parse(xhr.responseText);\n            console.log(parsedResponse)\n        }\n    },[])\n\n    return (\n        <div className='mistakes-tab'>\n            <img src={require('../../Photos/error.png')} alt='error image'></img>\n            <p>Mistakes you have recently made</p>\n            <div className='mistakes-holder'>\n                <div className='mistake'>\n                    <p className='mistake-title'>Which one of these 3 words - \"clap\", \"say\" or \"bake\" - means \"kepti\"?</p>\n                    <p className='mistake-userAnswer'>Your answer: clap</p>\n                    <p className='mistake-correctAnswer'>Correct answer: bake</p>\n                </div>\n                <div className='mistake'>\n                    <p className='mistake-title'>Which one of these 3 words - \"clap\", \"say\" or \"bake\" - means \"kepti\"?</p>\n                    <p className='mistake-userAnswer'>Your answer: clap</p>\n                    <p className='mistake-correctAnswer'>Correct answer: bake</p>\n                </div>\n                <div className='mistake'>\n                    <p className='mistake-title'>Which one of these 3 words - \"clap\", \"say\" or \"bake\" - means \"kepti\"?</p>\n                    <p className='mistake-userAnswer'>Your answer: clap</p>\n                    <p className='mistake-correctAnswer'>Correct answer: bake</p>\n                </div>\n            </div>\n\n            {props.lessonData.lessonOverview.badAnswersArr.map((badAnswer: anyBadAnswer, index: number)=>{\n                    if(badAnswer.hasOwnProperty('questionObject') && (badAnswer.questionObject.questionFormat == 'SelectOne' || badAnswer.questionObject.questionFormat == 'SelectMultiple')){\n                        // singleSelectBadAnswer type\n                        return(\n                            <div className='single-badAnswer' key={key.generate()}>\n                                <p className='badAnswer-title'>{badAnswer.questionTitle}</p>\n                                <div className='answers'>\n                                    <p className='wys'>What you selected:</p>\n                                    <div className='single-badAnswer-userAnsweredWords'>\n                                        {badAnswer.answeredWord.map((singleAnswer: string, i: number)=>{\n                                            return(\n                                                <p key={key.generate()}>{singleAnswer}</p>\n                                            )\n                                        })}\n                                    </div>\n                                    <p className='tca'>The correct answer/s:</p>\n                                    <div className='single-badAnswer-correctWords'>\n                                        {badAnswer.questionObject.correctAnswer.map((singleAnswer: string, i: number)=>{\n                                            return(\n                                                <p key={key.generate()}>{singleAnswer}</p>\n                                            )\n                                        })}\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    } else if(badAnswer.questionFormat=='DragAndDrop'){\n                        // singleDnDBadAnswer type\n                        return(\n                            <div className='single-badAnswer' key={parseFloat(badAnswer.title)}>\n                                <p className='badAnswer-title'>{badAnswer.title}</p>\n                                <div className='answers'>\n                                    <p className='wys'>Words given:</p>\n                                    <div className='single-badAnswer-userAnsweredWords'>\n                                        {badAnswer.possibleAnswers.map((singleAnswer: string, i: number)=>{\n                                            return(\n                                                <p key={key.generate()}>{singleAnswer}</p>\n                                            )\n                                        })}\n                                    </div>\n                                    <p className='tca'>Correct order:</p>\n                                    <div className='single-badAnswer-correctWords'>\n                                        {badAnswer.correctAnswer.map((singleAnswer: string, i: number)=>{\n                                            return(\n                                                <p key={key.generate()}>{singleAnswer}</p>\n                                            )\n                                        })}\n                                    </div>\n                                </div>\n                            </div>\n                        )\n                    }\n                })}\n\n\n\n\n        </div>\n    );\n}\n\nexport default MistakesTab;"],"mappings":"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"},"metadata":{},"sourceType":"module"}