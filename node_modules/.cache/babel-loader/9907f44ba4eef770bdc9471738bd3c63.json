{"ast":null,"code":"var _jsxFileName = \"/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/LoadQuestions.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoadQuestions(props) {\n  _s();\n  const questionCounterRef = {\n    current: -1\n  };\n  let lessonNumber = 0;\n  const answersSelectedSO = {\n    current: []\n  };\n  const answersSelectedSM = {\n    current: []\n  };\n  const selectedAnswersArr = {\n    current: []\n  };\n  useEffect(() => {\n    if (props.errorHandling.startErrorHandling != false) {\n      checkAnswers();\n    }\n  }, [props.errorHandling.startErrorHandling]);\n  function MainCall() {\n    console.log(props.props.arrayIndividualLessons[questionCounterRef.current]);\n    console.log(questionCounterRef.current);\n    if (!props.props.arrayIndividualLessons[questionCounterRef.current]) {\n      console.log(props.props.arrayIndividualLessons);\n      console.log(questionCounterRef.current);\n      if (questionCounterRef.current >= props.props.arrayIndividualLessons.length) return;else {\n        questionCounterRef.current++;\n        console.log('call MainCall again');\n        return MainCall();\n      }\n    } else {\n      // still elements left in the array\n      if (props.props.arrayIndividualLessons[questionCounterRef.current][1].title) {\n        // the element (props.props.arrayIndividualLessons[questionsCounterRef.current][1]) is question element - its second array elements contains info about questions\n        lessonNumber = props.props.arrayIndividualLessons[questionCounterRef.current][0].slice(6, 7);\n        if (props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat == 'SelectOne') {\n          console.log('SelectOne');\n          return LoadQuestion_SelectOne(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n        }\n        if (props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat == 'SelectMultiple') {\n          console.log('SelectMultiple');\n          return LoadQuestion_SelectMultiple(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n        }\n        if (props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat == 'DragAndDrop') {\n          console.log('DragAndDrop');\n          return loadQuestion_DragAndDrop(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n        }\n      } else {\n        questionCounterRef.current++;\n        console.log('Main called');\n        return MainCall();\n      }\n    }\n  }\n  function LoadQuestion_SelectOne(questionInfoObj) {\n    console.log(questionInfoObj);\n    questionCounterRef.current++;\n    const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n    function answer_SO_Selected(id, title) {\n      // document.getElementById(`${index}SM-${singleAnswer}`)?.classList.add('singlePossibleAnswer-selected')\n\n      // clicked element\n      const selectedElement = document.getElementById(id);\n      if (selectedElement == null) {\n        return;\n      }\n      // if user clicks the same answer, remove if from selected answers array and remove its answered class\n      if (answersSelectedSO.current.includes(selectedElement)) {\n        answersSelectedSO.current.map((element, index) => {\n          if (element == selectedElement) {\n            answersSelectedSO.current.splice(index, 1);\n            selectedElement.classList.remove('singlePossibleAnswer-selected');\n          }\n        });\n        selectedAnswersArr.current.map((singleAnsweredQuestion, index) => {\n          if (title == singleAnsweredQuestion.questionTitle) {\n            const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n            console.log(wordIndex);\n            singleAnsweredQuestion.answeredWord.splice(wordIndex, 1);\n          }\n        });\n        return;\n      }\n      // else, push the new clicked value to the array and add the class of selected answer\n      answersSelectedSO.current.push(selectedElement);\n      selectedElement.classList.add('singlePossibleAnswer-selected');\n\n      // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n      if (answersSelectedSO.current.length > possibleAnswersNum) {\n        const removedElement = answersSelectedSO.current.shift();\n        if (removedElement == null) return;\n        removedElement.classList.remove('singlePossibleAnswer-selected');\n      }\n      const clickedButtonInfo = {\n        questionTitle: title,\n        answeredWord: [answersSelectedSO.current[answersSelectedSO.current.length - 1].id.split('-')[1]],\n        questionObject: questionInfoObj\n      };\n      if (selectedAnswersArr.current.length == 0) {\n        selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n        console.log(selectedAnswersArr.current);\n      } else {\n        for (let index = 0; index < selectedAnswersArr.current.length; index++) {\n          console.log(selectedAnswersArr.current[index].questionTitle);\n          console.log(clickedButtonInfo.questionTitle);\n          console.log('-----');\n          if (selectedAnswersArr.current[index].questionTitle == clickedButtonInfo.questionTitle) {\n            if (selectedAnswersArr.current[index].questionObject.correctAnswer.length != selectedAnswersArr.current[index].answeredWord.length) {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n            } else {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n              selectedAnswersArr.current[index].answeredWord.shift();\n            }\n            console.log(selectedAnswersArr.current);\n            return;\n          } else if (index == selectedAnswersArr.current.length - 1) {\n            selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n            console.log(selectedAnswersArr.current);\n          }\n        }\n      }\n    }\n    questionCounterRef.current++;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-SelectOne single-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"single-question-title\",\n          children: [\"Question \", lessonNumber, \": \", questionInfoObj.title, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 102\n          }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n            children: [questionInfoObj.correctAnswer.length, \" possible answer/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 111\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-possibleAnswers\",\n          children: questionInfoObj.possibleAnswers.map((singleAnswer, index) => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"single-question-possibleAnswers-singleAnswer\",\n              id: `${index}SO-${singleAnswer}`,\n              onClick: () => {\n                answer_SO_Selected(`${index}SO-${singleAnswer}`, questionInfoObj.title);\n              },\n              children: singleAnswer\n            }, `${index}SO-${singleAnswer}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 162,\n              columnNumber: 25\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 13\n      }, this), MainCall()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this);\n  }\n  function LoadQuestion_SelectMultiple(questionInfoObj) {\n    console.log(questionInfoObj);\n    const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n    questionCounterRef.current++;\n    function answer_SM_Selected(id, title) {\n      // clicked element\n      const selectedElement = document.getElementById(id);\n      if (selectedElement == null) {\n        return;\n      }\n      // if user clicks the same answer, remove it from selected answers array and remove its answered class\n      if (answersSelectedSM.current.includes(selectedElement)) {\n        answersSelectedSM.current.map((element, index) => {\n          if (element == selectedElement) {\n            answersSelectedSM.current.splice(index, 1);\n            selectedElement.classList.remove('singlePossibleAnswer-selected');\n          }\n        });\n        selectedAnswersArr.current.map((singleAnsweredQuestion, index) => {\n          if (title == singleAnsweredQuestion.questionTitle) {\n            const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n            console.log(wordIndex);\n            singleAnsweredQuestion.answeredWord.splice(wordIndex, 1);\n          }\n        });\n        return;\n      }\n      // else, push the new clicked value to the array and add the class of selected answer\n      answersSelectedSM.current.push(selectedElement);\n      selectedElement.classList.add('singlePossibleAnswer-selected');\n\n      // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n      if (answersSelectedSM.current.length > possibleAnswersNum) {\n        const removedElement = answersSelectedSM.current.shift();\n        if (removedElement == null) return;\n        removedElement.classList.remove('singlePossibleAnswer-selected');\n      }\n      const clickedButtonInfo = {\n        questionTitle: title,\n        answeredWord: [answersSelectedSM.current[answersSelectedSM.current.length - 1].id.split('-')[1]],\n        questionObject: questionInfoObj\n      };\n      if (selectedAnswersArr.current.length == 0) {\n        selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n      } else {\n        for (let index = 0; index < selectedAnswersArr.current.length; index++) {\n          if (selectedAnswersArr.current[index].questionTitle == clickedButtonInfo.questionTitle) {\n            if (selectedAnswersArr.current[index].questionObject.correctAnswer.length != selectedAnswersArr.current[index].answeredWord.length) {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n            } else {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n              selectedAnswersArr.current[index].answeredWord.shift();\n            }\n            return;\n          } else if (index == selectedAnswersArr.current.length - 1) {\n            selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n          }\n        }\n        console.log(selectedAnswersArr.current);\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-SelectMultiple single-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"single-question-title\",\n          children: [\"Question \", lessonNumber, \": \", questionInfoObj.title, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 106\n          }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n            children: [questionInfoObj.correctAnswer.length, \" possible answer/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 248,\n            columnNumber: 115\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-possibleAnswers\",\n          children: questionInfoObj.possibleAnswers.map((singleAnswer, index) => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"single-question-possibleAnswers-singleAnswer\",\n              id: `${index}SM-${singleAnswer}`,\n              onClick: () => {\n                answer_SM_Selected(`${index}SM-${singleAnswer}`, questionInfoObj.title);\n              },\n              children: singleAnswer\n            }, `${index}SM-${singleAnswer}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 251,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 247,\n        columnNumber: 17\n      }, this), MainCall()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 13\n    }, this);\n  }\n  function loadQuestion_DragAndDrop(questionInfoObj) {\n    console.log(questionInfoObj);\n    questionCounterRef.current++;\n    function onDropFunc(e) {\n      e.preventDefault();\n      const data = e.dataTransfer.getData(\"application/my-app\");\n      e.currentTarget.appendChild(document.getElementById(data));\n    }\n    function onDragOverFunc(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = \"move\";\n    }\n    function ondragstartFunc(e) {\n      e.dataTransfer.setData(\"application/my-app\", e.target.id);\n      e.dataTransfer.effectAllowed = \"move\";\n    }\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-DragAndDrop single-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"single-question-title\",\n          children: [\"Question \", lessonNumber, \": \", questionInfoObj.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-DragAndDrop-words\",\n          onDrop: e => {\n            onDropFunc(e);\n          },\n          onDragOver: e => {\n            onDragOverFunc(e);\n          },\n          children: questionInfoObj.possibleAnswers.map((singleWord, index) => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"single-question-DragAndDrop-singleWord\",\n              id: `${index}DaD-${singleWord}`,\n              onDragStart: e => {\n                ondragstartFunc(e);\n              },\n              draggable: \"true\",\n              children: singleWord\n            }, `${index}DaD-${singleWord}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 291,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-DragAndDrop-location\",\n          onDrop: e => {\n            onDropFunc(e);\n          },\n          onDragOver: e => {\n            onDragOverFunc(e);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 17\n      }, this), MainCall()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 13\n    }, this);\n  }\n  function checkAnswers() {\n    // firstly check DragAndDrop question if it exists\n    if (document.querySelector('.single-question-DragAndDrop-location')) {\n      let DragAndDropAnswers;\n      let userDragAndDropAnswers = [];\n      let DnDpoints = '';\n      document.querySelectorAll('.single-question-DragAndDrop-location .single-question-DragAndDrop-singleWord').forEach(element => {\n        userDragAndDropAnswers.push(element.innerText);\n      });\n      console.log(props);\n      const questionObject = Object.entries(props.props.specificSectionsData.individualLessons).filter(element => {\n        if (typeof element[1] != 'string') return element;\n      });\n      for (let i = 0; i < questionObject.length; i++) {\n        if (questionObject[i][1].questionFormat == 'DragAndDrop') {\n          DragAndDropAnswers = questionObject[i][1];\n          if (!userDragAndDropAnswers) {} else if (userDragAndDropAnswers.length != questionObject[i][1].correctAnswer.length) {\n            props.errorMessage.setErrorMessage('You must answer all of the questions.');\n          } else {\n            userDragAndDropAnswers.map((element, index) => {\n              if (userDragAndDropAnswers[index] != questionObject[i][1].correctAnswer[index]) {\n                DnDpoints = 'NO POINTS FOR DND';\n              }\n              if (index == userDragAndDropAnswers.length - 1 && DnDpoints != 'NO POINTS FOR DND') {\n                DnDpoints = '++POINTS FOR DND';\n              }\n            });\n          }\n        }\n      }\n    }\n    if (selectedAnswersArr.current.length < props.props.arrayIndividualLessons.length / 2) {\n      props.errorHandling.setErrorMessage('You must answer all of the questions.');\n    }\n    selectedAnswersArr.current.map((singleAnsweredQuestion, index) => {\n      if (singleAnsweredQuestion.questionObject.correctAnswer.length != singleAnsweredQuestion.answeredWord.length) {\n        props.errorHandling.setErrorMessage('You have skipped an answer inside a question.');\n      } else {\n        console.log('ALL ANSWERS WERE SELECTED');\n      }\n    });\n  }\n  questionCounterRef.current++;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: MainCall()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 359,\n    columnNumber: 9\n  }, this);\n}\n_s(LoadQuestions, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = LoadQuestions;\nexport default LoadQuestions;\nvar _c;\n$RefreshReg$(_c, \"LoadQuestions\");","map":{"version":3,"names":["React","useEffect","LoadQuestions","props","questionCounterRef","current","lessonNumber","answersSelectedSO","answersSelectedSM","selectedAnswersArr","errorHandling","startErrorHandling","checkAnswers","MainCall","console","log","arrayIndividualLessons","length","title","slice","questionFormat","LoadQuestion_SelectOne","LoadQuestion_SelectMultiple","loadQuestion_DragAndDrop","questionInfoObj","possibleAnswersNum","correctAnswer","answer_SO_Selected","id","selectedElement","document","getElementById","includes","map","element","index","splice","classList","remove","singleAnsweredQuestion","questionTitle","wordIndex","answeredWord","indexOf","innerText","push","add","removedElement","shift","clickedButtonInfo","split","questionObject","possibleAnswers","singleAnswer","answer_SM_Selected","onDropFunc","e","preventDefault","data","dataTransfer","getData","currentTarget","appendChild","onDragOverFunc","dropEffect","ondragstartFunc","setData","target","effectAllowed","singleWord","querySelector","DragAndDropAnswers","userDragAndDropAnswers","DnDpoints","querySelectorAll","forEach","Object","entries","specificSectionsData","individualLessons","filter","i","errorMessage","setErrorMessage"],"sources":["/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/LoadQuestions.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef } from 'react';\n\ninterface questionInfoObj{\n    correctAnswer: string[],\n    possibleAnswers: string[],\n    questionFormat: string,\n    title: string\n}\ninterface selectedAnswersArrInterface{\n    questionTitle: string,\n    answeredWord: string[],\n    questionObject: any\n}\nfunction LoadQuestions(props: any): React.ReactElement | null{\n    const questionCounterRef: {current: number} = {\n        current: -1\n    };\n\n    let lessonNumber = 0;\n    const answersSelectedSO: {current: HTMLElement[]} = {\n        current: []\n    }\n\n    const answersSelectedSM: {current: HTMLElement[]}  = {\n        current: []\n    };\n\n    const selectedAnswersArr: {current: selectedAnswersArrInterface[]} = {\n        current: []\n    };\n\n    useEffect(()=>{\n        if(props.errorHandling.startErrorHandling!=false){\n            checkAnswers();\n        }\n    },[props.errorHandling.startErrorHandling])\n\n\n    function MainCall(): React.ReactElement | undefined{\n        console.log(props.props.arrayIndividualLessons[questionCounterRef.current])\n        console.log(questionCounterRef.current)\n\n    if(!props.props.arrayIndividualLessons[questionCounterRef.current]){\n        console.log(props.props.arrayIndividualLessons);\n        console.log(questionCounterRef.current)\n        if(questionCounterRef.current>=props.props.arrayIndividualLessons.length)return;\n        else {\n            questionCounterRef.current++;\n            console.log('call MainCall again')\n            return MainCall();\n        }\n    } else {\n        // still elements left in the array\n        if(props.props.arrayIndividualLessons[questionCounterRef.current][1].title){\n            // the element (props.props.arrayIndividualLessons[questionsCounterRef.current][1]) is question element - its second array elements contains info about questions\n            lessonNumber = props.props.arrayIndividualLessons[questionCounterRef.current][0].slice(6,7);\n            if(props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectOne'){\n                console.log('SelectOne')\n                return LoadQuestion_SelectOne(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n            }\n            if(props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectMultiple'){\n                console.log('SelectMultiple')\n                return LoadQuestion_SelectMultiple(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n            }\n            if(props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='DragAndDrop'){\n                console.log('DragAndDrop')\n\n                return loadQuestion_DragAndDrop(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n            }\n        } else {\n            questionCounterRef.current++;\n            console.log('Main called')\n            return MainCall();\n        }\n    }\n    }\n\n    function LoadQuestion_SelectOne(questionInfoObj: questionInfoObj){\n        console.log(questionInfoObj)\n        questionCounterRef.current++;\n\n        const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n\n        function answer_SO_Selected(id: string, title: string){\n        // document.getElementById(`${index}SM-${singleAnswer}`)?.classList.add('singlePossibleAnswer-selected')\n\n            // clicked element\n            const selectedElement = document.getElementById(id);\n\n            if(selectedElement==null){\n                return;\n            }\n            // if user clicks the same answer, remove if from selected answers array and remove its answered class\n            if(answersSelectedSO.current.includes(selectedElement)){\n                answersSelectedSO.current.map((element,index: number)=>{\n                    if(element==selectedElement){\n                        answersSelectedSO.current.splice(index,1);\n                        selectedElement.classList.remove('singlePossibleAnswer-selected');\n                    }\n                })\n                selectedAnswersArr.current.map((singleAnsweredQuestion,index: number)=>{\n                    if(title==singleAnsweredQuestion.questionTitle){\n                        const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n                        console.log(wordIndex)\n                        singleAnsweredQuestion.answeredWord.splice(wordIndex,1)\n                    }\n                })\n                return;\n            }\n            // else, push the new clicked value to the array and add the class of selected answer\n            answersSelectedSO.current.push(selectedElement);\n            selectedElement.classList.add('singlePossibleAnswer-selected');\n\n            // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n            if(answersSelectedSO.current.length>possibleAnswersNum){\n                const removedElement = answersSelectedSO.current.shift();\n                if(removedElement==null)return;\n                removedElement.classList.remove('singlePossibleAnswer-selected');\n            }\n            const clickedButtonInfo = {\n                questionTitle: title,\n                answeredWord: [answersSelectedSO.current[answersSelectedSO.current.length-1].id.split('-')[1]],\n                questionObject: questionInfoObj\n            }\n            if(selectedAnswersArr.current.length==0){\n                selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo];\n                console.log(selectedAnswersArr.current);\n\n            } else{\n                for(let index = 0; index < selectedAnswersArr.current.length; index++){\n                    console.log(selectedAnswersArr.current[index].questionTitle);\n                    console.log(clickedButtonInfo.questionTitle);\n                    console.log('-----')\n                    if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n                        if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                        } else {\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                            selectedAnswersArr.current[index].answeredWord.shift();\n                        }\n                        console.log(selectedAnswersArr.current);\n                        return;\n                    } else if(index==selectedAnswersArr.current.length-1){\n                        selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo]\n                        console.log(selectedAnswersArr.current);\n                    }\n                }\n\n            }\n\n        \n\n        }\n\n        questionCounterRef.current++;\n        return(\n            <React.Fragment>\n            <div className='question-SelectOne single-question'>\n                <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n                <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n                    return(\n                        <button className='single-question-possibleAnswers-singleAnswer' \n                        key={`${index}SO-${singleAnswer}`}\n                        id={`${index}SO-${singleAnswer}`}\n                        onClick={()=>{answer_SO_Selected(`${index}SO-${singleAnswer}`, questionInfoObj.title)}}\n                        >\n                        {singleAnswer}</button>\n                    )\n                })}</div>\n            </div>\n            {MainCall()}\n            </React.Fragment>\n\n        )\n\n    }\n\n    function LoadQuestion_SelectMultiple(questionInfoObj: questionInfoObj){\n        console.log(questionInfoObj)\n        const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n\n        questionCounterRef.current++;\n\n        function answer_SM_Selected(id: string, title: string){\n            // clicked element\n            const selectedElement = document.getElementById(id);\n\n            if(selectedElement==null){\n                return;\n            }\n            // if user clicks the same answer, remove it from selected answers array and remove its answered class\n            if(answersSelectedSM.current.includes(selectedElement)){\n                answersSelectedSM.current.map((element,index: number)=>{\n                    if(element==selectedElement){\n                        answersSelectedSM.current.splice(index,1);\n                        selectedElement.classList.remove('singlePossibleAnswer-selected');\n                    }\n                })\n                selectedAnswersArr.current.map((singleAnsweredQuestion,index: number)=>{\n                    if(title==singleAnsweredQuestion.questionTitle){\n                        const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n                        console.log(wordIndex)\n                        singleAnsweredQuestion.answeredWord.splice(wordIndex,1)\n                    }\n                })\n                return;\n            }\n            // else, push the new clicked value to the array and add the class of selected answer\n            answersSelectedSM.current.push(selectedElement);\n            selectedElement.classList.add('singlePossibleAnswer-selected');\n\n            // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n            if(answersSelectedSM.current.length>possibleAnswersNum){\n                const removedElement = answersSelectedSM.current.shift();\n                if(removedElement==null)return;\n                removedElement.classList.remove('singlePossibleAnswer-selected');\n            }\n            const clickedButtonInfo = {\n                questionTitle: title,\n                answeredWord: [answersSelectedSM.current[answersSelectedSM.current.length-1].id.split('-')[1]],\n                questionObject: questionInfoObj\n            }\n            if(selectedAnswersArr.current.length==0){\n                selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo];\n            } else{\n                for(let index = 0; index < selectedAnswersArr.current.length; index++){\n                    if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n                        if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                        } else {\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                            selectedAnswersArr.current[index].answeredWord.shift();\n                        }\n                        return;\n                    } else if(index==selectedAnswersArr.current.length-1){\n                        selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo]\n                    }\n                }\n\n                console.log(selectedAnswersArr.current);\n\n            }\n        }\n\n        return(\n            <React.Fragment>\n                <div className='question-SelectMultiple single-question'>\n                    <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n                    <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n                        return(\n                            <button className='single-question-possibleAnswers-singleAnswer' \n                            key={`${index}SM-${singleAnswer}`}\n                            id={`${index}SM-${singleAnswer}`}\n                            onClick={()=>{answer_SM_Selected(`${index}SM-${singleAnswer}`, questionInfoObj.title)}}\n                            >\n                            {singleAnswer}</button>\n                        )\n                    })}</div>\n                </div>\n                {MainCall()}\n            </React.Fragment>\n\n        )\n    }\n\n    function loadQuestion_DragAndDrop(questionInfoObj: questionInfoObj){\n        console.log(questionInfoObj)\n        questionCounterRef.current++;\n\n        function onDropFunc(e: any){\n            e.preventDefault();\n            const data = e.dataTransfer.getData(\"application/my-app\");\n            e.currentTarget.appendChild(document.getElementById(data));\n        }\n        function onDragOverFunc(e: any){\n            e.preventDefault();\n            e.dataTransfer.dropEffect = \"move\";\n        }\n        function ondragstartFunc(e: any){\n            \n            e.dataTransfer.setData(\"application/my-app\", e.target.id);\n            e.dataTransfer.effectAllowed = \"move\";\n        }\n\n        return(\n            <React.Fragment>\n                <div className='question-DragAndDrop single-question'>\n                    <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}</p>\n                    <div className='single-question-DragAndDrop-words' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}>{questionInfoObj.possibleAnswers.map((singleWord,index)=>{\n                        return(\n                            <button className='single-question-DragAndDrop-singleWord'\n                            key={`${index}DaD-${singleWord}`}\n                            id={`${index}DaD-${singleWord}`}\n                            onDragStart={(e)=>{ondragstartFunc(e)}}\n                            draggable='true'\n                            >\n                            {singleWord}\n                            </button>\n                        )\n                    })}</div>\n                    <div className='single-question-DragAndDrop-location' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}></div>\n                </div>\n                {MainCall()}\n            </React.Fragment>\n\n        )\n    }\n\n    function checkAnswers(){\n        // firstly check DragAndDrop question if it exists\n        if(document.querySelector('.single-question-DragAndDrop-location')){\n            let DragAndDropAnswers;\n            let userDragAndDropAnswers: any = [];\n            let DnDpoints: string = '';\n            document.querySelectorAll('.single-question-DragAndDrop-location .single-question-DragAndDrop-singleWord').forEach((element: any)=>{\n                userDragAndDropAnswers.push(element.innerText)\n            });\n            \n            console.log(props)\n            const questionObject: any = Object.entries(props.props.specificSectionsData.individualLessons).filter(element=>{\n                if(typeof element[1] != 'string')return element;\n            })\n            \n            for(let i = 0; i < questionObject.length; i++){\n                if(questionObject[i][1].questionFormat=='DragAndDrop'){\n                    DragAndDropAnswers = questionObject[i][1];\n                    if(!userDragAndDropAnswers){\n\n                    } else if(userDragAndDropAnswers.length!=questionObject[i][1].correctAnswer.length){\n                        props.errorMessage.setErrorMessage('You must answer all of the questions.')\n                    } else {\n                        userDragAndDropAnswers.map((element: string,index: number)=>{\n                            if(userDragAndDropAnswers[index]!=questionObject[i][1].correctAnswer[index]){\n                                DnDpoints='NO POINTS FOR DND'\n                            }\n                            if(index==userDragAndDropAnswers.length-1 && DnDpoints!='NO POINTS FOR DND'){\n                                DnDpoints='++POINTS FOR DND';\n                            }\n                        })\n                    }\n\n                }\n            }\n            \n        }\n        if(selectedAnswersArr.current.length<props.props.arrayIndividualLessons.length/2){\n            props.errorHandling.setErrorMessage('You must answer all of the questions.')\n        }\n        selectedAnswersArr.current.map((singleAnsweredQuestion,index: number)=>{\n            if(singleAnsweredQuestion.questionObject.correctAnswer.length!=singleAnsweredQuestion.answeredWord.length){\n                props.errorHandling.setErrorMessage('You have skipped an answer inside a question.')\n            } else {\n                console.log('ALL ANSWERS WERE SELECTED')\n            }\n        })\n    }\n    questionCounterRef.current++;\n    return(\n        <React.Fragment>\n        {MainCall()}\n        </React.Fragment>\n    )\n}\n\nexport default LoadQuestions;"],"mappings":"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"},"metadata":{},"sourceType":"module"}