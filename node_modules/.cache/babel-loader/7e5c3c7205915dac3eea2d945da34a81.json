{"ast":null,"code":"const {\n  TextDecoder\n} = require('util');\nconst {\n  TextDecoder: PolyfillTextDecoder,\n  getEncoding\n} = require('text-decoding');\nconst RE_ENCODED = /%([a-fA-F0-9]{2})/g;\nconst RE_PLUS = /\\+/g;\nconst HEX = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\n\n// Node has always utf-8\nconst textDecoders = new Map();\ntextDecoders.set('utf-8', new TextDecoder('utf-8'));\ntextDecoders.set('utf8', textDecoders.get('utf-8'));\nfunction encodedReplacer(match, byte) {\n  return String.fromCharCode(parseInt(byte, 16));\n}\nfunction parseParams(str) {\n  const res = [];\n  let state = 'key';\n  let charset = '';\n  let inquote = false;\n  let escaping = false;\n  let p = 0;\n  let tmp = '';\n  for (var i = 0, len = str.length; i < len; ++i) {\n    // eslint-disable-line no-var\n    const char = str[i];\n    if (char === '\\\\' && inquote) {\n      if (escaping) {\n        escaping = false;\n      } else {\n        escaping = true;\n        continue;\n      }\n    } else if (char === '\"') {\n      if (!escaping) {\n        if (inquote) {\n          inquote = false;\n          state = 'key';\n        } else {\n          inquote = true;\n        }\n        continue;\n      } else {\n        escaping = false;\n      }\n    } else {\n      if (escaping && inquote) {\n        tmp += '\\\\';\n      }\n      escaping = false;\n      if ((state === 'charset' || state === 'lang') && char === \"'\") {\n        if (state === 'charset') {\n          state = 'lang';\n          charset = tmp.substring(1);\n        } else {\n          state = 'value';\n        }\n        tmp = '';\n        continue;\n      } else if (state === 'key' && (char === '*' || char === '=') && res.length) {\n        if (char === '*') {\n          state = 'charset';\n        } else {\n          state = 'value';\n        }\n        res[p] = [tmp, undefined];\n        tmp = '';\n        continue;\n      } else if (!inquote && char === ';') {\n        state = 'key';\n        if (charset) {\n          if (tmp.length) {\n            tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer), 'binary', charset);\n          }\n          charset = '';\n        } else if (tmp.length) {\n          tmp = decodeText(tmp, 'binary', 'utf8');\n        }\n        if (res[p] === undefined) {\n          res[p] = tmp;\n        } else {\n          res[p][1] = tmp;\n        }\n        tmp = '';\n        ++p;\n        continue;\n      } else if (!inquote && (char === ' ' || char === '\\t')) {\n        continue;\n      }\n    }\n    tmp += char;\n  }\n  if (charset && tmp.length) {\n    tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer), 'binary', charset);\n  } else if (tmp) {\n    tmp = decodeText(tmp, 'binary', 'utf8');\n  }\n  if (res[p] === undefined) {\n    if (tmp) {\n      res[p] = tmp;\n    }\n  } else {\n    res[p][1] = tmp;\n  }\n  return res;\n}\nfunction decodeText(text, textEncoding, destEncoding) {\n  if (text) {\n    if (textDecoders.has(destEncoding)) {\n      try {\n        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding));\n      } catch (e) {}\n    } else {\n      try {\n        textDecoders.set(destEncoding, new TextDecoder(destEncoding));\n        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding));\n      } catch (e) {\n        if (getEncoding(destEncoding)) {\n          try {\n            textDecoders.set(destEncoding, new PolyfillTextDecoder(destEncoding));\n            return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding));\n          } catch (e) {}\n        }\n      }\n    }\n  }\n  return text;\n}\nfunction Decoder() {\n  this.buffer = undefined;\n}\nDecoder.prototype.write = function (str) {\n  // Replace '+' with ' ' before decoding\n  str = str.replace(RE_PLUS, ' ');\n  let res = '';\n  let i = 0;\n  let p = 0;\n  const len = str.length;\n  for (; i < len; ++i) {\n    if (this.buffer !== undefined) {\n      if (!HEX[str.charCodeAt(i)]) {\n        res += '%' + this.buffer;\n        this.buffer = undefined;\n        --i; // retry character\n      } else {\n        this.buffer += str[i];\n        ++p;\n        if (this.buffer.length === 2) {\n          res += String.fromCharCode(parseInt(this.buffer, 16));\n          this.buffer = undefined;\n        }\n      }\n    } else if (str[i] === '%') {\n      if (i > p) {\n        res += str.substring(p, i);\n        p = i;\n      }\n      this.buffer = '';\n      ++p;\n    }\n  }\n  if (p < len && this.buffer === undefined) {\n    res += str.substring(p);\n  }\n  return res;\n};\nDecoder.prototype.reset = function () {\n  this.buffer = undefined;\n};\nfunction basename(path) {\n  if (typeof path !== 'string') {\n    return '';\n  }\n  for (var i = path.length - 1; i >= 0; --i) {\n    // eslint-disable-line no-var\n    switch (path.charCodeAt(i)) {\n      case 0x2F: // '/'\n      case 0x5C:\n        // '\\'\n        path = path.slice(i + 1);\n        return path === '..' || path === '.' ? '' : path;\n    }\n  }\n  return path === '..' || path === '.' ? '' : path;\n}\nfunction getLimit(limits, name, defaultLimit) {\n  if (!limits || limits[name] === undefined || limits[name] === null) {\n    return defaultLimit;\n  }\n  if (typeof limits[name] !== 'number' || isNaN(limits[name])) {\n    throw new TypeError('Limit ' + name + ' is not a valid number');\n  }\n  return limits[name];\n}\nmodule.exports = {\n  Decoder,\n  basename,\n  getLimit,\n  parseParams,\n  decodeText\n};","map":{"version":3,"names":["TextDecoder","require","PolyfillTextDecoder","getEncoding","RE_ENCODED","RE_PLUS","HEX","textDecoders","Map","set","get","encodedReplacer","match","byte","String","fromCharCode","parseInt","parseParams","str","res","state","charset","inquote","escaping","p","tmp","i","len","length","char","substring","undefined","decodeText","replace","text","textEncoding","destEncoding","has","decode","Buffer","from","e","Decoder","buffer","prototype","write","charCodeAt","reset","basename","path","slice","getLimit","limits","name","defaultLimit","isNaN","TypeError","module","exports"],"sources":["/Users/justinas/Documents/repos/microgogool/client/node_modules/@fastify/busboy/lib/utils.js"],"sourcesContent":["const { TextDecoder } = require('util')\nconst { TextDecoder: PolyfillTextDecoder, getEncoding } = require('text-decoding')\n\nconst RE_ENCODED = /%([a-fA-F0-9]{2})/g\nconst RE_PLUS = /\\+/g\n\nconst HEX = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0\n]\n\n// Node has always utf-8\nconst textDecoders = new Map()\ntextDecoders.set('utf-8', new TextDecoder('utf-8'))\ntextDecoders.set('utf8', textDecoders.get('utf-8'))\n\nfunction encodedReplacer (match, byte) {\n  return String.fromCharCode(parseInt(byte, 16))\n}\n\nfunction parseParams (str) {\n  const res = []\n  let state = 'key'\n  let charset = ''\n  let inquote = false\n  let escaping = false\n  let p = 0\n  let tmp = ''\n\n  for (var i = 0, len = str.length; i < len; ++i) { // eslint-disable-line no-var\n    const char = str[i]\n    if (char === '\\\\' && inquote) {\n      if (escaping) { escaping = false } else {\n        escaping = true\n        continue\n      }\n    } else if (char === '\"') {\n      if (!escaping) {\n        if (inquote) {\n          inquote = false\n          state = 'key'\n        } else { inquote = true }\n        continue\n      } else { escaping = false }\n    } else {\n      if (escaping && inquote) { tmp += '\\\\' }\n      escaping = false\n      if ((state === 'charset' || state === 'lang') && char === \"'\") {\n        if (state === 'charset') {\n          state = 'lang'\n          charset = tmp.substring(1)\n        } else { state = 'value' }\n        tmp = ''\n        continue\n      } else if (state === 'key' &&\n        (char === '*' || char === '=') &&\n        res.length) {\n        if (char === '*') { state = 'charset' } else { state = 'value' }\n        res[p] = [tmp, undefined]\n        tmp = ''\n        continue\n      } else if (!inquote && char === ';') {\n        state = 'key'\n        if (charset) {\n          if (tmp.length) {\n            tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),\n              'binary',\n              charset)\n          }\n          charset = ''\n        } else if (tmp.length) {\n          tmp = decodeText(tmp, 'binary', 'utf8')\n        }\n        if (res[p] === undefined) { res[p] = tmp } else { res[p][1] = tmp }\n        tmp = ''\n        ++p\n        continue\n      } else if (!inquote && (char === ' ' || char === '\\t')) { continue }\n    }\n    tmp += char\n  }\n  if (charset && tmp.length) {\n    tmp = decodeText(tmp.replace(RE_ENCODED, encodedReplacer),\n      'binary',\n      charset)\n  } else if (tmp) {\n    tmp = decodeText(tmp, 'binary', 'utf8')\n  }\n\n  if (res[p] === undefined) {\n    if (tmp) { res[p] = tmp }\n  } else { res[p][1] = tmp }\n\n  return res\n}\n\nfunction decodeText (text, textEncoding, destEncoding) {\n  if (text) {\n    if (textDecoders.has(destEncoding)) {\n      try {\n        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))\n      } catch (e) { }\n    } else {\n      try {\n        textDecoders.set(destEncoding, new TextDecoder(destEncoding))\n        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))\n      } catch (e) {\n        if (getEncoding(destEncoding)) {\n          try {\n            textDecoders.set(destEncoding, new PolyfillTextDecoder(destEncoding))\n            return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))\n          } catch (e) { }\n        }\n      }\n    }\n  }\n  return text\n}\n\nfunction Decoder () {\n  this.buffer = undefined\n}\nDecoder.prototype.write = function (str) {\n  // Replace '+' with ' ' before decoding\n  str = str.replace(RE_PLUS, ' ')\n  let res = ''\n  let i = 0; let p = 0; const len = str.length\n  for (; i < len; ++i) {\n    if (this.buffer !== undefined) {\n      if (!HEX[str.charCodeAt(i)]) {\n        res += '%' + this.buffer\n        this.buffer = undefined\n        --i // retry character\n      } else {\n        this.buffer += str[i]\n        ++p\n        if (this.buffer.length === 2) {\n          res += String.fromCharCode(parseInt(this.buffer, 16))\n          this.buffer = undefined\n        }\n      }\n    } else if (str[i] === '%') {\n      if (i > p) {\n        res += str.substring(p, i)\n        p = i\n      }\n      this.buffer = ''\n      ++p\n    }\n  }\n  if (p < len && this.buffer === undefined) { res += str.substring(p) }\n  return res\n}\nDecoder.prototype.reset = function () {\n  this.buffer = undefined\n}\n\nfunction basename (path) {\n  if (typeof path !== 'string') { return '' }\n  for (var i = path.length - 1; i >= 0; --i) { // eslint-disable-line no-var\n    switch (path.charCodeAt(i)) {\n      case 0x2F: // '/'\n      case 0x5C: // '\\'\n        path = path.slice(i + 1)\n        return (path === '..' || path === '.' ? '' : path)\n    }\n  }\n  return (path === '..' || path === '.' ? '' : path)\n}\n\nfunction getLimit (limits, name, defaultLimit) {\n  if (\n    !limits ||\n    limits[name] === undefined ||\n    limits[name] === null\n  ) { return defaultLimit }\n\n  if (\n    typeof limits[name] !== 'number' ||\n    isNaN(limits[name])\n  ) { throw new TypeError('Limit ' + name + ' is not a valid number') }\n\n  return limits[name]\n}\n\nmodule.exports = {\n  Decoder,\n  basename,\n  getLimit,\n  parseParams,\n  decodeText\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}