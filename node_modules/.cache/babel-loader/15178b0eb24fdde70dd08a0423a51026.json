{"ast":null,"code":"var _jsxFileName = \"/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/SectionLessons.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SectionLessons(props) {\n  _s();\n  const lessonsDivRef = useRef(null);\n  const [arrayIndividualLessons, setArrayIndividualLessons] = useState(Object.entries(props.specificSectionsData.individualLessons));\n  const selectedAnswersArr = useRef([]);\n  const [errorMessage, setErrorMessage] = useState('');\n  const questionCounterRef = useRef(0);\n  useEffect(() => {\n    setTimeout(() => {\n      if (lessonsDivRef.current != null) {\n        lessonsDivRef.current.classList.add('lessons-div');\n        setTimeout(() => {\n          if (lessonsDivRef.current != null) {\n            lessonsDivRef.current.classList.remove('lessons-div-fadeInAnim');\n          }\n        }, 2000);\n      }\n    }, 100);\n  }, []);\n\n  // useEffect(()=>{\n  //     console.log(errorMessage);\n  //     if(errorMessage!=''){\n  //         setTimeout(() => {\n  //             setErrorMessage('');\n  //         }, 2000);\n  //     }\n  // },[errorMessage])\n\n  let lessonNumber = 0;\n  // function loadQuestions(arrayIndividualLessons: any): React.ReactElement | null{\n\n  //     if(!arrayIndividualLessons[questionCounterRef.current]){\n  //         return null;\n  //         // no more lessons in the array left\n  //     } else {\n  //         // still elements left in the array\n  //         if(arrayIndividualLessons[questionCounterRef.current][1].title){\n  //             // the element (arrayIndividualLessons[questionsCounterRef.current][1]) is question element - its second array elements contains info about questions\n  //             lessonNumber = arrayIndividualLessons[questionCounterRef.current][0].slice(6,7);\n  //             if(arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectOne'){\n  //                 return LoadQuestion_SelectOne(arrayIndividualLessons[questionCounterRef.current][1]);\n  //             }\n  //             if(arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectMultiple'){\n  //                 return LoadQuestion_SelectMultiple(arrayIndividualLessons[questionCounterRef.current][1]);\n  //             }\n  //             if(arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='DragAndDrop'){\n  //                 return loadQuestion_DragAndDrop(arrayIndividualLessons[questionCounterRef.current][1]);\n  //             }\n  //         }\n  //     }\n\n  //     questionCounterRef.current++;\n  //     return(\n  //         <React.Fragment>\n  //         {loadQuestions(arrayIndividualLessons)}\n  //         </React.Fragment>\n  //     )\n  // }\n\n  // function LoadQuestion_SelectOne(questionInfoObj: questionInfoObj){\n  //     questionCounterRef.current++;\n\n  //     const answersSelected = useRef<HTMLElement[]>([]);\n\n  //     const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n\n  //     function answer_SO_Selected(id: string, title: string){\n  //     // document.getElementById(`${index}SM-${singleAnswer}`)?.classList.add('singlePossibleAnswer-selected')\n\n  //         // clicked element\n  //         const selectedElement = document.getElementById(id);\n\n  //         if(selectedElement==null){\n  //             return;\n  //         }\n  //         // if user clicks the same answer, remove if from selected answers array and remove its answered class\n  //         if(answersSelected.current.includes(selectedElement)){\n  //             answersSelected.current.map((element,index)=>{\n  //                 if(element==selectedElement){\n  //                     answersSelected.current.splice(index,1);\n  //                     selectedElement.classList.remove('singlePossibleAnswer-selected');\n  //                 }\n  //             })\n  //             selectedAnswersArr.current.map((singleAnsweredQuestion,index)=>{\n  //                 if(title==singleAnsweredQuestion.questionTitle){\n  //                     const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n  //                     console.log(wordIndex)\n  //                     singleAnsweredQuestion.answeredWord.splice(wordIndex,1)\n  //                 }\n  //             })\n  //             return;\n  //         }\n  //         // else, push the new clicked value to the array and add the class of selected answer\n  //         answersSelected.current.push(selectedElement);\n  //         selectedElement.classList.add('singlePossibleAnswer-selected');\n\n  //         // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n  //         if(answersSelected.current.length>possibleAnswersNum){\n  //             const removedElement = answersSelected.current.shift();\n  //             if(removedElement==null)return;\n  //             removedElement.classList.remove('singlePossibleAnswer-selected');\n  //         }\n  //         const clickedButtonInfo = {\n  //             questionTitle: title,\n  //             answeredWord: [answersSelected.current[answersSelected.current.length-1].id.split('-')[1]],\n  //             questionObject: questionInfoObj\n  //         }\n  //         if(selectedAnswersArr.current.length==0){\n  //             selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo];\n  //             console.log(selectedAnswersArr.current);\n\n  //         } else{\n  //             for(let index = 0; index < selectedAnswersArr.current.length; index++){\n  //                 console.log(selectedAnswersArr.current[index].questionTitle);\n  //                 console.log(clickedButtonInfo.questionTitle);\n  //                 console.log('-----')\n  //                 if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n  //                     if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n  //                         selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n  //                     } else {\n  //                         selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n  //                         selectedAnswersArr.current[index].answeredWord.shift();\n  //                     }\n  //                     console.log(selectedAnswersArr.current);\n  //                     return;\n  //                 } else if(index==selectedAnswersArr.current.length-1){\n  //                     selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo]\n  //                     console.log(selectedAnswersArr.current);\n  //                 }\n  //             }\n\n  //         }\n\n  //     }\n\n  //     questionCounterRef.current++;\n  //     return(\n  //         <React.Fragment>\n  //         <div className='question-SelectOne single-question'>\n  //             <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n  //             <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n  //                 return(\n  //                     <button className='single-question-possibleAnswers-singleAnswer' \n  //                     key={`${index}SO-${singleAnswer}`}\n  //                     id={`${index}SO-${singleAnswer}`}\n  //                     onClick={()=>{answer_SO_Selected(`${index}SO-${singleAnswer}`, questionInfoObj.title)}}\n  //                     >\n  //                     {singleAnswer}</button>\n  //                 )\n  //             })}</div>\n  //         </div>\n  //         {loadQuestions(arrayIndividualLessons)}\n  //         </React.Fragment>\n\n  //     )\n\n  // }\n  // function LoadQuestion_SelectMultiple(questionInfoObj: questionInfoObj){\n\n  //     questionCounterRef.current++;\n\n  //     const answersSelected = useRef<HTMLElement[]>([]);\n\n  //     const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n\n  //     function answer_SM_Selected(id: string, title: string){\n  //         // clicked element\n  //         const selectedElement = document.getElementById(id);\n\n  //         if(selectedElement==null){\n  //             return;\n  //         }\n  //         // if user clicks the same answer, remove it from selected answers array and remove its answered class\n  //         if(answersSelected.current.includes(selectedElement)){\n  //             answersSelected.current.map((element,index)=>{\n  //                 if(element==selectedElement){\n  //                     answersSelected.current.splice(index,1);\n  //                     selectedElement.classList.remove('singlePossibleAnswer-selected');\n  //                 }\n  //             })\n  //             selectedAnswersArr.current.map((singleAnsweredQuestion,index)=>{\n  //                 if(title==singleAnsweredQuestion.questionTitle){\n  //                     const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n  //                     console.log(wordIndex)\n  //                     singleAnsweredQuestion.answeredWord.splice(wordIndex,1)\n  //                 }\n  //             })\n  //             return;\n  //         }\n  //         // else, push the new clicked value to the array and add the class of selected answer\n  //         answersSelected.current.push(selectedElement);\n  //         selectedElement.classList.add('singlePossibleAnswer-selected');\n\n  //         // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n  //         if(answersSelected.current.length>possibleAnswersNum){\n  //             const removedElement = answersSelected.current.shift();\n  //             if(removedElement==null)return;\n  //             removedElement.classList.remove('singlePossibleAnswer-selected');\n  //         }\n  //         const clickedButtonInfo = {\n  //             questionTitle: title,\n  //             answeredWord: [answersSelected.current[answersSelected.current.length-1].id.split('-')[1]],\n  //             questionObject: questionInfoObj\n  //         }\n  //         if(selectedAnswersArr.current.length==0){\n  //             selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo];\n  //         } else{\n  //             for(let index = 0; index < selectedAnswersArr.current.length; index++){\n  //                 if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n  //                     if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n  //                         selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n  //                     } else {\n  //                         selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n  //                         selectedAnswersArr.current[index].answeredWord.shift();\n  //                     }\n  //                     return;\n  //                 } else if(index==selectedAnswersArr.current.length-1){\n  //                     selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo]\n  //                 }\n  //             }\n\n  //             console.log(selectedAnswersArr.current);\n\n  //         }\n  //     }\n\n  //     return(\n  //         <React.Fragment>\n  //             <div className='question-SelectMultiple single-question'>\n  //                 <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n  //                 <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n  //                     return(\n  //                         <button className='single-question-possibleAnswers-singleAnswer' \n  //                         key={`${index}SM-${singleAnswer}`}\n  //                         id={`${index}SM-${singleAnswer}`}\n  //                         onClick={()=>{answer_SM_Selected(`${index}SM-${singleAnswer}`, questionInfoObj.title)}}\n  //                         >\n  //                         {singleAnswer}</button>\n  //                     )\n  //                 })}</div>\n  //             </div>\n  //             {loadQuestions(arrayIndividualLessons)}\n  //         </React.Fragment>\n\n  //     )\n  // }\n\n  // function loadQuestion_DragAndDrop(questionInfoObj: questionInfoObj){\n  //     questionCounterRef.current++;\n\n  //     function onDropFunc(e: any){\n  //         e.preventDefault();\n  //         const data = e.dataTransfer.getData(\"application/my-app\");\n  //         e.currentTarget.appendChild(document.getElementById(data));\n  //     }\n  //     function onDragOverFunc(e: any){\n  //         e.preventDefault();\n  //         e.dataTransfer.dropEffect = \"move\";\n  //     }\n  //     function ondragstartFunc(e: any){\n\n  //         e.dataTransfer.setData(\"application/my-app\", e.target.id);\n  //         e.dataTransfer.effectAllowed = \"move\";\n  //     }\n\n  //     return(\n  //         <React.Fragment>\n  //             <div className='question-DragAndDrop single-question'>\n  //                 <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}</p>\n  //                 <div className='single-question-DragAndDrop-words' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}>{questionInfoObj.possibleAnswers.map((singleWord,index)=>{\n  //                     return(\n  //                         <button className='single-question-DragAndDrop-singleWord'\n  //                         key={`${index}DaD-${singleWord}`}\n  //                         id={`${index}DaD-${singleWord}`}\n  //                         onDragStart={(e)=>{ondragstartFunc(e)}}\n  //                         draggable='true'\n  //                         >\n  //                         {singleWord}\n  //                         </button>\n  //                     )\n  //                 })}</div>\n  //                 <div className='single-question-DragAndDrop-location' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}></div>\n  //             </div>\n  //             {loadQuestions(arrayIndividualLessons)}\n  //         </React.Fragment>\n\n  //     )\n  // }\n\n  function returnToMain() {\n    var _lessonsDivRef$curren, _lessonsDivRef$curren2;\n    const mainPath = document.querySelector('.main-path');\n    (_lessonsDivRef$curren = lessonsDivRef.current) === null || _lessonsDivRef$curren === void 0 ? void 0 : _lessonsDivRef$curren.classList.add('lessons-div-fadeOutAnim');\n    (_lessonsDivRef$curren2 = lessonsDivRef.current) === null || _lessonsDivRef$curren2 === void 0 ? void 0 : _lessonsDivRef$curren2.classList.remove('lessons-div');\n    setTimeout(() => {\n      props.goBack.loadCenterPathContent('mainPath');\n    }, 1000);\n  }\n  function checkAnswers() {\n    setErrorMessage('xd');\n    return;\n    // firstly check DragAndDrop question if it exists\n    if (document.querySelector('.single-question-DragAndDrop-location')) {\n      let DragAndDropAnswers;\n      let userDragAndDropAnswers = [];\n      let DnDpoints = '';\n      document.querySelectorAll('.single-question-DragAndDrop-location .single-question-DragAndDrop-singleWord').forEach(element => {\n        userDragAndDropAnswers.push(element.innerText);\n      });\n      const questionObject = Object.entries(props.specificSectionsData.individualLessons).filter(element => {\n        if (typeof element[1] != 'string') return element;\n      });\n      for (let i = 0; i < questionObject.length; i++) {\n        if (questionObject[i][1].questionFormat == 'DragAndDrop') {\n          DragAndDropAnswers = questionObject[i][1];\n          if (!userDragAndDropAnswers) {} else if (userDragAndDropAnswers.length != questionObject[i][1].correctAnswer.length) {\n            setErrorMessage('You must answer all of the questions.');\n          } else {\n            userDragAndDropAnswers.map((element, index) => {\n              if (userDragAndDropAnswers[index] != questionObject[i][1].correctAnswer[index]) {\n                DnDpoints = 'NO POINTS FOR DND';\n              }\n              if (index == userDragAndDropAnswers.length - 1 && DnDpoints != 'NO POINTS FOR DND') {\n                DnDpoints = '++POINTS FOR DND';\n              }\n            });\n          }\n        }\n      }\n    }\n    if (selectedAnswersArr.current.length < arrayIndividualLessons.length / 2) {\n      setErrorMessage('You must answer all of the questions.');\n    }\n    selectedAnswersArr.current.map((singleAnsweredQuestion, index) => {\n      if (singleAnsweredQuestion.questionObject.correctAnswer.length != singleAnsweredQuestion.answeredWord.length) {\n        setErrorMessage('You have skipped an answer inside a question.');\n      } else {\n        console.log('ALL ANSWERS WERE SELECTED');\n      }\n    });\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"lessons-div-fadeInAnim\",\n      ref: lessonsDivRef,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"single-lesson\",\n        children: [loadQuestions(arrayIndividualLessons), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-lesson-buttons\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"lesson-answer-submit\",\n            onClick: () => {\n              checkAnswers();\n            },\n            children: \"Submit the answers\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 401,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"lesson-go-back\",\n            onClick: () => {\n              returnToMain();\n            },\n            children: \"Go back\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 402,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 400,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 395,\n    columnNumber: 9\n  }, this);\n}\n_s(SectionLessons, \"Bb9dgnmQoCONdAPBVomJDFvHhT4=\");\n_c = SectionLessons;\nexport default SectionLessons;\nvar _c;\n$RefreshReg$(_c, \"SectionLessons\");","map":{"version":3,"names":["React","useEffect","useRef","useState","SectionLessons","props","lessonsDivRef","arrayIndividualLessons","setArrayIndividualLessons","Object","entries","specificSectionsData","individualLessons","selectedAnswersArr","errorMessage","setErrorMessage","questionCounterRef","setTimeout","current","classList","add","remove","lessonNumber","returnToMain","mainPath","document","querySelector","goBack","loadCenterPathContent","checkAnswers","DragAndDropAnswers","userDragAndDropAnswers","DnDpoints","querySelectorAll","forEach","element","push","innerText","questionObject","filter","i","length","questionFormat","correctAnswer","map","index","singleAnsweredQuestion","answeredWord","console","log","loadQuestions"],"sources":["/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/SectionLessons.tsx"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport ErrorComponent from '../ErrorComponent';\n\n\ninterface props{\n    sectionNum: number,\n    specificSectionsData: {\n        secNum: number, secDescr: string, individualLessons: {\n            correctAnswer?: string[],\n            possibleAnswers?: string[],\n            questionFormat?: string,\n            title?: string\n        }\n    }\n    goBack: {\n        loadCenterPathContent: React.Dispatch<React.SetStateAction<string>>\n    }\n}\ninterface questionInfoObj{\n    correctAnswer: string[],\n    possibleAnswers: string[],\n    questionFormat: string,\n    title: string\n}\ninterface selectedAnswersArrInterface{\n        questionTitle: string,\n        answeredWord: string[],\n        questionObject: any\n}\nfunction SectionLessons(props: props) {\n\n    const lessonsDivRef = useRef<HTMLDivElement>(null);\n\n    const [arrayIndividualLessons, setArrayIndividualLessons] = useState<any>(Object.entries(props.specificSectionsData.individualLessons));\n    const selectedAnswersArr = useRef<selectedAnswersArrInterface[]>([]);\n    const [errorMessage, setErrorMessage] = useState<any>('');\n\n    const questionCounterRef = useRef<number>(0);\n\n    useEffect(()=>{\n        setTimeout(() => {\n            if(lessonsDivRef.current!=null){\n                lessonsDivRef.current.classList.add('lessons-div');\n                setTimeout(() => {\n                    if(lessonsDivRef.current!=null){\n                        lessonsDivRef.current.classList.remove('lessons-div-fadeInAnim');\n                    }\n                }, 2000);\n            }   \n        }, 100);\n\n\n    },[]);\n\n    // useEffect(()=>{\n    //     console.log(errorMessage);\n    //     if(errorMessage!=''){\n    //         setTimeout(() => {\n    //             setErrorMessage('');\n    //         }, 2000);\n    //     }\n    // },[errorMessage])\n\n    let lessonNumber = 0;\n    // function loadQuestions(arrayIndividualLessons: any): React.ReactElement | null{\n\n    //     if(!arrayIndividualLessons[questionCounterRef.current]){\n    //         return null;\n    //         // no more lessons in the array left\n    //     } else {\n    //         // still elements left in the array\n    //         if(arrayIndividualLessons[questionCounterRef.current][1].title){\n    //             // the element (arrayIndividualLessons[questionsCounterRef.current][1]) is question element - its second array elements contains info about questions\n    //             lessonNumber = arrayIndividualLessons[questionCounterRef.current][0].slice(6,7);\n    //             if(arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectOne'){\n    //                 return LoadQuestion_SelectOne(arrayIndividualLessons[questionCounterRef.current][1]);\n    //             }\n    //             if(arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectMultiple'){\n    //                 return LoadQuestion_SelectMultiple(arrayIndividualLessons[questionCounterRef.current][1]);\n    //             }\n    //             if(arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='DragAndDrop'){\n    //                 return loadQuestion_DragAndDrop(arrayIndividualLessons[questionCounterRef.current][1]);\n    //             }\n    //         }\n    //     }\n\n\n\n    //     questionCounterRef.current++;\n    //     return(\n    //         <React.Fragment>\n    //         {loadQuestions(arrayIndividualLessons)}\n    //         </React.Fragment>\n    //     )\n    // }\n\n    // function LoadQuestion_SelectOne(questionInfoObj: questionInfoObj){\n    //     questionCounterRef.current++;\n\n    //     const answersSelected = useRef<HTMLElement[]>([]);\n\n    //     const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n\n    //     function answer_SO_Selected(id: string, title: string){\n    //     // document.getElementById(`${index}SM-${singleAnswer}`)?.classList.add('singlePossibleAnswer-selected')\n\n    //         // clicked element\n    //         const selectedElement = document.getElementById(id);\n\n    //         if(selectedElement==null){\n    //             return;\n    //         }\n    //         // if user clicks the same answer, remove if from selected answers array and remove its answered class\n    //         if(answersSelected.current.includes(selectedElement)){\n    //             answersSelected.current.map((element,index)=>{\n    //                 if(element==selectedElement){\n    //                     answersSelected.current.splice(index,1);\n    //                     selectedElement.classList.remove('singlePossibleAnswer-selected');\n    //                 }\n    //             })\n    //             selectedAnswersArr.current.map((singleAnsweredQuestion,index)=>{\n    //                 if(title==singleAnsweredQuestion.questionTitle){\n    //                     const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n    //                     console.log(wordIndex)\n    //                     singleAnsweredQuestion.answeredWord.splice(wordIndex,1)\n    //                 }\n    //             })\n    //             return;\n    //         }\n    //         // else, push the new clicked value to the array and add the class of selected answer\n    //         answersSelected.current.push(selectedElement);\n    //         selectedElement.classList.add('singlePossibleAnswer-selected');\n\n    //         // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n    //         if(answersSelected.current.length>possibleAnswersNum){\n    //             const removedElement = answersSelected.current.shift();\n    //             if(removedElement==null)return;\n    //             removedElement.classList.remove('singlePossibleAnswer-selected');\n    //         }\n    //         const clickedButtonInfo = {\n    //             questionTitle: title,\n    //             answeredWord: [answersSelected.current[answersSelected.current.length-1].id.split('-')[1]],\n    //             questionObject: questionInfoObj\n    //         }\n    //         if(selectedAnswersArr.current.length==0){\n    //             selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo];\n    //             console.log(selectedAnswersArr.current);\n\n    //         } else{\n    //             for(let index = 0; index < selectedAnswersArr.current.length; index++){\n    //                 console.log(selectedAnswersArr.current[index].questionTitle);\n    //                 console.log(clickedButtonInfo.questionTitle);\n    //                 console.log('-----')\n    //                 if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n    //                     if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n    //                         selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n    //                     } else {\n    //                         selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n    //                         selectedAnswersArr.current[index].answeredWord.shift();\n    //                     }\n    //                     console.log(selectedAnswersArr.current);\n    //                     return;\n    //                 } else if(index==selectedAnswersArr.current.length-1){\n    //                     selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo]\n    //                     console.log(selectedAnswersArr.current);\n    //                 }\n    //             }\n\n    //         }\n\n        \n\n    //     }\n\n    //     questionCounterRef.current++;\n    //     return(\n    //         <React.Fragment>\n    //         <div className='question-SelectOne single-question'>\n    //             <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n    //             <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n    //                 return(\n    //                     <button className='single-question-possibleAnswers-singleAnswer' \n    //                     key={`${index}SO-${singleAnswer}`}\n    //                     id={`${index}SO-${singleAnswer}`}\n    //                     onClick={()=>{answer_SO_Selected(`${index}SO-${singleAnswer}`, questionInfoObj.title)}}\n    //                     >\n    //                     {singleAnswer}</button>\n    //                 )\n    //             })}</div>\n    //         </div>\n    //         {loadQuestions(arrayIndividualLessons)}\n    //         </React.Fragment>\n\n    //     )\n\n    // }\n    // function LoadQuestion_SelectMultiple(questionInfoObj: questionInfoObj){\n\n    //     questionCounterRef.current++;\n\n    //     const answersSelected = useRef<HTMLElement[]>([]);\n\n    //     const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n\n\n    //     function answer_SM_Selected(id: string, title: string){\n    //         // clicked element\n    //         const selectedElement = document.getElementById(id);\n\n    //         if(selectedElement==null){\n    //             return;\n    //         }\n    //         // if user clicks the same answer, remove it from selected answers array and remove its answered class\n    //         if(answersSelected.current.includes(selectedElement)){\n    //             answersSelected.current.map((element,index)=>{\n    //                 if(element==selectedElement){\n    //                     answersSelected.current.splice(index,1);\n    //                     selectedElement.classList.remove('singlePossibleAnswer-selected');\n    //                 }\n    //             })\n    //             selectedAnswersArr.current.map((singleAnsweredQuestion,index)=>{\n    //                 if(title==singleAnsweredQuestion.questionTitle){\n    //                     const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n    //                     console.log(wordIndex)\n    //                     singleAnsweredQuestion.answeredWord.splice(wordIndex,1)\n    //                 }\n    //             })\n    //             return;\n    //         }\n    //         // else, push the new clicked value to the array and add the class of selected answer\n    //         answersSelected.current.push(selectedElement);\n    //         selectedElement.classList.add('singlePossibleAnswer-selected');\n\n    //         // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n    //         if(answersSelected.current.length>possibleAnswersNum){\n    //             const removedElement = answersSelected.current.shift();\n    //             if(removedElement==null)return;\n    //             removedElement.classList.remove('singlePossibleAnswer-selected');\n    //         }\n    //         const clickedButtonInfo = {\n    //             questionTitle: title,\n    //             answeredWord: [answersSelected.current[answersSelected.current.length-1].id.split('-')[1]],\n    //             questionObject: questionInfoObj\n    //         }\n    //         if(selectedAnswersArr.current.length==0){\n    //             selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo];\n    //         } else{\n    //             for(let index = 0; index < selectedAnswersArr.current.length; index++){\n    //                 if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n    //                     if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n    //                         selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n    //                     } else {\n    //                         selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n    //                         selectedAnswersArr.current[index].answeredWord.shift();\n    //                     }\n    //                     return;\n    //                 } else if(index==selectedAnswersArr.current.length-1){\n    //                     selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo]\n    //                 }\n    //             }\n\n    //             console.log(selectedAnswersArr.current);\n\n    //         }\n    //     }\n\n    //     return(\n    //         <React.Fragment>\n    //             <div className='question-SelectMultiple single-question'>\n    //                 <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n    //                 <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n    //                     return(\n    //                         <button className='single-question-possibleAnswers-singleAnswer' \n    //                         key={`${index}SM-${singleAnswer}`}\n    //                         id={`${index}SM-${singleAnswer}`}\n    //                         onClick={()=>{answer_SM_Selected(`${index}SM-${singleAnswer}`, questionInfoObj.title)}}\n    //                         >\n    //                         {singleAnswer}</button>\n    //                     )\n    //                 })}</div>\n    //             </div>\n    //             {loadQuestions(arrayIndividualLessons)}\n    //         </React.Fragment>\n\n    //     )\n    // }\n\n\n    // function loadQuestion_DragAndDrop(questionInfoObj: questionInfoObj){\n    //     questionCounterRef.current++;\n\n\n    //     function onDropFunc(e: any){\n    //         e.preventDefault();\n    //         const data = e.dataTransfer.getData(\"application/my-app\");\n    //         e.currentTarget.appendChild(document.getElementById(data));\n    //     }\n    //     function onDragOverFunc(e: any){\n    //         e.preventDefault();\n    //         e.dataTransfer.dropEffect = \"move\";\n    //     }\n    //     function ondragstartFunc(e: any){\n            \n    //         e.dataTransfer.setData(\"application/my-app\", e.target.id);\n    //         e.dataTransfer.effectAllowed = \"move\";\n    //     }\n\n    //     return(\n    //         <React.Fragment>\n    //             <div className='question-DragAndDrop single-question'>\n    //                 <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}</p>\n    //                 <div className='single-question-DragAndDrop-words' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}>{questionInfoObj.possibleAnswers.map((singleWord,index)=>{\n    //                     return(\n    //                         <button className='single-question-DragAndDrop-singleWord'\n    //                         key={`${index}DaD-${singleWord}`}\n    //                         id={`${index}DaD-${singleWord}`}\n    //                         onDragStart={(e)=>{ondragstartFunc(e)}}\n    //                         draggable='true'\n    //                         >\n    //                         {singleWord}\n    //                         </button>\n    //                     )\n    //                 })}</div>\n    //                 <div className='single-question-DragAndDrop-location' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}></div>\n    //             </div>\n    //             {loadQuestions(arrayIndividualLessons)}\n    //         </React.Fragment>\n\n    //     )\n    // }\n\n\n    function returnToMain(){\n        const mainPath = document.querySelector('.main-path') as HTMLElement;\n        lessonsDivRef.current?.classList.add('lessons-div-fadeOutAnim');\n        lessonsDivRef.current?.classList.remove('lessons-div');\n        setTimeout(() => {\n            props.goBack.loadCenterPathContent('mainPath');\n        }, 1000);\n    }\n\n    function checkAnswers(){\n        setErrorMessage('xd');\n        return;\n        // firstly check DragAndDrop question if it exists\n        if(document.querySelector('.single-question-DragAndDrop-location')){\n            let DragAndDropAnswers;\n            let userDragAndDropAnswers: any = [];\n            let DnDpoints: string = '';\n            document.querySelectorAll('.single-question-DragAndDrop-location .single-question-DragAndDrop-singleWord').forEach((element: any)=>{\n                userDragAndDropAnswers.push(element.innerText)\n            });\n            \n\n            const questionObject: any = Object.entries(props.specificSectionsData.individualLessons).filter(element=>{\n                if(typeof element[1] != 'string')return element;\n            })\n            \n            for(let i = 0; i < questionObject.length; i++){\n                if(questionObject[i][1].questionFormat=='DragAndDrop'){\n                    DragAndDropAnswers = questionObject[i][1];\n                    if(!userDragAndDropAnswers){\n\n                    } else if(userDragAndDropAnswers.length!=questionObject[i][1].correctAnswer.length){\n                        setErrorMessage('You must answer all of the questions.')\n                    } else {\n                        userDragAndDropAnswers.map((element: string,index: number)=>{\n                            if(userDragAndDropAnswers[index]!=questionObject[i][1].correctAnswer[index]){\n                                DnDpoints='NO POINTS FOR DND'\n                            }\n                            if(index==userDragAndDropAnswers.length-1 && DnDpoints!='NO POINTS FOR DND'){\n                                DnDpoints='++POINTS FOR DND';\n                            }\n                        })\n                    }\n\n                }\n            }\n            \n        }\n        if(selectedAnswersArr.current.length<arrayIndividualLessons.length/2){\n            setErrorMessage('You must answer all of the questions.')\n        }\n        selectedAnswersArr.current.map((singleAnsweredQuestion,index: number)=>{\n            if(singleAnsweredQuestion.questionObject.correctAnswer.length!=singleAnsweredQuestion.answeredWord.length){\n                setErrorMessage('You have skipped an answer inside a question.')\n            } else {\n                console.log('ALL ANSWERS WERE SELECTED')\n            }\n        })\n    }\n\n\n    return (\n        <React.Fragment>\n            <div className='lessons-div-fadeInAnim' ref={lessonsDivRef}>\n                <div className='single-lesson'>\n            {/* {errorMessage!='' ? <ErrorComponent message={errorMessage} /> : null} */}\n                    {loadQuestions(arrayIndividualLessons)}\n                <div className='single-lesson-buttons'>\n                    <button className='lesson-answer-submit' onClick={()=>{checkAnswers()}}>Submit the answers</button>\n                    <button className='lesson-go-back' onClick={()=>{returnToMain()}}>Go back</button>\n                </div>\n                </div>\n            </div>\n        </React.Fragment>\n\n    );\n}\n\nexport default SectionLessons;"],"mappings":";;AAAA,OAAOA,KAAK,IAAiBC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAAC;AA6BxE,SAASC,cAAc,CAACC,KAAY,EAAE;EAAA;EAElC,MAAMC,aAAa,GAAGJ,MAAM,CAAiB,IAAI,CAAC;EAElD,MAAM,CAACK,sBAAsB,EAAEC,yBAAyB,CAAC,GAAGL,QAAQ,CAAMM,MAAM,CAACC,OAAO,CAACL,KAAK,CAACM,oBAAoB,CAACC,iBAAiB,CAAC,CAAC;EACvI,MAAMC,kBAAkB,GAAGX,MAAM,CAAgC,EAAE,CAAC;EACpE,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAM,EAAE,CAAC;EAEzD,MAAMa,kBAAkB,GAAGd,MAAM,CAAS,CAAC,CAAC;EAE5CD,SAAS,CAAC,MAAI;IACVgB,UAAU,CAAC,MAAM;MACb,IAAGX,aAAa,CAACY,OAAO,IAAE,IAAI,EAAC;QAC3BZ,aAAa,CAACY,OAAO,CAACC,SAAS,CAACC,GAAG,CAAC,aAAa,CAAC;QAClDH,UAAU,CAAC,MAAM;UACb,IAAGX,aAAa,CAACY,OAAO,IAAE,IAAI,EAAC;YAC3BZ,aAAa,CAACY,OAAO,CAACC,SAAS,CAACE,MAAM,CAAC,wBAAwB,CAAC;UACpE;QACJ,CAAC,EAAE,IAAI,CAAC;MACZ;IACJ,CAAC,EAAE,GAAG,CAAC;EAGX,CAAC,EAAC,EAAE,CAAC;;EAEL;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIC,YAAY,GAAG,CAAC;EACpB;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAIA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAEA;;EAEA;;EAEA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAIA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;;EAEA;;EAEA;;EAGA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAGA;EACA;;EAGA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;;EAGA,SAASC,YAAY,GAAE;IAAA;IACnB,MAAMC,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,YAAY,CAAgB;IACpE,yBAAApB,aAAa,CAACY,OAAO,0DAArB,sBAAuBC,SAAS,CAACC,GAAG,CAAC,yBAAyB,CAAC;IAC/D,0BAAAd,aAAa,CAACY,OAAO,2DAArB,uBAAuBC,SAAS,CAACE,MAAM,CAAC,aAAa,CAAC;IACtDJ,UAAU,CAAC,MAAM;MACbZ,KAAK,CAACsB,MAAM,CAACC,qBAAqB,CAAC,UAAU,CAAC;IAClD,CAAC,EAAE,IAAI,CAAC;EACZ;EAEA,SAASC,YAAY,GAAE;IACnBd,eAAe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"},"metadata":{},"sourceType":"module"}