{"ast":null,"code":"var _jsxFileName = \"/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/LoadQuestions.tsx\",\n  _s3 = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LoadQuestions(props) {\n  _s3();\n  var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n  const questionCounterRef = {\n    current: -1\n  };\n  let lessonNumber = 0;\n  const selectedAnswersArr = useRef([]);\n  useEffect(() => {\n    if (props.handleError.errorHandling != false) {\n      checkAnswers();\n    }\n  }, [props.handleError.errorHandling]);\n  function MainCall() {\n    if (!props.props.arrayIndividualLessons[questionCounterRef.current]) {\n      if (questionCounterRef.current >= props.props.arrayIndividualLessons.length) return;else {\n        questionCounterRef.current++;\n        return MainCall();\n      }\n    } else {\n      // still elements left in the array\n      if (props.props.arrayIndividualLessons[questionCounterRef.current][1].title) {\n        // the element (props.props.arrayIndividualLessons[questionsCounterRef.current][1]) is question element - its second array elements contains info about questions\n        lessonNumber = props.props.arrayIndividualLessons[questionCounterRef.current][0].slice(6, 7);\n        if (props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat == 'SelectOne') {\n          return LoadQuestion_SelectOne(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n        }\n        if (props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat == 'SelectMultiple') {\n          return LoadQuestion_SelectMultiple(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n        }\n        if (props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat == 'DragAndDrop') {\n          return loadQuestion_DragAndDrop(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n        }\n      } else {\n        questionCounterRef.current++;\n        return MainCall();\n      }\n    }\n  }\n  function LoadQuestion_SelectOne(questionInfoObj) {\n    _s();\n    questionCounterRef.current++;\n    const answersSelectedSO = useRef([]);\n    const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n    function answer_SO_Selected(id, title) {\n      // clicked element\n      const selectedElement = document.getElementById(id);\n      if (selectedElement == null) {\n        return;\n      }\n      // if user clicks the same answer, remove if from selected answers array and remove its answered class\n      if (answersSelectedSO.current.includes(selectedElement)) {\n        answersSelectedSO.current.map((element, index) => {\n          if (element == selectedElement) {\n            answersSelectedSO.current.splice(index, 1);\n            selectedElement.classList.remove('singlePossibleAnswer-selected');\n          }\n        });\n        selectedAnswersArr.current.map((singleAnsweredQuestion, index) => {\n          if (title == singleAnsweredQuestion.questionTitle) {\n            const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n            singleAnsweredQuestion.answeredWord.splice(wordIndex, 1);\n          }\n        });\n        return;\n      }\n      // else, push the new clicked value to the array and add the class of selected answer\n      answersSelectedSO.current.push(selectedElement);\n      selectedElement.classList.add('singlePossibleAnswer-selected');\n\n      // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n      if (answersSelectedSO.current.length > possibleAnswersNum) {\n        console.log(answersSelectedSO.current);\n        console.log(possibleAnswersNum);\n        const removedElement = answersSelectedSO.current.shift();\n        console.log(removedElement);\n        if (removedElement == null) return;\n        removedElement.classList.remove('singlePossibleAnswer-selected');\n      }\n      const clickedButtonInfo = {\n        questionTitle: title,\n        answeredWord: [answersSelectedSO.current[answersSelectedSO.current.length - 1].id.split('-')[1]],\n        questionObject: questionInfoObj\n      };\n      if (selectedAnswersArr.current.length == 0) {\n        selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n        console.log(selectedAnswersArr);\n      } else {\n        for (let index = 0; index < selectedAnswersArr.current.length; index++) {\n          if (selectedAnswersArr.current[index].questionTitle == clickedButtonInfo.questionTitle) {\n            if (selectedAnswersArr.current[index].questionObject.correctAnswer.length != selectedAnswersArr.current[index].answeredWord.length) {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n            } else {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n              selectedAnswersArr.current[index].answeredWord.shift();\n            }\n            return;\n          } else if (index == selectedAnswersArr.current.length - 1) {\n            selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n          }\n        }\n      }\n    }\n    questionCounterRef.current++;\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-SelectOne single-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"single-question-title\",\n          children: [\"Question \", lessonNumber, \": \", questionInfoObj.title, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 102\n          }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n            children: [questionInfoObj.correctAnswer.length, \" possible answer/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 134,\n            columnNumber: 111\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-possibleAnswers\",\n          children: questionInfoObj.possibleAnswers.map((singleAnswer, index) => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"single-question-possibleAnswers-singleAnswer\",\n              id: `${index}SO-${singleAnswer}`,\n              onClick: () => {\n                answer_SO_Selected(`${index}SO-${singleAnswer}`, questionInfoObj.title);\n              },\n              children: singleAnswer\n            }, `${index}SO-${singleAnswer}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 25\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 13\n      }, this), MainCall()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this);\n  }\n  _s(LoadQuestion_SelectOne, \"GsVrt/j6XT75yGTQKIkLbhsVmeM=\");\n  function LoadQuestion_SelectMultiple(questionInfoObj) {\n    _s2();\n    const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n    const answersSelectedSM = useRef([]);\n    questionCounterRef.current++;\n    function answer_SM_Selected(id, title) {\n      // clicked element\n      const selectedElement = document.getElementById(id);\n      if (selectedElement == null) {\n        return;\n      }\n      // if user clicks the same answer, remove it from selected answers array and remove its answered class\n      if (answersSelectedSM.current.includes(selectedElement)) {\n        answersSelectedSM.current.map((element, index) => {\n          if (element == selectedElement) {\n            answersSelectedSM.current.splice(index, 1);\n            selectedElement.classList.remove('singlePossibleAnswer-selected');\n          }\n        });\n        selectedAnswersArr.current.map((singleAnsweredQuestion, index) => {\n          if (title == singleAnsweredQuestion.questionTitle) {\n            const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n            singleAnsweredQuestion.answeredWord.splice(wordIndex, 1);\n          }\n        });\n        return;\n      }\n      // else, push the new clicked value to the array and add the class of selected answer\n      answersSelectedSM.current.push(selectedElement);\n      selectedElement.classList.add('singlePossibleAnswer-selected');\n\n      // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n      if (answersSelectedSM.current.length > possibleAnswersNum) {\n        const removedElement = answersSelectedSM.current.shift();\n        if (removedElement == null) return;\n        removedElement.classList.remove('singlePossibleAnswer-selected');\n      }\n      const clickedButtonInfo = {\n        questionTitle: title,\n        answeredWord: [answersSelectedSM.current[answersSelectedSM.current.length - 1].id.split('-')[1]],\n        questionObject: questionInfoObj\n      };\n      if (selectedAnswersArr.current.length == 0) {\n        selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n        console.log(selectedAnswersArr.current);\n      } else {\n        for (let index = 0; index < selectedAnswersArr.current.length; index++) {\n          if (selectedAnswersArr.current[index].questionTitle == clickedButtonInfo.questionTitle) {\n            if (selectedAnswersArr.current[index].questionObject.correctAnswer.length != selectedAnswersArr.current[index].answeredWord.length) {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n            } else {\n              selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n              selectedAnswersArr.current[index].answeredWord.shift();\n            }\n            return;\n          } else if (index == selectedAnswersArr.current.length - 1) {\n            selectedAnswersArr.current = [...selectedAnswersArr.current, clickedButtonInfo];\n          }\n          console.log(selectedAnswersArr.current);\n        }\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-SelectMultiple single-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"single-question-title\",\n          children: [\"Question \", lessonNumber, \": \", questionInfoObj.title, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 106\n          }, this), /*#__PURE__*/_jsxDEV(\"em\", {\n            children: [questionInfoObj.correctAnswer.length, \" possible answer/s\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 115\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-possibleAnswers\",\n          children: questionInfoObj.possibleAnswers.map((singleAnswer, index) => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"single-question-possibleAnswers-singleAnswer\",\n              id: `${index}SM-${singleAnswer}`,\n              onClick: () => {\n                answer_SM_Selected(`${index}SM-${singleAnswer}`, questionInfoObj.title);\n              },\n              children: singleAnswer\n            }, `${index}SM-${singleAnswer}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 225,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 17\n      }, this), MainCall()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 13\n    }, this);\n  }\n  _s2(LoadQuestion_SelectMultiple, \"LfH49l8y7e7Vcx8L1Gzjqp7U5fk=\");\n  function loadQuestion_DragAndDrop(questionInfoObj) {\n    questionCounterRef.current++;\n    function onDropFunc(e) {\n      e.preventDefault();\n      const data = e.dataTransfer.getData(\"application/my-app\");\n      e.currentTarget.appendChild(document.getElementById(data));\n    }\n    function onDragOverFunc(e) {\n      e.preventDefault();\n      e.dataTransfer.dropEffect = \"move\";\n    }\n    function ondragstartFunc(e) {\n      e.dataTransfer.setData(\"application/my-app\", e.target.id);\n      e.dataTransfer.effectAllowed = \"move\";\n    }\n    return /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"question-DragAndDrop single-question\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"single-question-title\",\n          children: [\"Question \", lessonNumber, \": \", questionInfoObj.title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-DragAndDrop-words\",\n          onDrop: e => {\n            onDropFunc(e);\n          },\n          onDragOver: e => {\n            onDragOverFunc(e);\n          },\n          children: questionInfoObj.possibleAnswers.map((singleWord, index) => {\n            return /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"single-question-DragAndDrop-singleWord\",\n              id: `${index}DaD-${singleWord}`,\n              onDragStart: e => {\n                ondragstartFunc(e);\n              },\n              draggable: \"true\",\n              children: singleWord\n            }, `${index}DaD-${singleWord}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 29\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"single-question-DragAndDrop-location\",\n          onDrop: e => {\n            onDropFunc(e);\n          },\n          onDragOver: e => {\n            onDragOverFunc(e);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 17\n      }, this), MainCall()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 13\n    }, this);\n  }\n  function checkAnswers() {\n    // firstly check DragAndDrop question if it exists\n    if (document.querySelector('.single-question-DragAndDrop-location')) {\n      console.log('good');\n      let DragAndDropAnswers;\n      let userDragAndDropAnswers = [];\n      let DnDpoints = '';\n      document.querySelectorAll('.single-question-DragAndDrop-location .single-question-DragAndDrop-singleWord').forEach(element => {\n        userDragAndDropAnswers.push(element.innerText);\n      });\n      console.log(userDragAndDropAnswers);\n      const questionObject = Object.entries(props.props.arrayIndividualLessons).filter(element => {\n        if (typeof element[1][1] != 'string') return element;\n      });\n      console.log(questionObject);\n      for (let i = 0; i < questionObject.length; i++) {\n        if (questionObject[i][1][1].questionFormat == 'DragAndDrop') {\n          console.log('nice');\n          DragAndDropAnswers = questionObject[i][1];\n          if (!userDragAndDropAnswers) {} else if (userDragAndDropAnswers.length != questionObject[i][1][1].correctAnswer.length) {\n            props.handleError.setErrorMessage('You must answer all of the questions.');\n            console.log('x');\n            return;\n          } else {\n            userDragAndDropAnswers.map((element, index) => {\n              if (userDragAndDropAnswers[index] != questionObject[i][1][1].correctAnswer[index]) {\n                DnDpoints = 'NO POINTS FOR DND';\n              }\n              if (index == userDragAndDropAnswers.length - 1 && DnDpoints != 'NO POINTS FOR DND') {\n                DnDpoints = '++POINTS FOR DND';\n              }\n            });\n          }\n        }\n      }\n    }\n    // DnD - DragAndDrop\n    const non_DnD_Questions = Object.entries(props.props.arrayIndividualLessons).filter(element => {\n      console.log(element);\n      if (typeof element[1][1] != 'string' && element[1][1].questionFormat != 'DragAndDrop') return element;\n    });\n    console.log(non_DnD_Questions);\n    if (selectedAnswersArr.current.length < non_DnD_Questions.length) {\n      console.log(selectedAnswersArr.current);\n      console.log(non_DnD_Questions);\n      props.handleError.setErrorMessage('You must answer all of the questions.');\n      console.log('x');\n      return;\n    }\n    console.log(selectedAnswersArr.current);\n    let areAnswersGood = true;\n    selectedAnswersArr.current.map((singleAnsweredQuestion, index) => {\n      if (singleAnsweredQuestion.questionObject.correctAnswer.length != singleAnsweredQuestion.answeredWord.length) {\n        props.handleError.setErrorMessage('You have skipped an answer inside a question.');\n        areAnswersGood = false;\n        return;\n      } else {\n        if (index == selectedAnswersArr.current.length - 1) {\n          // CALCULATE THE CORRECT ANSWERS HERE\n        }\n      }\n    });\n  }\n  questionCounterRef.current++;\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: MainCall()\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 353,\n    columnNumber: 9\n  }, this);\n}\n_s3(LoadQuestions, \"ba7KBiSWuRvUAcvXAY6JCMwfbTI=\");\n_c = LoadQuestions;\nexport default LoadQuestions;\nvar _c;\n$RefreshReg$(_c, \"LoadQuestions\");","map":{"version":3,"names":["React","useEffect","useRef","LoadQuestions","props","questionCounterRef","current","lessonNumber","selectedAnswersArr","handleError","errorHandling","checkAnswers","MainCall","arrayIndividualLessons","length","title","slice","questionFormat","LoadQuestion_SelectOne","LoadQuestion_SelectMultiple","loadQuestion_DragAndDrop","questionInfoObj","answersSelectedSO","possibleAnswersNum","correctAnswer","answer_SO_Selected","id","selectedElement","document","getElementById","includes","map","element","index","splice","classList","remove","singleAnsweredQuestion","questionTitle","wordIndex","answeredWord","indexOf","innerText","push","add","console","log","removedElement","shift","clickedButtonInfo","split","questionObject","possibleAnswers","singleAnswer","answersSelectedSM","answer_SM_Selected","onDropFunc","e","preventDefault","data","dataTransfer","getData","currentTarget","appendChild","onDragOverFunc","dropEffect","ondragstartFunc","setData","target","effectAllowed","singleWord","querySelector","DragAndDropAnswers","userDragAndDropAnswers","DnDpoints","querySelectorAll","forEach","Object","entries","filter","i","setErrorMessage","non_DnD_Questions","areAnswersGood"],"sources":["/Users/justinas/Documents/repos/microgogool/client/src/Components/ContentSecComponents/LoadQuestions.tsx"],"sourcesContent":["import { type } from 'os';\nimport React, { useEffect, useRef } from 'react';\n\ninterface questionInfoObj{\n    correctAnswer: string[],\n    possibleAnswers: string[],\n    questionFormat: string,\n    title: string\n}\ninterface selectedAnswersArrInterface{\n    questionTitle: string,\n    answeredWord: string[],\n    questionObject: any\n}\nfunction LoadQuestions(props: any): React.ReactElement | null{\n    const questionCounterRef: {current: number} = {\n        current: -1\n    };\n\n    let lessonNumber = 0;\n\n    const selectedAnswersArr = useRef<selectedAnswersArrInterface[]>([]);\n\n    useEffect(()=>{\n        if(props.handleError.errorHandling!=false){\n            checkAnswers();\n        }\n    },[props.handleError.errorHandling])\n\n\n    function MainCall(): React.ReactElement | undefined{\n    if(!props.props.arrayIndividualLessons[questionCounterRef.current]){\n        if(questionCounterRef.current>=props.props.arrayIndividualLessons.length)return;\n        else {\n            questionCounterRef.current++;\n            return MainCall();\n        }\n    } else {\n        // still elements left in the array\n        if(props.props.arrayIndividualLessons[questionCounterRef.current][1].title){\n            // the element (props.props.arrayIndividualLessons[questionsCounterRef.current][1]) is question element - its second array elements contains info about questions\n            lessonNumber = props.props.arrayIndividualLessons[questionCounterRef.current][0].slice(6,7);\n            if(props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectOne'){\n                return LoadQuestion_SelectOne(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n            }\n            if(props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='SelectMultiple'){\n                return LoadQuestion_SelectMultiple(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n            }\n            if(props.props.arrayIndividualLessons[questionCounterRef.current][1].questionFormat=='DragAndDrop'){\n                return loadQuestion_DragAndDrop(props.props.arrayIndividualLessons[questionCounterRef.current][1]);\n            }\n        } else {\n            questionCounterRef.current++;\n            return MainCall();\n        }\n    }\n    }\n\n    function LoadQuestion_SelectOne(questionInfoObj: questionInfoObj){\n        questionCounterRef.current++;\n        const answersSelectedSO = useRef<HTMLElement[]>([]);\n\n        const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n\n        function answer_SO_Selected(id: string, title: string){\n            // clicked element\n            const selectedElement = document.getElementById(id);\n\n            if(selectedElement==null){\n                return;\n            }\n            // if user clicks the same answer, remove if from selected answers array and remove its answered class\n            if(answersSelectedSO.current.includes(selectedElement)){\n                answersSelectedSO.current.map((element,index: number)=>{\n                    if(element==selectedElement){\n                        answersSelectedSO.current.splice(index,1);\n                        selectedElement.classList.remove('singlePossibleAnswer-selected');\n                    }\n                })\n                selectedAnswersArr.current.map((singleAnsweredQuestion: any,index: number)=>{\n                    if(title==singleAnsweredQuestion.questionTitle){\n                        const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n                        singleAnsweredQuestion.answeredWord.splice(wordIndex,1)\n                    }\n                })\n                return;\n            }\n            // else, push the new clicked value to the array and add the class of selected answer\n            answersSelectedSO.current.push(selectedElement);\n            selectedElement.classList.add('singlePossibleAnswer-selected');\n\n            // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n            if(answersSelectedSO.current.length>possibleAnswersNum){\n                console.log(answersSelectedSO.current)\n                console.log(possibleAnswersNum)\n                const removedElement = answersSelectedSO.current.shift();\n                console.log(removedElement)\n                if(removedElement==null)return;\n                removedElement.classList.remove('singlePossibleAnswer-selected');\n            }\n            const clickedButtonInfo = {\n                questionTitle: title,\n                answeredWord: [answersSelectedSO.current[answersSelectedSO.current.length-1].id.split('-')[1]],\n                questionObject: questionInfoObj\n            }\n            if(selectedAnswersArr.current.length==0){\n                selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo];\n                console.log(selectedAnswersArr)\n            } else{\n                for(let index = 0; index < selectedAnswersArr.current.length; index++){\n                    if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n                        if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                        } else {\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                            selectedAnswersArr.current[index].answeredWord.shift();\n                        }\n                        return;\n                    } else if(index==selectedAnswersArr.current.length-1){\n                        selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo]\n                    }\n                }\n\n            }\n\n        \n\n        }\n\n        questionCounterRef.current++;\n        return(\n            <React.Fragment>\n            <div className='question-SelectOne single-question'>\n                <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n                <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n                    return(\n                        <button className='single-question-possibleAnswers-singleAnswer' \n                        key={`${index}SO-${singleAnswer}`}\n                        id={`${index}SO-${singleAnswer}`}\n                        onClick={()=>{answer_SO_Selected(`${index}SO-${singleAnswer}`, questionInfoObj.title)}}\n                        >\n                        {singleAnswer}</button>\n                    )\n                })}</div>\n            </div>\n            {MainCall()}\n            </React.Fragment>\n\n        )\n\n    }\n\n    function LoadQuestion_SelectMultiple(questionInfoObj: questionInfoObj){\n        const possibleAnswersNum = questionInfoObj.correctAnswer.length;\n        const answersSelectedSM = useRef<HTMLElement[]>([]);\n\n        questionCounterRef.current++;\n\n        function answer_SM_Selected(id: string, title: string){\n            // clicked element\n            const selectedElement = document.getElementById(id);\n\n            if(selectedElement==null){\n                return;\n            }\n            // if user clicks the same answer, remove it from selected answers array and remove its answered class\n            if(answersSelectedSM.current.includes(selectedElement)){\n                answersSelectedSM.current.map((element,index: number)=>{\n                    if(element==selectedElement){\n                        answersSelectedSM.current.splice(index,1);\n                        selectedElement.classList.remove('singlePossibleAnswer-selected');\n                    }\n                })\n                selectedAnswersArr.current.map((singleAnsweredQuestion: any,index: number)=>{\n                    if(title==singleAnsweredQuestion.questionTitle){\n                        const wordIndex = singleAnsweredQuestion.answeredWord.indexOf(selectedElement.innerText);\n                        singleAnsweredQuestion.answeredWord.splice(wordIndex,1)\n                    }\n                })\n                return;\n            }\n            // else, push the new clicked value to the array and add the class of selected answer\n            answersSelectedSM.current.push(selectedElement);\n            selectedElement.classList.add('singlePossibleAnswer-selected');\n\n            // if more than max answers are selected(elements pushed in array), removed the first added element from array and remove its class\n            if(answersSelectedSM.current.length>possibleAnswersNum){\n                const removedElement = answersSelectedSM.current.shift();\n                if(removedElement==null)return;\n                removedElement.classList.remove('singlePossibleAnswer-selected');\n            }\n            const clickedButtonInfo = {\n                questionTitle: title,\n                answeredWord: [answersSelectedSM.current[answersSelectedSM.current.length-1].id.split('-')[1]],\n                questionObject: questionInfoObj\n            }\n            if(selectedAnswersArr.current.length==0){\n                selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo];\n                console.log(selectedAnswersArr.current)\n            } else{\n                for(let index = 0; index < selectedAnswersArr.current.length; index++){\n                    if(selectedAnswersArr.current[index].questionTitle==clickedButtonInfo.questionTitle){\n                        if(selectedAnswersArr.current[index].questionObject.correctAnswer.length!=selectedAnswersArr.current[index].answeredWord.length){\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                        } else {\n                            selectedAnswersArr.current[index].answeredWord.push(clickedButtonInfo.answeredWord[0]);\n                            selectedAnswersArr.current[index].answeredWord.shift();\n                        }\n                        return;\n                    } else if(index==selectedAnswersArr.current.length-1){\n                        selectedAnswersArr.current=[...selectedAnswersArr.current, clickedButtonInfo]\n                    }\n                    console.log(selectedAnswersArr.current)\n\n                }\n            }\n        }\n\n        return(\n            <React.Fragment>\n                <div className='question-SelectMultiple single-question'>\n                    <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}<br></br><em>{questionInfoObj.correctAnswer.length} possible answer/s</em></p>\n                    <div className='single-question-possibleAnswers'>{questionInfoObj.possibleAnswers.map((singleAnswer,index)=>{\n                        return(\n                            <button className='single-question-possibleAnswers-singleAnswer' \n                            key={`${index}SM-${singleAnswer}`}\n                            id={`${index}SM-${singleAnswer}`}\n                            onClick={()=>{answer_SM_Selected(`${index}SM-${singleAnswer}`, questionInfoObj.title)}}\n                            >\n                            {singleAnswer}</button>\n                        )\n                    })}</div>\n                </div>\n                {MainCall()}\n            </React.Fragment>\n\n        )\n    }\n\n    function loadQuestion_DragAndDrop(questionInfoObj: questionInfoObj){\n        questionCounterRef.current++;\n\n        function onDropFunc(e: any){\n            e.preventDefault();\n            const data = e.dataTransfer.getData(\"application/my-app\");\n            e.currentTarget.appendChild(document.getElementById(data));\n        }\n        function onDragOverFunc(e: any){\n            e.preventDefault();\n            e.dataTransfer.dropEffect = \"move\";\n        }\n        function ondragstartFunc(e: any){\n            \n            e.dataTransfer.setData(\"application/my-app\", e.target.id);\n            e.dataTransfer.effectAllowed = \"move\";\n        }\n\n        return(\n            <React.Fragment>\n                <div className='question-DragAndDrop single-question'>\n                    <p className='single-question-title'>Question {lessonNumber}: {questionInfoObj.title}</p>\n                    <div className='single-question-DragAndDrop-words' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}>{questionInfoObj.possibleAnswers.map((singleWord,index)=>{\n                        return(\n                            <button className='single-question-DragAndDrop-singleWord'\n                            key={`${index}DaD-${singleWord}`}\n                            id={`${index}DaD-${singleWord}`}\n                            onDragStart={(e)=>{ondragstartFunc(e)}}\n                            draggable='true'\n                            >\n                            {singleWord}\n                            </button>\n                        )\n                    })}</div>\n                    <div className='single-question-DragAndDrop-location' onDrop={(e)=>{onDropFunc(e)}} onDragOver={(e)=>{onDragOverFunc(e)}}></div>\n                </div>\n                {MainCall()}\n            </React.Fragment>\n\n        )\n    }\n\n    function checkAnswers(){\n        // firstly check DragAndDrop question if it exists\n        if(document.querySelector('.single-question-DragAndDrop-location')){\n            console.log('good')\n            let DragAndDropAnswers;\n            let userDragAndDropAnswers: any = [];\n            let DnDpoints: string = '';\n            document.querySelectorAll('.single-question-DragAndDrop-location .single-question-DragAndDrop-singleWord').forEach((element: any)=>{\n                userDragAndDropAnswers.push(element.innerText)\n            });\n            console.log(userDragAndDropAnswers)\n            const questionObject: any = Object.entries(props.props.arrayIndividualLessons).filter((element: any)=>{\n                if(typeof element[1][1] != 'string')return element;\n            })\n            console.log(questionObject)\n            \n            for(let i = 0; i < questionObject.length; i++){\n                if(questionObject[i][1][1].questionFormat=='DragAndDrop'){\n                    console.log('nice')\n                    DragAndDropAnswers = questionObject[i][1];\n                    if(!userDragAndDropAnswers){\n\n                    } else if(userDragAndDropAnswers.length!=questionObject[i][1][1].correctAnswer.length){\n                        props.handleError.setErrorMessage('You must answer all of the questions.')\n                        console.log('x')\n                        return;\n                    } else {\n                        userDragAndDropAnswers.map((element: string,index: number)=>{\n                            if(userDragAndDropAnswers[index]!=questionObject[i][1][1].correctAnswer[index]){\n                                DnDpoints='NO POINTS FOR DND'\n                            }\n                            if(index==userDragAndDropAnswers.length-1 && DnDpoints!='NO POINTS FOR DND'){\n                                DnDpoints='++POINTS FOR DND';\n                            }\n                        })\n                    }\n\n                }\n            }\n            \n        }\n        // DnD - DragAndDrop\n        const non_DnD_Questions: any = Object.entries(props.props.arrayIndividualLessons).filter((element: any)=>{\n            console.log(element)\n            if(typeof element[1][1] != 'string' && element[1][1].questionFormat!='DragAndDrop')return element;\n        })\n        console.log(non_DnD_Questions)\n        if(selectedAnswersArr.current.length<non_DnD_Questions.length){\n            console.log(selectedAnswersArr.current)\n            console.log(non_DnD_Questions)\n            props.handleError.setErrorMessage('You must answer all of the questions.')\n            console.log('x')\n            return;\n        }\n        console.log(selectedAnswersArr.current);\n        let areAnswersGood = true;\n        selectedAnswersArr.current.map((singleAnsweredQuestion: any,index: number)=>{\n            if(singleAnsweredQuestion.questionObject.correctAnswer.length!=singleAnsweredQuestion.answeredWord.length){\n                props.handleError.setErrorMessage('You have skipped an answer inside a question.')\n                areAnswersGood = false;\n                return;\n\n            } else {\n                if(index==selectedAnswersArr.current.length-1){\n                    // CALCULATE THE CORRECT ANSWERS HERE\n                }\n            }\n        })\n    }\n    questionCounterRef.current++;\n    return(\n        <React.Fragment>\n        {MainCall()}\n        </React.Fragment>\n    )\n}\n\nexport default LoadQuestions;"],"mappings":"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"},"metadata":{},"sourceType":"module"}